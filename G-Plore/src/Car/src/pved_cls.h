/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 32.21.0 Sat Jan 18 19:20:53 2020.
 */

#ifndef PVED_CLS_H
#define PVED_CLS_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define PVED_CLS_STAT_MSG_8_S_FRAME_ID (0x18ff285au)
#define PVED_CLS_STAT_MSG_8_M_FRAME_ID (0x18ff2813u)
#define PVED_CLS_ELOBAU_EJM2_R_FRAME_ID (0xcfdd9eeu)
#define PVED_CLS_ELOBAU_EJM1_R_FRAME_ID (0xcfdd7edu)
#define PVED_CLS_ELOBAU_EJM2_P_FRAME_ID (0xcfdd9ecu)
#define PVED_CLS_ELOBAU_EJM1_P_FRAME_ID (0xcfdd7ebu)
#define PVED_CLS_ELOBAU_BJM2_R_FRAME_ID (0xcfdd8eeu)
#define PVED_CLS_ELOBAU_BJM1_R_FRAME_ID (0xcfdd6edu)
#define PVED_CLS_ELOBAU_BJM2_P_FRAME_ID (0xcfdd8ecu)
#define PVED_CLS_ELOBAU_BJM1_P_FRAME_ID (0xcfdd6ebu)
#define PVED_CLS_STAT_MSG_7_S_FRAME_ID (0x18ff275au)
#define PVED_CLS_STAT_MSG_7_M_FRAME_ID (0x18ff2713u)
#define PVED_CLS_GPS2_GMS_FRAME_ID (0xcac1d13u)
#define PVED_CLS_GPS2_GMC_FRAME_ID (0xcad131du)
#define PVED_CLS_J1939_ACK_S_FRAME_ID (0x18e8ff5au)
#define PVED_CLS_J1939_ACK_M_FRAME_ID (0x18e8ff13u)
#define PVED_CLS_REQ_PGN_S_FRAME_ID (0x18ea5afeu)
#define PVED_CLS_REQ_PGN_M_FRAME_ID (0x18ea13feu)
#define PVED_CLS_DM1_S_FRAME_ID (0x18feca5au)
#define PVED_CLS_DM1_M_FRAME_ID (0x18feca13u)
#define PVED_CLS_SER_TOOL_REPLY_S_FRAME_ID (0x18effe5au)
#define PVED_CLS_SER_TOOL_REPLY_M_FRAME_ID (0x18effe13u)
#define PVED_CLS_SER_TOOL_REQ_S_FRAME_ID (0x18ef5afeu)
#define PVED_CLS_SER_TOOL_REQ_M_FRAME_ID (0x18ef13feu)
#define PVED_CLS_STR_FB_MSG_S_FRAME_ID (0xcff185au)
#define PVED_CLS_STR_FB_MSG_M_FRAME_ID (0xcff1813u)
#define PVED_CLS_AUX_JOY_P_FRAME_ID (0xcff164eu)
#define PVED_CLS_AUX_JOY_R_FRAME_ID (0xcff174eu)
#define PVED_CLS_AUX_STW_R_FRAME_ID (0xcff154fu)
#define PVED_CLS_AUX_STW_P_FRAME_ID (0xcff144fu)
#define PVED_CLS_WAS_P_FRAME_ID (0xcff12fau)
#define PVED_CLS_WAS_R_FRAME_ID (0xcff13fau)
#define PVED_CLS_STW_R_FRAME_ID (0xcff114du)
#define PVED_CLS_STW_P_FRAME_ID (0xcff104du)
#define PVED_CLS_STAT_MSG_6_S_FRAME_ID (0x18ff265au)
#define PVED_CLS_STAT_MSG_6_M_FRAME_ID (0x18ff2613u)
#define PVED_CLS_STAT_MSG_5_S_FRAME_ID (0x18ff255au)
#define PVED_CLS_STAT_MSG_4_S_FRAME_ID (0x18ff245au)
#define PVED_CLS_STAT_MSG_4_M_FRAME_ID (0x18ff2413u)
#define PVED_CLS_ADR_CLAIMED_S_FRAME_ID (0x18eeff5au)
#define PVED_CLS_ADR_CLAIMED_M_FRAME_ID (0x18eeff13u)
#define PVED_CLS_STAT_MSG_5_M_FRAME_ID (0x18ff2513u)
#define PVED_CLS_GPS1_GMS_FRAME_ID (0xcac1c13u)
#define PVED_CLS_GPS1_GMC_FRAME_ID (0xcad131cu)
#define PVED_CLS_MMI_R_FRAME_ID (0xcef5afcu)
#define PVED_CLS_MMI_P_FRAME_ID (0xcef13fcu)
#define PVED_CLS_VSP_R_FRAME_ID (0xcff41fbu)
#define PVED_CLS_VSP_P_FRAME_ID (0xcff40fbu)
#define PVED_CLS_STAT_MSG_3_S_FRAME_ID (0x18ff235au)
#define PVED_CLS_STAT_MSG_3_M_FRAME_ID (0x18ff2313u)
#define PVED_CLS_STAT_MSG_2_S_FRAME_ID (0x18ff225au)
#define PVED_CLS_STAT_MSG_2_M_FRAME_ID (0x18ff2213u)
#define PVED_CLS_STAT_MSG_1_S_FRAME_ID (0x18ff215au)
#define PVED_CLS_STAT_MSG_1_M_FRAME_ID (0x18ff2113u)
#define PVED_CLS_STAT_MSG_OP_S_FRAME_ID (0x18ff205au)
#define PVED_CLS_STAT_MSG_OP_M_FRAME_ID (0x18ff2013u)

/* Frame lengths in bytes. */
#define PVED_CLS_STAT_MSG_8_S_LENGTH (8u)
#define PVED_CLS_STAT_MSG_8_M_LENGTH (8u)
#define PVED_CLS_ELOBAU_EJM2_R_LENGTH (8u)
#define PVED_CLS_ELOBAU_EJM1_R_LENGTH (8u)
#define PVED_CLS_ELOBAU_EJM2_P_LENGTH (8u)
#define PVED_CLS_ELOBAU_EJM1_P_LENGTH (8u)
#define PVED_CLS_ELOBAU_BJM2_R_LENGTH (8u)
#define PVED_CLS_ELOBAU_BJM1_R_LENGTH (8u)
#define PVED_CLS_ELOBAU_BJM2_P_LENGTH (8u)
#define PVED_CLS_ELOBAU_BJM1_P_LENGTH (8u)
#define PVED_CLS_STAT_MSG_7_S_LENGTH (8u)
#define PVED_CLS_STAT_MSG_7_M_LENGTH (8u)
#define PVED_CLS_GPS2_GMS_LENGTH (8u)
#define PVED_CLS_GPS2_GMC_LENGTH (8u)
#define PVED_CLS_J1939_ACK_S_LENGTH (8u)
#define PVED_CLS_J1939_ACK_M_LENGTH (8u)
#define PVED_CLS_REQ_PGN_S_LENGTH (3u)
#define PVED_CLS_REQ_PGN_M_LENGTH (3u)
#define PVED_CLS_DM1_S_LENGTH (8u)
#define PVED_CLS_DM1_M_LENGTH (8u)
#define PVED_CLS_SER_TOOL_REPLY_S_LENGTH (8u)
#define PVED_CLS_SER_TOOL_REPLY_M_LENGTH (8u)
#define PVED_CLS_SER_TOOL_REQ_S_LENGTH (8u)
#define PVED_CLS_SER_TOOL_REQ_M_LENGTH (8u)
#define PVED_CLS_STR_FB_MSG_S_LENGTH (8u)
#define PVED_CLS_STR_FB_MSG_M_LENGTH (8u)
#define PVED_CLS_AUX_JOY_P_LENGTH (8u)
#define PVED_CLS_AUX_JOY_R_LENGTH (8u)
#define PVED_CLS_AUX_STW_R_LENGTH (8u)
#define PVED_CLS_AUX_STW_P_LENGTH (8u)
#define PVED_CLS_WAS_P_LENGTH (8u)
#define PVED_CLS_WAS_R_LENGTH (8u)
#define PVED_CLS_STW_R_LENGTH (8u)
#define PVED_CLS_STW_P_LENGTH (8u)
#define PVED_CLS_STAT_MSG_6_S_LENGTH (8u)
#define PVED_CLS_STAT_MSG_6_M_LENGTH (8u)
#define PVED_CLS_STAT_MSG_5_S_LENGTH (8u)
#define PVED_CLS_STAT_MSG_4_S_LENGTH (8u)
#define PVED_CLS_STAT_MSG_4_M_LENGTH (8u)
#define PVED_CLS_ADR_CLAIMED_S_LENGTH (8u)
#define PVED_CLS_ADR_CLAIMED_M_LENGTH (8u)
#define PVED_CLS_STAT_MSG_5_M_LENGTH (8u)
#define PVED_CLS_GPS1_GMS_LENGTH (8u)
#define PVED_CLS_GPS1_GMC_LENGTH (8u)
#define PVED_CLS_MMI_R_LENGTH (8u)
#define PVED_CLS_MMI_P_LENGTH (8u)
#define PVED_CLS_VSP_R_LENGTH (8u)
#define PVED_CLS_VSP_P_LENGTH (8u)
#define PVED_CLS_STAT_MSG_3_S_LENGTH (8u)
#define PVED_CLS_STAT_MSG_3_M_LENGTH (8u)
#define PVED_CLS_STAT_MSG_2_S_LENGTH (8u)
#define PVED_CLS_STAT_MSG_2_M_LENGTH (8u)
#define PVED_CLS_STAT_MSG_1_S_LENGTH (8u)
#define PVED_CLS_STAT_MSG_1_M_LENGTH (8u)
#define PVED_CLS_STAT_MSG_OP_S_LENGTH (8u)
#define PVED_CLS_STAT_MSG_OP_M_LENGTH (8u)

/* Extended or standard frame types. */
#define PVED_CLS_STAT_MSG_8_S_IS_EXTENDED (1)
#define PVED_CLS_STAT_MSG_8_M_IS_EXTENDED (1)
#define PVED_CLS_ELOBAU_EJM2_R_IS_EXTENDED (1)
#define PVED_CLS_ELOBAU_EJM1_R_IS_EXTENDED (1)
#define PVED_CLS_ELOBAU_EJM2_P_IS_EXTENDED (1)
#define PVED_CLS_ELOBAU_EJM1_P_IS_EXTENDED (1)
#define PVED_CLS_ELOBAU_BJM2_R_IS_EXTENDED (1)
#define PVED_CLS_ELOBAU_BJM1_R_IS_EXTENDED (1)
#define PVED_CLS_ELOBAU_BJM2_P_IS_EXTENDED (1)
#define PVED_CLS_ELOBAU_BJM1_P_IS_EXTENDED (1)
#define PVED_CLS_STAT_MSG_7_S_IS_EXTENDED (1)
#define PVED_CLS_STAT_MSG_7_M_IS_EXTENDED (1)
#define PVED_CLS_GPS2_GMS_IS_EXTENDED (1)
#define PVED_CLS_GPS2_GMC_IS_EXTENDED (1)
#define PVED_CLS_J1939_ACK_S_IS_EXTENDED (1)
#define PVED_CLS_J1939_ACK_M_IS_EXTENDED (1)
#define PVED_CLS_REQ_PGN_S_IS_EXTENDED (1)
#define PVED_CLS_REQ_PGN_M_IS_EXTENDED (1)
#define PVED_CLS_DM1_S_IS_EXTENDED (1)
#define PVED_CLS_DM1_M_IS_EXTENDED (1)
#define PVED_CLS_SER_TOOL_REPLY_S_IS_EXTENDED (1)
#define PVED_CLS_SER_TOOL_REPLY_M_IS_EXTENDED (1)
#define PVED_CLS_SER_TOOL_REQ_S_IS_EXTENDED (1)
#define PVED_CLS_SER_TOOL_REQ_M_IS_EXTENDED (1)
#define PVED_CLS_STR_FB_MSG_S_IS_EXTENDED (1)
#define PVED_CLS_STR_FB_MSG_M_IS_EXTENDED (1)
#define PVED_CLS_AUX_JOY_P_IS_EXTENDED (1)
#define PVED_CLS_AUX_JOY_R_IS_EXTENDED (1)
#define PVED_CLS_AUX_STW_R_IS_EXTENDED (1)
#define PVED_CLS_AUX_STW_P_IS_EXTENDED (1)
#define PVED_CLS_WAS_P_IS_EXTENDED (1)
#define PVED_CLS_WAS_R_IS_EXTENDED (1)
#define PVED_CLS_STW_R_IS_EXTENDED (1)
#define PVED_CLS_STW_P_IS_EXTENDED (1)
#define PVED_CLS_STAT_MSG_6_S_IS_EXTENDED (1)
#define PVED_CLS_STAT_MSG_6_M_IS_EXTENDED (1)
#define PVED_CLS_STAT_MSG_5_S_IS_EXTENDED (1)
#define PVED_CLS_STAT_MSG_4_S_IS_EXTENDED (1)
#define PVED_CLS_STAT_MSG_4_M_IS_EXTENDED (1)
#define PVED_CLS_ADR_CLAIMED_S_IS_EXTENDED (1)
#define PVED_CLS_ADR_CLAIMED_M_IS_EXTENDED (1)
#define PVED_CLS_STAT_MSG_5_M_IS_EXTENDED (1)
#define PVED_CLS_GPS1_GMS_IS_EXTENDED (1)
#define PVED_CLS_GPS1_GMC_IS_EXTENDED (1)
#define PVED_CLS_MMI_R_IS_EXTENDED (1)
#define PVED_CLS_MMI_P_IS_EXTENDED (1)
#define PVED_CLS_VSP_R_IS_EXTENDED (1)
#define PVED_CLS_VSP_P_IS_EXTENDED (1)
#define PVED_CLS_STAT_MSG_3_S_IS_EXTENDED (1)
#define PVED_CLS_STAT_MSG_3_M_IS_EXTENDED (1)
#define PVED_CLS_STAT_MSG_2_S_IS_EXTENDED (1)
#define PVED_CLS_STAT_MSG_2_M_IS_EXTENDED (1)
#define PVED_CLS_STAT_MSG_1_S_IS_EXTENDED (1)
#define PVED_CLS_STAT_MSG_1_M_IS_EXTENDED (1)
#define PVED_CLS_STAT_MSG_OP_S_IS_EXTENDED (1)
#define PVED_CLS_STAT_MSG_OP_M_IS_EXTENDED (1)

/* Frame cycle times in milliseconds. */
#define PVED_CLS_STAT_MSG_8_S_CYCLE_TIME_MS (0u)
#define PVED_CLS_STAT_MSG_8_M_CYCLE_TIME_MS (0u)
#define PVED_CLS_ELOBAU_EJM2_R_CYCLE_TIME_MS (0u)
#define PVED_CLS_ELOBAU_EJM1_R_CYCLE_TIME_MS (0u)
#define PVED_CLS_ELOBAU_EJM2_P_CYCLE_TIME_MS (0u)
#define PVED_CLS_ELOBAU_EJM1_P_CYCLE_TIME_MS (0u)
#define PVED_CLS_ELOBAU_BJM2_R_CYCLE_TIME_MS (0u)
#define PVED_CLS_ELOBAU_BJM1_R_CYCLE_TIME_MS (0u)
#define PVED_CLS_ELOBAU_BJM2_P_CYCLE_TIME_MS (0u)
#define PVED_CLS_ELOBAU_BJM1_P_CYCLE_TIME_MS (0u)
#define PVED_CLS_STAT_MSG_7_S_CYCLE_TIME_MS (0u)
#define PVED_CLS_STAT_MSG_7_M_CYCLE_TIME_MS (0u)
#define PVED_CLS_GPS2_GMS_CYCLE_TIME_MS (0u)
#define PVED_CLS_GPS2_GMC_CYCLE_TIME_MS (0u)
#define PVED_CLS_J1939_ACK_S_CYCLE_TIME_MS (0u)
#define PVED_CLS_J1939_ACK_M_CYCLE_TIME_MS (0u)
#define PVED_CLS_REQ_PGN_S_CYCLE_TIME_MS (0u)
#define PVED_CLS_REQ_PGN_M_CYCLE_TIME_MS (0u)
#define PVED_CLS_DM1_S_CYCLE_TIME_MS (0u)
#define PVED_CLS_DM1_M_CYCLE_TIME_MS (0u)
#define PVED_CLS_SER_TOOL_REPLY_S_CYCLE_TIME_MS (0u)
#define PVED_CLS_SER_TOOL_REPLY_M_CYCLE_TIME_MS (0u)
#define PVED_CLS_SER_TOOL_REQ_S_CYCLE_TIME_MS (0u)
#define PVED_CLS_SER_TOOL_REQ_M_CYCLE_TIME_MS (0u)
#define PVED_CLS_STR_FB_MSG_S_CYCLE_TIME_MS (0u)
#define PVED_CLS_STR_FB_MSG_M_CYCLE_TIME_MS (0u)
#define PVED_CLS_AUX_JOY_P_CYCLE_TIME_MS (0u)
#define PVED_CLS_AUX_JOY_R_CYCLE_TIME_MS (0u)
#define PVED_CLS_AUX_STW_R_CYCLE_TIME_MS (0u)
#define PVED_CLS_AUX_STW_P_CYCLE_TIME_MS (0u)
#define PVED_CLS_WAS_P_CYCLE_TIME_MS (0u)
#define PVED_CLS_WAS_R_CYCLE_TIME_MS (0u)
#define PVED_CLS_STW_R_CYCLE_TIME_MS (0u)
#define PVED_CLS_STW_P_CYCLE_TIME_MS (0u)
#define PVED_CLS_STAT_MSG_6_S_CYCLE_TIME_MS (0u)
#define PVED_CLS_STAT_MSG_6_M_CYCLE_TIME_MS (0u)
#define PVED_CLS_STAT_MSG_5_S_CYCLE_TIME_MS (0u)
#define PVED_CLS_STAT_MSG_4_S_CYCLE_TIME_MS (0u)
#define PVED_CLS_STAT_MSG_4_M_CYCLE_TIME_MS (0u)
#define PVED_CLS_ADR_CLAIMED_S_CYCLE_TIME_MS (0u)
#define PVED_CLS_ADR_CLAIMED_M_CYCLE_TIME_MS (0u)
#define PVED_CLS_STAT_MSG_5_M_CYCLE_TIME_MS (0u)
#define PVED_CLS_GPS1_GMS_CYCLE_TIME_MS (0u)
#define PVED_CLS_GPS1_GMC_CYCLE_TIME_MS (0u)
#define PVED_CLS_MMI_R_CYCLE_TIME_MS (0u)
#define PVED_CLS_MMI_P_CYCLE_TIME_MS (0u)
#define PVED_CLS_VSP_R_CYCLE_TIME_MS (0u)
#define PVED_CLS_VSP_P_CYCLE_TIME_MS (0u)
#define PVED_CLS_STAT_MSG_3_S_CYCLE_TIME_MS (0u)
#define PVED_CLS_STAT_MSG_3_M_CYCLE_TIME_MS (0u)
#define PVED_CLS_STAT_MSG_2_S_CYCLE_TIME_MS (0u)
#define PVED_CLS_STAT_MSG_2_M_CYCLE_TIME_MS (0u)
#define PVED_CLS_STAT_MSG_1_S_CYCLE_TIME_MS (0u)
#define PVED_CLS_STAT_MSG_1_M_CYCLE_TIME_MS (0u)
#define PVED_CLS_STAT_MSG_OP_S_CYCLE_TIME_MS (0u)
#define PVED_CLS_STAT_MSG_OP_M_CYCLE_TIME_MS (0u)

/* Signal choices. */
#define PVED_CLS_STAT_MSG_8_S_IMD_STATUS_S_STEERING_WHEEL_ACTIVE_CHOICE (0u)
#define PVED_CLS_STAT_MSG_8_S_IMD_STATUS_S_STEERING_WHEEL_INACTIVE_CHOICE (1u)
#define PVED_CLS_STAT_MSG_8_S_IMD_STATUS_S_RESERVED_CHOICE (2u)
#define PVED_CLS_STAT_MSG_8_S_IMD_STATUS_S_INFORMATION_NOT_AVAILABLE_CHOICE (3u)

#define PVED_CLS_STAT_MSG_8_M_IMD_STATUS_M_STEERING_WHEEL_ACTIVE_CHOICE (0u)
#define PVED_CLS_STAT_MSG_8_M_IMD_STATUS_M_STEERING_WHEEL_INACTIVE_CHOICE (1u)
#define PVED_CLS_STAT_MSG_8_M_IMD_STATUS_M_RESERVED_CHOICE (2u)
#define PVED_CLS_STAT_MSG_8_M_IMD_STATUS_M_INFORMATION_NOT_AVAILABLE_CHOICE (3u)

#define PVED_CLS_ELOBAU_EJM2_R_ELOBAU_NEUTRAL_R_NOT__IN__POSITION_CHOICE (0u)
#define PVED_CLS_ELOBAU_EJM2_R_ELOBAU_NEUTRAL_R_IN__POSITION_CHOICE (1u)
#define PVED_CLS_ELOBAU_EJM2_R_ELOBAU_NEUTRAL_R_ERROR__INDICATOR_CHOICE (2u)
#define PVED_CLS_ELOBAU_EJM2_R_ELOBAU_NEUTRAL_R_NOT__AVAILABLE_CHOICE (3u)

#define PVED_CLS_ELOBAU_EJM2_R_ELOBAU_LEFT_R_NOT__IN__POSITION_CHOICE (0u)
#define PVED_CLS_ELOBAU_EJM2_R_ELOBAU_LEFT_R_IN__POSITION_CHOICE (1u)
#define PVED_CLS_ELOBAU_EJM2_R_ELOBAU_LEFT_R_ERROR__INDICATOR_CHOICE (2u)
#define PVED_CLS_ELOBAU_EJM2_R_ELOBAU_LEFT_R_NOT__AVAILABLE_CHOICE (3u)

#define PVED_CLS_ELOBAU_EJM2_R_ELOBAU_RIGHT_R_NOT__IN__POSITION_CHOICE (0u)
#define PVED_CLS_ELOBAU_EJM2_R_ELOBAU_RIGHT_R_IN__POSITION_CHOICE (1u)
#define PVED_CLS_ELOBAU_EJM2_R_ELOBAU_RIGHT_R_ERROR__INDICATOR_CHOICE (2u)
#define PVED_CLS_ELOBAU_EJM2_R_ELOBAU_RIGHT_R_NOT__AVAILABLE_CHOICE (3u)

#define PVED_CLS_ELOBAU_EJM1_R_ELOBAU_NEUTRAL_R_NOT__IN__POSITION_CHOICE (0u)
#define PVED_CLS_ELOBAU_EJM1_R_ELOBAU_NEUTRAL_R_IN__POSITION_CHOICE (1u)
#define PVED_CLS_ELOBAU_EJM1_R_ELOBAU_NEUTRAL_R_ERROR__INDICATOR_CHOICE (2u)
#define PVED_CLS_ELOBAU_EJM1_R_ELOBAU_NEUTRAL_R_NOT__AVAILABLE_CHOICE (3u)

#define PVED_CLS_ELOBAU_EJM1_R_ELOBAU_LEFT_R_NOT__IN__POSITION_CHOICE (0u)
#define PVED_CLS_ELOBAU_EJM1_R_ELOBAU_LEFT_R_IN__POSITION_CHOICE (1u)
#define PVED_CLS_ELOBAU_EJM1_R_ELOBAU_LEFT_R_ERROR__INDICATOR_CHOICE (2u)
#define PVED_CLS_ELOBAU_EJM1_R_ELOBAU_LEFT_R_NOT__AVAILABLE_CHOICE (3u)

#define PVED_CLS_ELOBAU_EJM1_R_ELOBAU_RIGHT_R_NOT__IN__POSITION_CHOICE (0u)
#define PVED_CLS_ELOBAU_EJM1_R_ELOBAU_RIGHT_R_IN__POSITION_CHOICE (1u)
#define PVED_CLS_ELOBAU_EJM1_R_ELOBAU_RIGHT_R_ERROR__INDICATOR_CHOICE (2u)
#define PVED_CLS_ELOBAU_EJM1_R_ELOBAU_RIGHT_R_NOT__AVAILABLE_CHOICE (3u)

#define PVED_CLS_ELOBAU_EJM2_P_ELOBAU_NEUTRAL_P_NOT__IN__POSITION_CHOICE (0u)
#define PVED_CLS_ELOBAU_EJM2_P_ELOBAU_NEUTRAL_P_IN__POSITION_CHOICE (1u)
#define PVED_CLS_ELOBAU_EJM2_P_ELOBAU_NEUTRAL_P_ERROR__INDICATOR_CHOICE (2u)
#define PVED_CLS_ELOBAU_EJM2_P_ELOBAU_NEUTRAL_P_NOT__AVAILABLE_CHOICE (3u)

#define PVED_CLS_ELOBAU_EJM2_P_ELOBAU_LEFT_P_NOT__IN__POSITION_CHOICE (0u)
#define PVED_CLS_ELOBAU_EJM2_P_ELOBAU_LEFT_P_IN__POSITION_CHOICE (1u)
#define PVED_CLS_ELOBAU_EJM2_P_ELOBAU_LEFT_P_ERROR__INDICATOR_CHOICE (2u)
#define PVED_CLS_ELOBAU_EJM2_P_ELOBAU_LEFT_P_NOT__AVAILABLE_CHOICE (3u)

#define PVED_CLS_ELOBAU_EJM2_P_ELOBAU_RIGHT_P_NOT__IN__POSITION_CHOICE (0u)
#define PVED_CLS_ELOBAU_EJM2_P_ELOBAU_RIGHT_P_IN__POSITION_CHOICE (1u)
#define PVED_CLS_ELOBAU_EJM2_P_ELOBAU_RIGHT_P_ERROR__INDICATOR_CHOICE (2u)
#define PVED_CLS_ELOBAU_EJM2_P_ELOBAU_RIGHT_P_NOT__AVAILABLE_CHOICE (3u)

#define PVED_CLS_ELOBAU_EJM1_P_ELOBAU_NEUTRAL_P_NOT__IN__POSITION_CHOICE (0u)
#define PVED_CLS_ELOBAU_EJM1_P_ELOBAU_NEUTRAL_P_IN__POSITION_CHOICE (1u)
#define PVED_CLS_ELOBAU_EJM1_P_ELOBAU_NEUTRAL_P_ERROR__INDICATOR_CHOICE (2u)
#define PVED_CLS_ELOBAU_EJM1_P_ELOBAU_NEUTRAL_P_NOT__AVAILABLE_CHOICE (3u)

#define PVED_CLS_ELOBAU_EJM1_P_ELOBAU_LEFT_P_NOT__IN__POSITION_CHOICE (0u)
#define PVED_CLS_ELOBAU_EJM1_P_ELOBAU_LEFT_P_IN__POSITION_CHOICE (1u)
#define PVED_CLS_ELOBAU_EJM1_P_ELOBAU_LEFT_P_ERROR__INDICATOR_CHOICE (2u)
#define PVED_CLS_ELOBAU_EJM1_P_ELOBAU_LEFT_P_NOT__AVAILABLE_CHOICE (3u)

#define PVED_CLS_ELOBAU_EJM1_P_ELOBAU_RIGHT_P_NOT__IN__POSITION_CHOICE (0u)
#define PVED_CLS_ELOBAU_EJM1_P_ELOBAU_RIGHT_P_IN__POSITION_CHOICE (1u)
#define PVED_CLS_ELOBAU_EJM1_P_ELOBAU_RIGHT_P_ERROR__INDICATOR_CHOICE (2u)
#define PVED_CLS_ELOBAU_EJM1_P_ELOBAU_RIGHT_P_NOT__AVAILABLE_CHOICE (3u)

#define PVED_CLS_ELOBAU_BJM2_R_ELOBAU_NEUTRAL_R_NOT__IN__POSITION_CHOICE (0u)
#define PVED_CLS_ELOBAU_BJM2_R_ELOBAU_NEUTRAL_R_IN__POSITION_CHOICE (1u)
#define PVED_CLS_ELOBAU_BJM2_R_ELOBAU_NEUTRAL_R_ERROR__INDICATOR_CHOICE (2u)
#define PVED_CLS_ELOBAU_BJM2_R_ELOBAU_NEUTRAL_R_NOT__AVAILABLE_CHOICE (3u)

#define PVED_CLS_ELOBAU_BJM2_R_ELOBAU_LEFT_R_NOT__IN__POSITION_CHOICE (0u)
#define PVED_CLS_ELOBAU_BJM2_R_ELOBAU_LEFT_R_IN__POSITION_CHOICE (1u)
#define PVED_CLS_ELOBAU_BJM2_R_ELOBAU_LEFT_R_ERROR__INDICATOR_CHOICE (2u)
#define PVED_CLS_ELOBAU_BJM2_R_ELOBAU_LEFT_R_NOT__AVAILABLE_CHOICE (3u)

#define PVED_CLS_ELOBAU_BJM2_R_ELOBAU_RIGHT_R_NOT__IN__POSITION_CHOICE (0u)
#define PVED_CLS_ELOBAU_BJM2_R_ELOBAU_RIGHT_R_IN__POSITION_CHOICE (1u)
#define PVED_CLS_ELOBAU_BJM2_R_ELOBAU_RIGHT_R_ERROR__INDICATOR_CHOICE (2u)
#define PVED_CLS_ELOBAU_BJM2_R_ELOBAU_RIGHT_R_NOT__AVAILABLE_CHOICE (3u)

#define PVED_CLS_ELOBAU_BJM1_R_ELOBAU_NEUTRAL_R_NOT__IN__POSITION_CHOICE (0u)
#define PVED_CLS_ELOBAU_BJM1_R_ELOBAU_NEUTRAL_R_IN__POSITION_CHOICE (1u)
#define PVED_CLS_ELOBAU_BJM1_R_ELOBAU_NEUTRAL_R_ERROR__INDICATOR_CHOICE (2u)
#define PVED_CLS_ELOBAU_BJM1_R_ELOBAU_NEUTRAL_R_NOT__AVAILABLE_CHOICE (3u)

#define PVED_CLS_ELOBAU_BJM1_R_ELOBAU_LEFT_R_NOT__IN__POSITION_CHOICE (0u)
#define PVED_CLS_ELOBAU_BJM1_R_ELOBAU_LEFT_R_IN__POSITION_CHOICE (1u)
#define PVED_CLS_ELOBAU_BJM1_R_ELOBAU_LEFT_R_ERROR__INDICATOR_CHOICE (2u)
#define PVED_CLS_ELOBAU_BJM1_R_ELOBAU_LEFT_R_NOT__AVAILABLE_CHOICE (3u)

#define PVED_CLS_ELOBAU_BJM1_R_ELOBAU_RIGHT_R_NOT__IN__POSITION_CHOICE (0u)
#define PVED_CLS_ELOBAU_BJM1_R_ELOBAU_RIGHT_R_IN__POSITION_CHOICE (1u)
#define PVED_CLS_ELOBAU_BJM1_R_ELOBAU_RIGHT_R_ERROR__INDICATOR_CHOICE (2u)
#define PVED_CLS_ELOBAU_BJM1_R_ELOBAU_RIGHT_R_NOT__AVAILABLE_CHOICE (3u)

#define PVED_CLS_ELOBAU_BJM2_P_ELOBAU_NEUTRAL_P_NOT__IN__POSITION_CHOICE (0u)
#define PVED_CLS_ELOBAU_BJM2_P_ELOBAU_NEUTRAL_P_IN__POSITION_CHOICE (1u)
#define PVED_CLS_ELOBAU_BJM2_P_ELOBAU_NEUTRAL_P_ERROR__INDICATOR_CHOICE (2u)
#define PVED_CLS_ELOBAU_BJM2_P_ELOBAU_NEUTRAL_P_NOT__AVAILABLE_CHOICE (3u)

#define PVED_CLS_ELOBAU_BJM2_P_ELOBAU_LEFT_P_NOT__IN__POSITION_CHOICE (0u)
#define PVED_CLS_ELOBAU_BJM2_P_ELOBAU_LEFT_P_IN__POSITION_CHOICE (1u)
#define PVED_CLS_ELOBAU_BJM2_P_ELOBAU_LEFT_P_ERROR__INDICATOR_CHOICE (2u)
#define PVED_CLS_ELOBAU_BJM2_P_ELOBAU_LEFT_P_NOT__AVAILABLE_CHOICE (3u)

#define PVED_CLS_ELOBAU_BJM2_P_ELOBAU_RIGHT_P_NOT__IN__POSITION_CHOICE (0u)
#define PVED_CLS_ELOBAU_BJM2_P_ELOBAU_RIGHT_P_IN__POSITION_CHOICE (1u)
#define PVED_CLS_ELOBAU_BJM2_P_ELOBAU_RIGHT_P_ERROR__INDICATOR_CHOICE (2u)
#define PVED_CLS_ELOBAU_BJM2_P_ELOBAU_RIGHT_P_NOT__AVAILABLE_CHOICE (3u)

#define PVED_CLS_ELOBAU_BJM1_P_ELOBAU_NEUTRAL_P_NOT__IN__POSITION_CHOICE (0u)
#define PVED_CLS_ELOBAU_BJM1_P_ELOBAU_NEUTRAL_P_IN__POSITION_CHOICE (1u)
#define PVED_CLS_ELOBAU_BJM1_P_ELOBAU_NEUTRAL_P_ERROR__INDICATOR_CHOICE (2u)
#define PVED_CLS_ELOBAU_BJM1_P_ELOBAU_NEUTRAL_P_NOT__AVAILABLE_CHOICE (3u)

#define PVED_CLS_ELOBAU_BJM1_P_ELOBAU_LEFT_P_NOT__IN__POSITION_CHOICE (0u)
#define PVED_CLS_ELOBAU_BJM1_P_ELOBAU_LEFT_P_IN__POSITION_CHOICE (1u)
#define PVED_CLS_ELOBAU_BJM1_P_ELOBAU_LEFT_P_ERROR__INDICATOR_CHOICE (2u)
#define PVED_CLS_ELOBAU_BJM1_P_ELOBAU_LEFT_P_NOT__AVAILABLE_CHOICE (3u)

#define PVED_CLS_ELOBAU_BJM1_P_ELOBAU_RIGHT_P_NOT__IN__POSITION_CHOICE (0u)
#define PVED_CLS_ELOBAU_BJM1_P_ELOBAU_RIGHT_P_IN__POSITION_CHOICE (1u)
#define PVED_CLS_ELOBAU_BJM1_P_ELOBAU_RIGHT_P_ERROR__INDICATOR_CHOICE (2u)
#define PVED_CLS_ELOBAU_BJM1_P_ELOBAU_RIGHT_P_NOT__AVAILABLE_CHOICE (3u)

#define PVED_CLS_GPS2_GMS_GPS2_SYSTEM_LOCKOUT_NOT_ACTIVE_CHOICE (0u)
#define PVED_CLS_GPS2_GMS_GPS2_SYSTEM_LOCKOUT_ACTIVE_CHOICE (1u)
#define PVED_CLS_GPS2_GMS_GPS2_SYSTEM_LOCKOUT_ERROR__CONDITION_CHOICE (2u)
#define PVED_CLS_GPS2_GMS_GPS2_SYSTEM_LOCKOUT_INFORMATION__NOT_AVAILABLE_CHOICE (3u)

#define PVED_CLS_GPS2_GMS_GPS2_SYSTEM_READY_SYSTEM_IS_NOT_READY_CHOICE (0u)
#define PVED_CLS_GPS2_GMS_GPS2_SYSTEM_READY_SYSTEM_IS_READY_CHOICE (1u)
#define PVED_CLS_GPS2_GMS_GPS2_SYSTEM_READY_ERROR_CONDITION_CHOICE (2u)
#define PVED_CLS_GPS2_GMS_GPS2_SYSTEM_READY_INFORMATION_NOT_AVAILABLE_CHOICE (3u)

#define PVED_CLS_GPS2_GMS_GPS2_STR_INPUT_POS_STATUS_INCORRECT_POSITION_CHOICE (0u)
#define PVED_CLS_GPS2_GMS_GPS2_STR_INPUT_POS_STATUS_CORRECT_POSITION_CHOICE (1u)
#define PVED_CLS_GPS2_GMS_GPS2_STR_INPUT_POS_STATUS_ERROR_CONDITION_CHOICE (2u)
#define PVED_CLS_GPS2_GMS_GPS2_STR_INPUT_POS_STATUS_INFORMATION__NOT_AVAILABLE_CHOICE (3u)

#define PVED_CLS_GPS2_GMS_GPS2_REQ_RESET_RESET_NOT_REQUIRED_CHOICE (0u)
#define PVED_CLS_GPS2_GMS_GPS2_REQ_RESET_RESET_REQUIRED_CHOICE (1u)
#define PVED_CLS_GPS2_GMS_GPS2_REQ_RESET_ERROR_CONDITION_CHOICE (2u)
#define PVED_CLS_GPS2_GMS_GPS2_REQ_RESET_NOT_AVAILABLE_CHOICE (3u)

#define PVED_CLS_GPS2_GMS_GPS2_LIMIT_STATUS_NOT_LIMITED_CHOICE (0u)
#define PVED_CLS_GPS2_GMS_GPS2_LIMIT_STATUS_RESERVED_1_CHOICE (1u)
#define PVED_CLS_GPS2_GMS_GPS2_LIMIT_STATUS_LIMITED_HIGH_CHOICE (2u)
#define PVED_CLS_GPS2_GMS_GPS2_LIMIT_STATUS_LIMITED_LOW__CHOICE (3u)
#define PVED_CLS_GPS2_GMS_GPS2_LIMIT_STATUS_RESERVED_4_CHOICE (4u)
#define PVED_CLS_GPS2_GMS_GPS2_LIMIT_STATUS_RESERVED_5_CHOICE (5u)
#define PVED_CLS_GPS2_GMS_GPS2_LIMIT_STATUS_NON_RECOVERABLE_FAULT_CHOICE (6u)
#define PVED_CLS_GPS2_GMS_GPS2_LIMIT_STATUS_RESERVED_7_CHOICE (7u)

#define PVED_CLS_GPS2_GMS_GPS2_EXIT_REASON_NO_REASON_ALL_CLEAR_CHOICE (0u)
#define PVED_CLS_GPS2_GMS_GPS2_EXIT_REASON_RESERVED_1_CHOICE (1u)
#define PVED_CLS_GPS2_GMS_GPS2_EXIT_REASON_RESERVED_2_CHOICE (2u)
#define PVED_CLS_GPS2_GMS_GPS2_EXIT_REASON_OPERATOR_OVERRIDE_OF_FUNCTION_CHOICE (3u)
#define PVED_CLS_GPS2_GMS_GPS2_EXIT_REASON_RESERVED_4_CHOICE (4u)
#define PVED_CLS_GPS2_GMS_GPS2_EXIT_REASON_GMC_TIMEOUT_CHOICE (5u)
#define PVED_CLS_GPS2_GMS_GPS2_EXIT_REASON_GMC_OUT_OF_RANGE_INVALID_CHOICE (6u)
#define PVED_CLS_GPS2_GMS_GPS2_EXIT_REASON_RESERVED_7_CHOICE (7u)
#define PVED_CLS_GPS2_GMS_GPS2_EXIT_REASON_RESERVED_8_CHOICE (8u)
#define PVED_CLS_GPS2_GMS_GPS2_EXIT_REASON_RESERVED_9_CHOICE (9u)
#define PVED_CLS_GPS2_GMS_GPS2_EXIT_REASON_RESERVED_10_CHOICE (10u)
#define PVED_CLS_GPS2_GMS_GPS2_EXIT_REASON_RESERVED_11_CHOICE (11u)
#define PVED_CLS_GPS2_GMS_GPS2_EXIT_REASON_RESERVED_12_CHOICE (12u)
#define PVED_CLS_GPS2_GMS_GPS2_EXIT_REASON_RESERVED_13_CHOICE (13u)
#define PVED_CLS_GPS2_GMS_GPS2_EXIT_REASON_RESERVED_14_CHOICE (14u)
#define PVED_CLS_GPS2_GMS_GPS2_EXIT_REASON_RESERVED_15_CHOICE (15u)
#define PVED_CLS_GPS2_GMS_GPS2_EXIT_REASON_RESERVED_16_CHOICE (16u)
#define PVED_CLS_GPS2_GMS_GPS2_EXIT_REASON_RESERVED_17_CHOICE (17u)
#define PVED_CLS_GPS2_GMS_GPS2_EXIT_REASON_RESERVED_18_CHOICE (18u)
#define PVED_CLS_GPS2_GMS_GPS2_EXIT_REASON_RESERVED_19_CHOICE (19u)
#define PVED_CLS_GPS2_GMS_GPS2_EXIT_REASON_RESERVED_20_CHOICE (20u)
#define PVED_CLS_GPS2_GMS_GPS2_EXIT_REASON_RESERVED_21_CHOICE (21u)
#define PVED_CLS_GPS2_GMS_GPS2_EXIT_REASON_RESERVED_22_CHOICE (22u)
#define PVED_CLS_GPS2_GMS_GPS2_EXIT_REASON_RESERVED_23_CHOICE (23u)
#define PVED_CLS_GPS2_GMS_GPS2_EXIT_REASON_VEHICLE_SPEED_TOO_HIGH_CHOICE (24u)
#define PVED_CLS_GPS2_GMS_GPS2_EXIT_REASON_ALTRNTE_GUIDNCE_OR_NO_SYS_ACTIVE_CHOICE (25u)
#define PVED_CLS_GPS2_GMS_GPS2_EXIT_REASON_RESERVED_26_CHOICE (26u)
#define PVED_CLS_GPS2_GMS_GPS2_EXIT_REASON_RESERVED_27_CHOICE (27u)
#define PVED_CLS_GPS2_GMS_GPS2_EXIT_REASON_RESERVED_28_CHOICE (28u)
#define PVED_CLS_GPS2_GMS_GPS2_EXIT_REASON_RESERVED_29_CHOICE (29u)
#define PVED_CLS_GPS2_GMS_GPS2_EXIT_REASON_RESERVED_30_CHOICE (30u)
#define PVED_CLS_GPS2_GMS_GPS2_EXIT_REASON_RESERVED_31_CHOICE (31u)
#define PVED_CLS_GPS2_GMS_GPS2_EXIT_REASON_RESERVED_32_CHOICE (32u)
#define PVED_CLS_GPS2_GMS_GPS2_EXIT_REASON_RESERVED_33_CHOICE (33u)
#define PVED_CLS_GPS2_GMS_GPS2_EXIT_REASON_RESERVED_34_CHOICE (34u)
#define PVED_CLS_GPS2_GMS_GPS2_EXIT_REASON_RESERVED_35_CHOICE (35u)
#define PVED_CLS_GPS2_GMS_GPS2_EXIT_REASON_RESERVED_36_CHOICE (36u)
#define PVED_CLS_GPS2_GMS_GPS2_EXIT_REASON_RESERVED_37_CHOICE (37u)
#define PVED_CLS_GPS2_GMS_GPS2_EXIT_REASON_RESERVED_38_CHOICE (38u)
#define PVED_CLS_GPS2_GMS_GPS2_EXIT_REASON_RESERVED_39_CHOICE (39u)
#define PVED_CLS_GPS2_GMS_GPS2_EXIT_REASON_RESERVED_40_CHOICE (40u)
#define PVED_CLS_GPS2_GMS_GPS2_EXIT_REASON_RESERVED_41_CHOICE (41u)
#define PVED_CLS_GPS2_GMS_GPS2_EXIT_REASON_RESERVED_42_CHOICE (42u)
#define PVED_CLS_GPS2_GMS_GPS2_EXIT_REASON_RESERVED_43_CHOICE (43u)
#define PVED_CLS_GPS2_GMS_GPS2_EXIT_REASON_RESERVED_44_CHOICE (44u)
#define PVED_CLS_GPS2_GMS_GPS2_EXIT_REASON_RESERVED_45_CHOICE (45u)
#define PVED_CLS_GPS2_GMS_GPS2_EXIT_REASON_RESERVED_46_CHOICE (46u)
#define PVED_CLS_GPS2_GMS_GPS2_EXIT_REASON_RESERVED_47_CHOICE (47u)
#define PVED_CLS_GPS2_GMS_GPS2_EXIT_REASON_RESERVED_48_CHOICE (48u)
#define PVED_CLS_GPS2_GMS_GPS2_EXIT_REASON_RESERVED_49_CHOICE (49u)
#define PVED_CLS_GPS2_GMS_GPS2_EXIT_REASON_RESERVED_50_CHOICE (50u)
#define PVED_CLS_GPS2_GMS_GPS2_EXIT_REASON_RESERVED_51_CHOICE (51u)
#define PVED_CLS_GPS2_GMS_GPS2_EXIT_REASON_RESERVED_52_CHOICE (52u)
#define PVED_CLS_GPS2_GMS_GPS2_EXIT_REASON_RESERVED_53_CHOICE (53u)
#define PVED_CLS_GPS2_GMS_GPS2_EXIT_REASON_RESERVED_54_CHOICE (54u)
#define PVED_CLS_GPS2_GMS_GPS2_EXIT_REASON_RESERVED_55_CHOICE (55u)
#define PVED_CLS_GPS2_GMS_GPS2_EXIT_REASON_RESERVED_56_CHOICE (56u)
#define PVED_CLS_GPS2_GMS_GPS2_EXIT_REASON_RESERVED_57_CHOICE (57u)
#define PVED_CLS_GPS2_GMS_GPS2_EXIT_REASON_RESERVED_58_CHOICE (58u)
#define PVED_CLS_GPS2_GMS_GPS2_EXIT_REASON_RESERVED_59_CHOICE (59u)
#define PVED_CLS_GPS2_GMS_GPS2_EXIT_REASON_RESERVED_60_CHOICE (60u)
#define PVED_CLS_GPS2_GMS_GPS2_EXIT_REASON_RESERVED_61_CHOICE (61u)
#define PVED_CLS_GPS2_GMS_GPS2_EXIT_REASON_ERROR___SAFE_STATE__CHOICE (62u)
#define PVED_CLS_GPS2_GMS_GPS2_EXIT_REASON_RESERVED_63_CHOICE (63u)

#define PVED_CLS_GPS2_GMC_GPS2_STR_CMD_STATUS_NOT_INTENDED_FOR_STEERING_CHOICE (0u)
#define PVED_CLS_GPS2_GMC_GPS2_STR_CMD_STATUS_INTENDED_FOR_STEERING_CHOICE (1u)
#define PVED_CLS_GPS2_GMC_GPS2_STR_CMD_STATUS_ERROR_CONDITION_CHOICE (2u)
#define PVED_CLS_GPS2_GMC_GPS2_STR_CMD_STATUS_INFORMATION_NOT_AVAILABLE_CHOICE (3u)

#define PVED_CLS_J1939_ACK_S_CONTROL_BYTE_S_POSITIVE_ACK_CHOICE (0u)
#define PVED_CLS_J1939_ACK_S_CONTROL_BYTE_S_NEGATIVE_ACK__CHOICE (1u)
#define PVED_CLS_J1939_ACK_S_CONTROL_BYTE_S_ACCESS__DENIED_CHOICE (2u)

#define PVED_CLS_J1939_ACK_M_CONTROL_BYTE_M_POSITIVE_ACK_CHOICE (0u)
#define PVED_CLS_J1939_ACK_M_CONTROL_BYTE_M_NEGATIVE_ACK__CHOICE (1u)
#define PVED_CLS_J1939_ACK_M_CONTROL_BYTE_M_ACCESS__DENIED_CHOICE (2u)

#define PVED_CLS_SER_TOOL_REPLY_S_SER_TOOL_REPLY_XID_S_DIRECT_OUTPUT_CONTROL_REPLY__CHOICE (131u)
#define PVED_CLS_SER_TOOL_REPLY_S_SER_TOOL_REPLY_XID_S_PARAM_READ_REPLY_CHOICE (135u)
#define PVED_CLS_SER_TOOL_REPLY_S_SER_TOOL_REPLY_XID_S_POSITION__CAPTURE__REPLY__CHOICE (143u)
#define PVED_CLS_SER_TOOL_REPLY_S_SER_TOOL_REPLY_XID_S_CALIBRATION_STATUS__CHOICE (145u)
#define PVED_CLS_SER_TOOL_REPLY_S_SER_TOOL_REPLY_XID_S_SOFT_RESET_REPLY_CHOICE (151u)

#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_DATA_LENGTH_S_RESERVED_CHOICE (0u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_DATA_LENGTH_S_1__BYTE_TO_READ_CHOICE (1u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_DATA_LENGTH_S_2__BYTES_TO_READ_CHOICE (2u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_DATA_LENGTH_S_3__BYTES_TO_READ_CHOICE (3u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_DATA_LENGTH_S_4__BYTES_TO_READ_CHOICE (4u)

#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_CALIB_ERR_CODE_S_NEC_INP_SIG_NOT_AVAIL_TO_MAINUC_CHOICE (0u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_CALIB_ERR_CODE_S_NEC_INP_SIG_NOT_AVAIL_TO_SAFEUC_CHOICE (1u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_CALIB_ERR_CODE_S_INP_SIG_CROSS_CHECK_FAILURE_CHOICE (2u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_CALIB_ERR_CODE_S_STEER_WHEEL_MOVEMENT_OBSERVED_CHOICE (3u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_CALIB_ERR_CODE_S_NOT_DATA_TO_PERFRM_CONSIS_CHCK_CHOICE (4u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_CALIB_ERR_CODE_S_CONSIS__CHECK_FAIL_IN_MAINUC_CHOICE (5u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_CALIB_ERR_CODE_S_CONSIS__CHECK_FAIL_IN_SAFETYUC_CHOICE (6u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_CALIB_ERR_CODE_S_PARAM_UPDATE_FAILRE_IN_MAINUC_CHOICE (7u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_CALIB_ERR_CODE_S_PARAM_UPDATE_FAILRE_IN_SAFETYUC_CHOICE (8u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_CALIB_ERR_CODE_S_CALIBRATION_CNTR_UPDATE_FAILURE_CHOICE (9u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_CALIB_ERR_CODE_S_INVALID_WHEEL_ANGLE_OBSERVED_CHOICE (10u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_CALIB_ERR_CODE_S_CN_T_CAL_VAL_WTHN_SPL_ST_PNT_LMT_CHOICE (11u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_CALIB_ERR_CODE_S_TIMEOUT_OCURD_AT_MOVE_TO_MAX_PNT_CHOICE (12u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_CALIB_ERR_CODE_S_CALIBRATION_INP_PARAM_MISMATCH_CHOICE (13u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_CALIB_ERR_CODE_S_CALCULATED_MAX_WA_CROSS_CHECK_BETWEEN__MAIN_AND__SAFETY_FAILED_CHOICE (14u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_CALIB_ERR_CODE_S_CALCULATED__CYLINDER_STROKE_VOLUME_CROSS_CHECK_BETWEEN__MAIN_AND__SAFETY_FAILED_CHOICE (15u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_CALIB_ERR_CODE_S_NO__ERROR_CHOICE (255u)

#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_CONSISTENCY_CHK_S_CONSISTENCY_CHECK_HAS_FAILED_CHOICE (0u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_CONSISTENCY_CHK_S_CONSISTENCY_CHECK_HAS_PASSED_CHOICE (1u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_CONSISTENCY_CHK_S_RESERVED_CHOICE (2u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_CONSISTENCY_CHK_S_INFORMATION_NOT_AVAILABLE__CHOICE (3u)

#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_INPUT_STATUS_S_NECES_INPUT_SIGNALS_NOT_AVAIL_CHOICE (0u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_INPUT_STATUS_S_NECES_INPUT_SIGNALS_AVAIL_CHOICE (1u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_INPUT_STATUS_S_NECE_INP_SIGN_OUT_OF_VAL_RANGE__CHOICE (2u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_INPUT_STATUS_S_DESCRIPTION_FOR_THE_VALUE__0X3__CHOICE (3u)

#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_RESULT_FROM_ECU_S_MAIN__MICRO_CONTROLLER_CHOICE (0u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_RESULT_FROM_ECU_S_SAFETY__MICRO_CONTROLLER_CHOICE (1u)

#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_SENSOR5_V_STATE_S_OFF_CHOICE (0u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_SENSOR5_V_STATE_S_ON_CHOICE (1u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_SENSOR5_V_STATE_S_RESERVED_CHOICE (2u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_SENSOR5_V_STATE_S_INFORMATION_NOT_AVAILLABLE_CHOICE (3u)

#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_POS_CAPTURED_S_POSITION_NOT_CAPTURED_CHOICE (0u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_POS_CAPTURED_S_POSITION_CAPTURED_CHOICE (1u)

#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_WAS_CAPTURED_S_LEFTMOST_POSITION_CHOICE (0u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_WAS_CAPTURED_S_NEUTRAL_POSITION_CHOICE (1u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_WAS_CAPTURED_S_RIGHTMOST_POSITION_CHOICE (2u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_WAS_CAPTURED_S_RESERVED_CHOICE (3u)

#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_CSS_STATE_S_OFF_CHOICE (0u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_CSS_STATE_S_ON_CHOICE (1u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_CSS_STATE_S_RESERVED_CHOICE (2u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_CSS_STATE_S_INFORMATION_NOT_AVAILABLE_CHOICE (3u)

#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3072_CHOICE (3072u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3073_CHOICE (3073u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3074_CHOICE (3074u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3076_CHOICE (3076u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3078_CHOICE (3078u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3080_CHOICE (3080u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3081_CHOICE (3081u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3082_CHOICE (3082u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3084_CHOICE (3084u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3086_CHOICE (3086u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3088_CHOICE (3088u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3089_CHOICE (3089u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3090_CHOICE (3090u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3091_CHOICE (3091u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3093_CHOICE (3093u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3095_CHOICE (3095u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3097_CHOICE (3097u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3120_CHOICE (3120u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3122_CHOICE (3122u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3123_CHOICE (3123u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3124_CHOICE (3124u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3125_CHOICE (3125u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3126_CHOICE (3126u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3128_CHOICE (3128u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3130_CHOICE (3130u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3132_CHOICE (3132u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3133_CHOICE (3133u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3134_CHOICE (3134u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3160_CHOICE (3160u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3162_CHOICE (3162u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3164_CHOICE (3164u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3166_CHOICE (3166u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3168_CHOICE (3168u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3170_CHOICE (3170u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3183_CHOICE (3183u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3185_CHOICE (3185u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3187_CHOICE (3187u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3189_CHOICE (3189u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3203_CHOICE (3203u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3205_CHOICE (3205u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3207_CHOICE (3207u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3209_CHOICE (3209u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3211_CHOICE (3211u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3213_CHOICE (3213u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3215_CHOICE (3215u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3217_CHOICE (3217u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3219_CHOICE (3219u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3235_CHOICE (3235u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3237_CHOICE (3237u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3238_CHOICE (3238u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3239_CHOICE (3239u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3240_CHOICE (3240u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3241_CHOICE (3241u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3242_CHOICE (3242u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3243_CHOICE (3243u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3244_CHOICE (3244u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3245_CHOICE (3245u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3246_CHOICE (3246u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3247_CHOICE (3247u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3248_CHOICE (3248u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3249_CHOICE (3249u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3250_CHOICE (3250u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3251_CHOICE (3251u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3252_CHOICE (3252u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3253_CHOICE (3253u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3285_CHOICE (3285u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3287_CHOICE (3287u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3288_CHOICE (3288u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3289_CHOICE (3289u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3290_CHOICE (3290u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3291_CHOICE (3291u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3292_CHOICE (3292u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3293_CHOICE (3293u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3294_CHOICE (3294u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3295_CHOICE (3295u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3296_CHOICE (3296u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3297_CHOICE (3297u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3298_CHOICE (3298u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3299_CHOICE (3299u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3300_CHOICE (3300u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3301_CHOICE (3301u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3302_CHOICE (3302u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3303_CHOICE (3303u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3304_CHOICE (3304u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3305_CHOICE (3305u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3306_CHOICE (3306u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3307_CHOICE (3307u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3308_CHOICE (3308u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3309_CHOICE (3309u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3310_CHOICE (3310u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3311_CHOICE (3311u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3312_CHOICE (3312u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3313_CHOICE (3313u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3314_CHOICE (3314u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3315_CHOICE (3315u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3316_CHOICE (3316u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3317_CHOICE (3317u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3318_CHOICE (3318u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3319_CHOICE (3319u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3320_CHOICE (3320u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3321_CHOICE (3321u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3322_CHOICE (3322u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3323_CHOICE (3323u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3349_CHOICE (3349u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3351_CHOICE (3351u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3352_CHOICE (3352u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3354_CHOICE (3354u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3355_CHOICE (3355u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3357_CHOICE (3357u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3358_CHOICE (3358u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3360_CHOICE (3360u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3361_CHOICE (3361u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3363_CHOICE (3363u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3364_CHOICE (3364u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3365_CHOICE (3365u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3366_CHOICE (3366u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3368_CHOICE (3368u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3369_CHOICE (3369u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3371_CHOICE (3371u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3372_CHOICE (3372u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3374_CHOICE (3374u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3375_CHOICE (3375u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3377_CHOICE (3377u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3378_CHOICE (3378u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3379_CHOICE (3379u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3381_CHOICE (3381u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3383_CHOICE (3383u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3419_CHOICE (3419u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3421_CHOICE (3421u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3422_CHOICE (3422u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3424_CHOICE (3424u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3426_CHOICE (3426u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3428_CHOICE (3428u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3449_CHOICE (3449u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3451_CHOICE (3451u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3453_CHOICE (3453u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3455_CHOICE (3455u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3457_CHOICE (3457u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3459_CHOICE (3459u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3461_CHOICE (3461u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3463_CHOICE (3463u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3465_CHOICE (3465u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3467_CHOICE (3467u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3469_CHOICE (3469u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3473_CHOICE (3473u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3474_CHOICE (3474u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3475_CHOICE (3475u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3476_CHOICE (3476u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3477_CHOICE (3477u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3478_CHOICE (3478u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3479_CHOICE (3479u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3480_CHOICE (3480u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3481_CHOICE (3481u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3482_CHOICE (3482u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3483_CHOICE (3483u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3484_CHOICE (3484u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3519_CHOICE (3519u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3521_CHOICE (3521u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3522_CHOICE (3522u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3524_CHOICE (3524u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3526_CHOICE (3526u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3528_CHOICE (3528u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3529_CHOICE (3529u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3530_CHOICE (3530u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3532_CHOICE (3532u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3534_CHOICE (3534u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3536_CHOICE (3536u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3537_CHOICE (3537u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3538_CHOICE (3538u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3540_CHOICE (3540u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3542_CHOICE (3542u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3544_CHOICE (3544u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3545_CHOICE (3545u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3546_CHOICE (3546u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3548_CHOICE (3548u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3550_CHOICE (3550u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3552_CHOICE (3552u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3553_CHOICE (3553u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3554_CHOICE (3554u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3556_CHOICE (3556u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3558_CHOICE (3558u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3560_CHOICE (3560u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3561_CHOICE (3561u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3562_CHOICE (3562u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3564_CHOICE (3564u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3566_CHOICE (3566u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3568_CHOICE (3568u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3569_CHOICE (3569u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3570_CHOICE (3570u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3571_CHOICE (3571u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3572_CHOICE (3572u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3573_CHOICE (3573u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3574_CHOICE (3574u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3576_CHOICE (3576u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3578_CHOICE (3578u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3580_CHOICE (3580u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3582_CHOICE (3582u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3583_CHOICE (3583u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3584_CHOICE (3584u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3644_CHOICE (3644u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3646_CHOICE (3646u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3647_CHOICE (3647u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3648_CHOICE (3648u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3649_CHOICE (3649u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3650_CHOICE (3650u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3652_CHOICE (3652u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3654_CHOICE (3654u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3656_CHOICE (3656u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3657_CHOICE (3657u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3658_CHOICE (3658u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3660_CHOICE (3660u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3662_CHOICE (3662u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3664_CHOICE (3664u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3665_CHOICE (3665u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3666_CHOICE (3666u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3668_CHOICE (3668u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3670_CHOICE (3670u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3672_CHOICE (3672u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3673_CHOICE (3673u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3674_CHOICE (3674u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3676_CHOICE (3676u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3678_CHOICE (3678u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3680_CHOICE (3680u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3681_CHOICE (3681u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3682_CHOICE (3682u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3684_CHOICE (3684u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3686_CHOICE (3686u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3688_CHOICE (3688u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3689_CHOICE (3689u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3690_CHOICE (3690u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3692_CHOICE (3692u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3694_CHOICE (3694u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3696_CHOICE (3696u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3697_CHOICE (3697u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3698_CHOICE (3698u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3699_CHOICE (3699u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3700_CHOICE (3700u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3701_CHOICE (3701u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3703_CHOICE (3703u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3705_CHOICE (3705u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3706_CHOICE (3706u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3708_CHOICE (3708u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3710_CHOICE (3710u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3712_CHOICE (3712u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3714_CHOICE (3714u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3716_CHOICE (3716u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3718_CHOICE (3718u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3719_CHOICE (3719u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3769_CHOICE (3769u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3771_CHOICE (3771u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3772_CHOICE (3772u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3773_CHOICE (3773u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3774_CHOICE (3774u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3775_CHOICE (3775u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3776_CHOICE (3776u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3789_CHOICE (3789u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3791_CHOICE (3791u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3793_CHOICE (3793u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3795_CHOICE (3795u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3797_CHOICE (3797u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3799_CHOICE (3799u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3801_CHOICE (3801u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3802_CHOICE (3802u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3804_CHOICE (3804u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3806_CHOICE (3806u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3808_CHOICE (3808u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3810_CHOICE (3810u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3811_CHOICE (3811u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3812_CHOICE (3812u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3814_CHOICE (3814u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_PARAM_ADDRESS_S_P3822_CHOICE (3822u)

#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_WA_MOV_STATUS_R_S_IN_PROGRESS_CHOICE (0u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_WA_MOV_STATUS_R_S_COMPLETED__CHOICE (1u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_WA_MOV_STATUS_R_S_RESERVED_CHOICE (2u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_WA_MOV_STATUS_R_S_INFO_NOT_AVAILABLE_CHOICE (11u)

#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_WA_MOV_STATUS_L_S_IN__PROGRESS_CHOICE (0u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_WA_MOV_STATUS_L_S_COMPLETED_CHOICE (1u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_WA_MOV_STATUS_L_S_RESERVED_CHOICE (2u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_WA_MOV_STATUS_L_S_INFORMATION_NOT_AVAILABLE__CHOICE (11u)

#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_T_LAST_MOVE_S_NO_TIME_RECORDED_YET_CHOICE (0u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_T_LAST_MOVE_S_TIMEOUT_OCCURRED_CHOICE (10u)
#define PVED_CLS_SER_TOOL_REPLY_S_REPLY_T_LAST_MOVE_S_INFORMATION_NOT_AVAILABLE__CHOICE (65535u)

#define PVED_CLS_SER_TOOL_REPLY_M_SER_TOOL_REPLY_XID_M_DIRECT_OUTPUT_CONTROL_REPLY__CHOICE (131u)
#define PVED_CLS_SER_TOOL_REPLY_M_SER_TOOL_REPLY_XID_M_PARAM_READ_REPLY_CHOICE (135u)
#define PVED_CLS_SER_TOOL_REPLY_M_SER_TOOL_REPLY_XID_M_POSITION__CAPTURE__REPLY__CHOICE (143u)
#define PVED_CLS_SER_TOOL_REPLY_M_SER_TOOL_REPLY_XID_M_CALIBRATION_STATUS__CHOICE (145u)
#define PVED_CLS_SER_TOOL_REPLY_M_SER_TOOL_REPLY_XID_M_SOFT_RESET_REPLY_CHOICE (151u)

#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_DATA_LENGTH_M_RESERVED_CHOICE (0u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_DATA_LENGTH_M_1__BYTE_TO_READ_CHOICE (1u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_DATA_LENGTH_M_2__BYTES_TO_READ_CHOICE (2u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_DATA_LENGTH_M_3__BYTES_TO_READ_CHOICE (3u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_DATA_LENGTH_M_4__BYTES_TO_READ_CHOICE (4u)

#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_CALIB_ERR_CODE_M_NEC_INP_SIG_NOT_AVAIL_TO_MAINUC_CHOICE (0u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_CALIB_ERR_CODE_M_NEC_INP_SIG_NOT_AVAIL_TO_SAFEUC_CHOICE (1u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_CALIB_ERR_CODE_M_INP_SIG_CROSS_CHECK_FAILURE_CHOICE (2u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_CALIB_ERR_CODE_M_STEER_WHEEL_MOVEMENT_OBSERVED_CHOICE (3u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_CALIB_ERR_CODE_M_NOT_DATA_TO_PERFRM_CONSIS_CHCK_CHOICE (4u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_CALIB_ERR_CODE_M_CONSIS__CHECK_FAIL_IN_MAINUC_CHOICE (5u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_CALIB_ERR_CODE_M_CONSIS__CHECK_FAIL_IN_SAFETYUC_CHOICE (6u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_CALIB_ERR_CODE_M_PARAM_UPDATE_FAILRE_IN_MAINUC_CHOICE (7u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_CALIB_ERR_CODE_M_PARAM_UPDATE_FAILRE_IN_SAFETYUC_CHOICE (8u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_CALIB_ERR_CODE_M_CALIBRATION_CNTR_UPDATE_FAILURE_CHOICE (9u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_CALIB_ERR_CODE_M_INVALID_WHEEL_ANGLE_OBSERVED_CHOICE (10u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_CALIB_ERR_CODE_M_CN_T_CAL_VAL_WTHN_SPL_ST_PNT_LMT_CHOICE (11u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_CALIB_ERR_CODE_M_TIMEOUT_OCURD_AT_MOVE_TO_MAX_PNT_CHOICE (12u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_CALIB_ERR_CODE_M_CALIBRATION_INP_PARAM_MISMATCH_CHOICE (13u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_CALIB_ERR_CODE_M_CALCULATED_MAX_WA_CROSS_CHECK_BETWEEN__MAIN_AND__SAFETY_FAILED_CHOICE (14u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_CALIB_ERR_CODE_M_CALCULATED__CYLINDER_STROKE_VOLUME_CROSS_CHECK_BETWEEN__MAIN_AND__SAFETY_FAILED_CHOICE (15u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_CALIB_ERR_CODE_M_NO__ERROR_CHOICE (255u)

#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_CONSISTENCY_CHK_M_CONSISTENCY_CHECK_HAS_FAILED_CHOICE (0u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_CONSISTENCY_CHK_M_CONSISTENCY_CHECK_HAS_PASSED_CHOICE (1u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_CONSISTENCY_CHK_M_RESERVED_CHOICE (2u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_CONSISTENCY_CHK_M_INFORMATION_NOT_AVAILABLE__CHOICE (3u)

#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_INPUT_STATUS_M_NECES_INPUT_SIGNALS_NOT_AVAIL_CHOICE (0u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_INPUT_STATUS_M_NECES_INPUT_SIGNALS_AVAIL_CHOICE (1u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_INPUT_STATUS_M_NECE_INP_SIGN_OUT_OF_VAL_RANGE__CHOICE (2u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_INPUT_STATUS_M_DESCRIPTION_FOR_THE_VALUE__0X3__CHOICE (3u)

#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_RESULT_FROM_ECU_M_MAIN__MICRO_CONTROLLER_CHOICE (0u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_RESULT_FROM_ECU_M_SAFETY__MICRO_CONTROLLER_CHOICE (1u)

#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_SENSOR5_V_STATE_M_OFF_CHOICE (0u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_SENSOR5_V_STATE_M_ON_CHOICE (1u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_SENSOR5_V_STATE_M_RESERVED_CHOICE (2u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_SENSOR5_V_STATE_M_INFORMATION_NOT_AVAILLABLE_CHOICE (3u)

#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_POS_CAPTURED_M_POSITION_NOT_CAPTURED_CHOICE (0u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_POS_CAPTURED_M_POSITION_CAPTURED_CHOICE (1u)

#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_WAS_CAPTURED_M_LEFTMOST_POSITION_CHOICE (0u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_WAS_CAPTURED_M_NEUTRAL_POSITION_CHOICE (1u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_WAS_CAPTURED_M_RIGHTMOST_POSITION_CHOICE (2u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_WAS_CAPTURED_M_RESERVED_CHOICE (3u)

#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_CSS_STATE_M_OFF_CHOICE (0u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_CSS_STATE_M_ON_CHOICE (1u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_CSS_STATE_M_RESERVED_CHOICE (2u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_CSS_STATE_M_INFORMATION_NOT_AVAILABLE_CHOICE (3u)

#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3072_CHOICE (3072u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3073_CHOICE (3073u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3074_CHOICE (3074u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3076_CHOICE (3076u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3078_CHOICE (3078u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3080_CHOICE (3080u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3081_CHOICE (3081u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3082_CHOICE (3082u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3084_CHOICE (3084u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3086_CHOICE (3086u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3088_CHOICE (3088u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3089_CHOICE (3089u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3090_CHOICE (3090u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3091_CHOICE (3091u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3093_CHOICE (3093u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3095_CHOICE (3095u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3097_CHOICE (3097u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3120_CHOICE (3120u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3122_CHOICE (3122u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3123_CHOICE (3123u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3124_CHOICE (3124u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3125_CHOICE (3125u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3126_CHOICE (3126u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3128_CHOICE (3128u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3130_CHOICE (3130u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3132_CHOICE (3132u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3133_CHOICE (3133u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3134_CHOICE (3134u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3160_CHOICE (3160u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3162_CHOICE (3162u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3164_CHOICE (3164u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3166_CHOICE (3166u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3168_CHOICE (3168u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3170_CHOICE (3170u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3183_CHOICE (3183u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3185_CHOICE (3185u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3187_CHOICE (3187u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3189_CHOICE (3189u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3203_CHOICE (3203u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3205_CHOICE (3205u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3207_CHOICE (3207u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3209_CHOICE (3209u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3211_CHOICE (3211u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3213_CHOICE (3213u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3215_CHOICE (3215u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3217_CHOICE (3217u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3219_CHOICE (3219u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3235_CHOICE (3235u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3237_CHOICE (3237u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3238_CHOICE (3238u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3239_CHOICE (3239u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3240_CHOICE (3240u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3241_CHOICE (3241u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3242_CHOICE (3242u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3243_CHOICE (3243u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3244_CHOICE (3244u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3245_CHOICE (3245u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3246_CHOICE (3246u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3247_CHOICE (3247u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3248_CHOICE (3248u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3249_CHOICE (3249u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3250_CHOICE (3250u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3251_CHOICE (3251u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3252_CHOICE (3252u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3253_CHOICE (3253u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3285_CHOICE (3285u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3287_CHOICE (3287u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3288_CHOICE (3288u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3289_CHOICE (3289u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3290_CHOICE (3290u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3291_CHOICE (3291u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3292_CHOICE (3292u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3293_CHOICE (3293u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3294_CHOICE (3294u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3295_CHOICE (3295u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3296_CHOICE (3296u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3297_CHOICE (3297u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3298_CHOICE (3298u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3299_CHOICE (3299u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3300_CHOICE (3300u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3301_CHOICE (3301u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3302_CHOICE (3302u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3303_CHOICE (3303u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3304_CHOICE (3304u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3305_CHOICE (3305u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3306_CHOICE (3306u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3307_CHOICE (3307u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3308_CHOICE (3308u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3309_CHOICE (3309u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3310_CHOICE (3310u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3311_CHOICE (3311u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3312_CHOICE (3312u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3313_CHOICE (3313u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3314_CHOICE (3314u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3315_CHOICE (3315u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3316_CHOICE (3316u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3317_CHOICE (3317u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3318_CHOICE (3318u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3319_CHOICE (3319u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3320_CHOICE (3320u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3321_CHOICE (3321u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3322_CHOICE (3322u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3323_CHOICE (3323u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3349_CHOICE (3349u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3351_CHOICE (3351u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3352_CHOICE (3352u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3354_CHOICE (3354u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3355_CHOICE (3355u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3357_CHOICE (3357u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3358_CHOICE (3358u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3360_CHOICE (3360u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3361_CHOICE (3361u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3363_CHOICE (3363u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3364_CHOICE (3364u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3365_CHOICE (3365u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3366_CHOICE (3366u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3368_CHOICE (3368u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3369_CHOICE (3369u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3371_CHOICE (3371u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3372_CHOICE (3372u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3374_CHOICE (3374u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3375_CHOICE (3375u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3377_CHOICE (3377u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3378_CHOICE (3378u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3379_CHOICE (3379u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3381_CHOICE (3381u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3383_CHOICE (3383u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3419_CHOICE (3419u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3421_CHOICE (3421u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3422_CHOICE (3422u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3424_CHOICE (3424u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3426_CHOICE (3426u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3428_CHOICE (3428u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3449_CHOICE (3449u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3451_CHOICE (3451u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3453_CHOICE (3453u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3455_CHOICE (3455u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3457_CHOICE (3457u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3459_CHOICE (3459u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3461_CHOICE (3461u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3463_CHOICE (3463u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3465_CHOICE (3465u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3467_CHOICE (3467u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3469_CHOICE (3469u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3473_CHOICE (3473u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3474_CHOICE (3474u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3475_CHOICE (3475u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3476_CHOICE (3476u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3477_CHOICE (3477u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3478_CHOICE (3478u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3479_CHOICE (3479u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3480_CHOICE (3480u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3481_CHOICE (3481u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3482_CHOICE (3482u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3483_CHOICE (3483u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3484_CHOICE (3484u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3519_CHOICE (3519u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3521_CHOICE (3521u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3522_CHOICE (3522u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3524_CHOICE (3524u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3526_CHOICE (3526u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3528_CHOICE (3528u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3529_CHOICE (3529u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3530_CHOICE (3530u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3532_CHOICE (3532u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3534_CHOICE (3534u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3536_CHOICE (3536u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3537_CHOICE (3537u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3538_CHOICE (3538u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3540_CHOICE (3540u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3542_CHOICE (3542u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3544_CHOICE (3544u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3545_CHOICE (3545u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3546_CHOICE (3546u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3548_CHOICE (3548u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3550_CHOICE (3550u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3552_CHOICE (3552u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3553_CHOICE (3553u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3554_CHOICE (3554u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3556_CHOICE (3556u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3558_CHOICE (3558u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3560_CHOICE (3560u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3561_CHOICE (3561u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3562_CHOICE (3562u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3564_CHOICE (3564u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3566_CHOICE (3566u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3568_CHOICE (3568u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3569_CHOICE (3569u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3570_CHOICE (3570u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3571_CHOICE (3571u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3572_CHOICE (3572u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3573_CHOICE (3573u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3574_CHOICE (3574u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3576_CHOICE (3576u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3578_CHOICE (3578u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3580_CHOICE (3580u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3582_CHOICE (3582u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3583_CHOICE (3583u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3584_CHOICE (3584u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3644_CHOICE (3644u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3646_CHOICE (3646u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3647_CHOICE (3647u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3648_CHOICE (3648u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3649_CHOICE (3649u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3650_CHOICE (3650u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3652_CHOICE (3652u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3654_CHOICE (3654u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3656_CHOICE (3656u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3657_CHOICE (3657u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3658_CHOICE (3658u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3660_CHOICE (3660u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3662_CHOICE (3662u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3664_CHOICE (3664u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3665_CHOICE (3665u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3666_CHOICE (3666u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3668_CHOICE (3668u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3670_CHOICE (3670u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3672_CHOICE (3672u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3673_CHOICE (3673u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3674_CHOICE (3674u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3676_CHOICE (3676u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3678_CHOICE (3678u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3680_CHOICE (3680u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3681_CHOICE (3681u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3682_CHOICE (3682u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3684_CHOICE (3684u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3686_CHOICE (3686u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3688_CHOICE (3688u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3689_CHOICE (3689u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3690_CHOICE (3690u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3692_CHOICE (3692u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3694_CHOICE (3694u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3696_CHOICE (3696u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3697_CHOICE (3697u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3698_CHOICE (3698u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3699_CHOICE (3699u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3700_CHOICE (3700u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3701_CHOICE (3701u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3703_CHOICE (3703u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3705_CHOICE (3705u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3706_CHOICE (3706u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3708_CHOICE (3708u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3710_CHOICE (3710u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3712_CHOICE (3712u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3714_CHOICE (3714u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3716_CHOICE (3716u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3718_CHOICE (3718u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3719_CHOICE (3719u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3769_CHOICE (3769u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3771_CHOICE (3771u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3772_CHOICE (3772u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3773_CHOICE (3773u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3774_CHOICE (3774u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3775_CHOICE (3775u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3776_CHOICE (3776u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3789_CHOICE (3789u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3791_CHOICE (3791u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3793_CHOICE (3793u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3795_CHOICE (3795u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3797_CHOICE (3797u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3799_CHOICE (3799u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3801_CHOICE (3801u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3802_CHOICE (3802u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3804_CHOICE (3804u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3806_CHOICE (3806u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3808_CHOICE (3808u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3810_CHOICE (3810u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3811_CHOICE (3811u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3812_CHOICE (3812u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3814_CHOICE (3814u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_PARAM_ADDRESS_M_P3822_CHOICE (3822u)

#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_WA_MOV_STATUS_R_M_IN_PROGRESS_CHOICE (0u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_WA_MOV_STATUS_R_M_COMPLETED__CHOICE (1u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_WA_MOV_STATUS_R_M_RESERVED_CHOICE (2u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_WA_MOV_STATUS_R_M_INFO_NOT_AVAILABLE_CHOICE (11u)

#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_WA_MOV_STATUS_L_M_IN__PROGRESS_CHOICE (0u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_WA_MOV_STATUS_L_M_COMPLETED_CHOICE (1u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_WA_MOV_STATUS_L_M_RESERVED_CHOICE (2u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_WA_MOV_STATUS_L_M_INFORMATION_NOT_AVAILABLE__CHOICE (11u)

#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_T_LAST_MOVE_M_NO_TIME_RECORDED_YET_CHOICE (0u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_T_LAST_MOVE_M_TIMEOUT_OCCURRED_CHOICE (10u)
#define PVED_CLS_SER_TOOL_REPLY_M_REPLY_T_LAST_MOVE_M_INFORMATION_NOT_AVAILABLE__CHOICE (65535u)

#define PVED_CLS_SER_TOOL_REQ_S_SER_TOOL_REQ_XID_S_ENTER__SERVICE__MODE_CHOICE (128u)
#define PVED_CLS_SER_TOOL_REQ_S_SER_TOOL_REQ_XID_S_DIRECT_OUTPUT_CONTROL_REQUEST__CHOICE (130u)
#define PVED_CLS_SER_TOOL_REQ_S_SER_TOOL_REQ_XID_S_STATUS__MESSAGE__REQUEST_CHOICE (132u)
#define PVED_CLS_SER_TOOL_REQ_S_SER_TOOL_REQ_XID_S_PARAMETER__READ__REQUEST_CHOICE (134u)
#define PVED_CLS_SER_TOOL_REQ_S_SER_TOOL_REQ_XID_S_STATUS__MESSAGE__REQUEST2_CHOICE (136u)
#define PVED_CLS_SER_TOOL_REQ_S_SER_TOOL_REQ_XID_S_SPOOL_CALIBRATION_START_REQUEST__CHOICE (140u)
#define PVED_CLS_SER_TOOL_REQ_S_SER_TOOL_REQ_XID_S_POSITION__CAPTURE__REQUEST__CHOICE (142u)
#define PVED_CLS_SER_TOOL_REQ_S_SER_TOOL_REQ_XID_S_PARAMETER_UPDATE_REQUEST__CHOICE (144u)
#define PVED_CLS_SER_TOOL_REQ_S_SER_TOOL_REQ_XID_S_CALIBRATION_RESET_REQUEST__CHOICE (146u)
#define PVED_CLS_SER_TOOL_REQ_S_SER_TOOL_REQ_XID_S_SOFT__RESET__REQUEST_CHOICE (150u)

#define PVED_CLS_SER_TOOL_REQ_S_TX_RATE_STAT_MSG_7_S_TRANSMISSION__STOP_CHOICE (0u)
#define PVED_CLS_SER_TOOL_REQ_S_TX_RATE_STAT_MSG_7_S_NO_CHANGE_CHOICE (255u)

#define PVED_CLS_SER_TOOL_REQ_S_TX_RATE_STAT_MSG_OP_S_NO_CHANGE_0_CHOICE (0u)
#define PVED_CLS_SER_TOOL_REQ_S_TX_RATE_STAT_MSG_OP_S_NO_CHANGE_255_CHOICE (255u)

#define PVED_CLS_SER_TOOL_REQ_S_REQ_SERVICE_MODE_S_DIRECT__OUTPUT__CONTROL_CHOICE (0u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_SERVICE_MODE_S_WHEEL__ANGLE__SENSOR__CALIBRATION_CHOICE (1u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_SERVICE_MODE_S_SPOOL__CALIBRATION_CHOICE (2u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_SERVICE_MODE_S_JOYSTICK__CALIBRATION_CHOICE (3u)

#define PVED_CLS_SER_TOOL_REQ_S_REQ_SENSOR5_V_S_OFF_CHOICE (0u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_SENSOR5_V_S_ON_CHOICE (1u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_SENSOR5_V_S_RESERVED_CHOICE (2u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_SENSOR5_V_S_NO__CHANGE_CHOICE (3u)

#define PVED_CLS_SER_TOOL_REQ_S_REQ_ANS_CAPTURE_S_LEFTMOST_POSITION_CHOICE (0u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_ANS_CAPTURE_S_NEUTRAL_POSITION_CHOICE (1u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_ANS_CAPTURE_S_RIGHTMOST_POSITION_CHOICE (2u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_ANS_CAPTURE_S_RESERVED_CHOICE (3u)

#define PVED_CLS_SER_TOOL_REQ_S_REQ_CSS_S_OFF_CHOICE (0u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_CSS_S_ON_CHOICE (1u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_CSS_S_RESERVED_CHOICE (2u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_CSS_S_NO__CHANGE_CHOICE (3u)

#define PVED_CLS_SER_TOOL_REQ_S_TX_RATE_STAT_MSG_8_S_TRANSMISSION__STOP_CHOICE (0u)
#define PVED_CLS_SER_TOOL_REQ_S_TX_RATE_STAT_MSG_8_S_NO_CHANGE_CHOICE (255u)

#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3072_CHOICE (3072u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3073_CHOICE (3073u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3074_CHOICE (3074u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3076_CHOICE (3076u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3078_CHOICE (3078u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3080_CHOICE (3080u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3081_CHOICE (3081u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3082_CHOICE (3082u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3084_CHOICE (3084u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3086_CHOICE (3086u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3088_CHOICE (3088u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3089_CHOICE (3089u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3090_CHOICE (3090u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3091_CHOICE (3091u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3093_CHOICE (3093u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3095_CHOICE (3095u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3097_CHOICE (3097u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3120_CHOICE (3120u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3122_CHOICE (3122u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3123_CHOICE (3123u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3124_CHOICE (3124u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3125_CHOICE (3125u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3126_CHOICE (3126u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3128_CHOICE (3128u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3130_CHOICE (3130u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3132_CHOICE (3132u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3133_CHOICE (3133u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3134_CHOICE (3134u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3160_CHOICE (3160u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3162_CHOICE (3162u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3164_CHOICE (3164u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3166_CHOICE (3166u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3168_CHOICE (3168u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3170_CHOICE (3170u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3183_CHOICE (3183u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3185_CHOICE (3185u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3187_CHOICE (3187u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3189_CHOICE (3189u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3203_CHOICE (3203u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3205_CHOICE (3205u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3207_CHOICE (3207u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3209_CHOICE (3209u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3211_CHOICE (3211u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3213_CHOICE (3213u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3215_CHOICE (3215u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3217_CHOICE (3217u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3219_CHOICE (3219u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3235_CHOICE (3235u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3237_CHOICE (3237u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3238_CHOICE (3238u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3239_CHOICE (3239u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3240_CHOICE (3240u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3241_CHOICE (3241u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3242_CHOICE (3242u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3243_CHOICE (3243u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3244_CHOICE (3244u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3245_CHOICE (3245u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3246_CHOICE (3246u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3247_CHOICE (3247u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3248_CHOICE (3248u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3249_CHOICE (3249u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3250_CHOICE (3250u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3251_CHOICE (3251u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3252_CHOICE (3252u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3253_CHOICE (3253u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3285_CHOICE (3285u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3287_CHOICE (3287u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3288_CHOICE (3288u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3289_CHOICE (3289u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3290_CHOICE (3290u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3291_CHOICE (3291u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3292_CHOICE (3292u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3293_CHOICE (3293u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3294_CHOICE (3294u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3295_CHOICE (3295u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3296_CHOICE (3296u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3297_CHOICE (3297u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3298_CHOICE (3298u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3299_CHOICE (3299u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3300_CHOICE (3300u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3301_CHOICE (3301u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3302_CHOICE (3302u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3303_CHOICE (3303u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3304_CHOICE (3304u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3305_CHOICE (3305u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3306_CHOICE (3306u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3307_CHOICE (3307u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3308_CHOICE (3308u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3309_CHOICE (3309u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3310_CHOICE (3310u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3311_CHOICE (3311u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3312_CHOICE (3312u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3313_CHOICE (3313u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3314_CHOICE (3314u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3315_CHOICE (3315u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3316_CHOICE (3316u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3317_CHOICE (3317u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3318_CHOICE (3318u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3319_CHOICE (3319u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3320_CHOICE (3320u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3321_CHOICE (3321u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3322_CHOICE (3322u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3323_CHOICE (3323u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3349_CHOICE (3349u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3351_CHOICE (3351u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3352_CHOICE (3352u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3354_CHOICE (3354u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3355_CHOICE (3355u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3357_CHOICE (3357u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3358_CHOICE (3358u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3360_CHOICE (3360u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3361_CHOICE (3361u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3363_CHOICE (3363u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3364_CHOICE (3364u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3365_CHOICE (3365u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3366_CHOICE (3366u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3368_CHOICE (3368u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3369_CHOICE (3369u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3371_CHOICE (3371u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3372_CHOICE (3372u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3374_CHOICE (3374u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3375_CHOICE (3375u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3377_CHOICE (3377u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3378_CHOICE (3378u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3379_CHOICE (3379u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3381_CHOICE (3381u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3383_CHOICE (3383u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3419_CHOICE (3419u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3421_CHOICE (3421u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3422_CHOICE (3422u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3424_CHOICE (3424u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3426_CHOICE (3426u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3428_CHOICE (3428u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3449_CHOICE (3449u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3451_CHOICE (3451u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3453_CHOICE (3453u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3455_CHOICE (3455u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3457_CHOICE (3457u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3459_CHOICE (3459u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3461_CHOICE (3461u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3463_CHOICE (3463u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3465_CHOICE (3465u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3467_CHOICE (3467u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3469_CHOICE (3469u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3473_CHOICE (3473u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3474_CHOICE (3474u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3475_CHOICE (3475u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3476_CHOICE (3476u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3477_CHOICE (3477u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3478_CHOICE (3478u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3479_CHOICE (3479u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3480_CHOICE (3480u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3481_CHOICE (3481u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3482_CHOICE (3482u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3483_CHOICE (3483u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3484_CHOICE (3484u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3519_CHOICE (3519u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3521_CHOICE (3521u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3522_CHOICE (3522u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3524_CHOICE (3524u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3526_CHOICE (3526u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3528_CHOICE (3528u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3529_CHOICE (3529u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3530_CHOICE (3530u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3532_CHOICE (3532u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3534_CHOICE (3534u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3536_CHOICE (3536u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3537_CHOICE (3537u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3538_CHOICE (3538u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3540_CHOICE (3540u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3542_CHOICE (3542u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3544_CHOICE (3544u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3545_CHOICE (3545u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3546_CHOICE (3546u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3548_CHOICE (3548u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3550_CHOICE (3550u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3552_CHOICE (3552u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3553_CHOICE (3553u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3554_CHOICE (3554u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3556_CHOICE (3556u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3558_CHOICE (3558u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3560_CHOICE (3560u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3561_CHOICE (3561u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3562_CHOICE (3562u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3564_CHOICE (3564u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3566_CHOICE (3566u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3568_CHOICE (3568u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3569_CHOICE (3569u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3570_CHOICE (3570u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3571_CHOICE (3571u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3572_CHOICE (3572u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3573_CHOICE (3573u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3574_CHOICE (3574u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3576_CHOICE (3576u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3578_CHOICE (3578u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3580_CHOICE (3580u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3582_CHOICE (3582u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3583_CHOICE (3583u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3584_CHOICE (3584u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3644_CHOICE (3644u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3646_CHOICE (3646u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3647_CHOICE (3647u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3648_CHOICE (3648u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3649_CHOICE (3649u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3650_CHOICE (3650u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3652_CHOICE (3652u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3654_CHOICE (3654u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3656_CHOICE (3656u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3657_CHOICE (3657u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3658_CHOICE (3658u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3660_CHOICE (3660u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3662_CHOICE (3662u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3664_CHOICE (3664u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3665_CHOICE (3665u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3666_CHOICE (3666u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3668_CHOICE (3668u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3670_CHOICE (3670u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3672_CHOICE (3672u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3673_CHOICE (3673u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3674_CHOICE (3674u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3676_CHOICE (3676u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3678_CHOICE (3678u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3680_CHOICE (3680u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3681_CHOICE (3681u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3682_CHOICE (3682u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3684_CHOICE (3684u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3686_CHOICE (3686u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3688_CHOICE (3688u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3689_CHOICE (3689u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3690_CHOICE (3690u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3692_CHOICE (3692u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3694_CHOICE (3694u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3696_CHOICE (3696u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3697_CHOICE (3697u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3698_CHOICE (3698u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3699_CHOICE (3699u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3700_CHOICE (3700u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3701_CHOICE (3701u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3703_CHOICE (3703u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3705_CHOICE (3705u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3706_CHOICE (3706u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3708_CHOICE (3708u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3710_CHOICE (3710u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3712_CHOICE (3712u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3714_CHOICE (3714u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3716_CHOICE (3716u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3718_CHOICE (3718u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3719_CHOICE (3719u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3769_CHOICE (3769u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3771_CHOICE (3771u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3772_CHOICE (3772u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3773_CHOICE (3773u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3774_CHOICE (3774u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3775_CHOICE (3775u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3776_CHOICE (3776u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3789_CHOICE (3789u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3791_CHOICE (3791u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3793_CHOICE (3793u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3795_CHOICE (3795u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3797_CHOICE (3797u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3799_CHOICE (3799u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3801_CHOICE (3801u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3802_CHOICE (3802u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3804_CHOICE (3804u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3806_CHOICE (3806u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3808_CHOICE (3808u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3810_CHOICE (3810u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3811_CHOICE (3811u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3812_CHOICE (3812u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3814_CHOICE (3814u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_PARAM_ADDRESS_S_P3822_CHOICE (3822u)

#define PVED_CLS_SER_TOOL_REQ_S_TX_RATE_STAT_MSG_1_S_TRANSMISSION_STOP_CHOICE (0u)
#define PVED_CLS_SER_TOOL_REQ_S_TX_RATE_STAT_MSG_1_S_NO__CHANGE_CHOICE (255u)

#define PVED_CLS_SER_TOOL_REQ_S_REQ_SERVICE_MODE_CHK_S_JOYSTICK__CALIBRATION_CHOICE (21845u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_SERVICE_MODE_CHK_S_DIRECT__OUTPUT__CONTROL_CHOICE (21930u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_SERVICE_MODE_CHK_S_SPOOL__CALIBRATION_CHOICE (23130u)
#define PVED_CLS_SER_TOOL_REQ_S_REQ_SERVICE_MODE_CHK_S_WHEEL__ANGLE__SENSOR__CALIBRATION_CHOICE (42405u)

#define PVED_CLS_SER_TOOL_REQ_S_TX_RATE_STAT_MSG_2_S_TRANSMISSION_STOP_CHOICE (0u)
#define PVED_CLS_SER_TOOL_REQ_S_TX_RATE_STAT_MSG_2_S_NO__CHANGE_CHOICE (255u)

#define PVED_CLS_SER_TOOL_REQ_S_TX_RATE_STAT_MSG_3_S_TRANSMISSION_STOP_CHOICE (0u)
#define PVED_CLS_SER_TOOL_REQ_S_TX_RATE_STAT_MSG_3_S_NO__CHANGE_CHOICE (255u)

#define PVED_CLS_SER_TOOL_REQ_S_TX_RATE_STAT_MSG_4_S_TRANSMISSION_STOP_CHOICE (0u)
#define PVED_CLS_SER_TOOL_REQ_S_TX_RATE_STAT_MSG_4_S_NO__CHANGE_CHOICE (255u)

#define PVED_CLS_SER_TOOL_REQ_S_TX_RATE_STAT_MSG_5_S_TRANSMISSION__STOP_CHOICE (0u)
#define PVED_CLS_SER_TOOL_REQ_S_TX_RATE_STAT_MSG_5_S_NO__CHANGE_CHOICE (255u)

#define PVED_CLS_SER_TOOL_REQ_S_TX_RATE_STAT_MSG_6_S_TRANSMISSION__STOP_CHOICE (0u)
#define PVED_CLS_SER_TOOL_REQ_S_TX_RATE_STAT_MSG_6_S_NO__CHANGE_CHOICE (255u)

#define PVED_CLS_SER_TOOL_REQ_M_SER_TOOL_REQ_XID_M_ENTER__SERVICE__MODE_CHOICE (128u)
#define PVED_CLS_SER_TOOL_REQ_M_SER_TOOL_REQ_XID_M_DIRECT_OUTPUT_CONTROL_REQUEST__CHOICE (130u)
#define PVED_CLS_SER_TOOL_REQ_M_SER_TOOL_REQ_XID_M_STATUS__MESSAGE__REQUEST_CHOICE (132u)
#define PVED_CLS_SER_TOOL_REQ_M_SER_TOOL_REQ_XID_M_PARAMETER__READ__REQUEST_CHOICE (134u)
#define PVED_CLS_SER_TOOL_REQ_M_SER_TOOL_REQ_XID_M_STATUS__MESSAGE__REQUEST2_CHOICE (136u)
#define PVED_CLS_SER_TOOL_REQ_M_SER_TOOL_REQ_XID_M_SPOOL_CALIBRATION_START_REQUEST__CHOICE (140u)
#define PVED_CLS_SER_TOOL_REQ_M_SER_TOOL_REQ_XID_M_POSITION__CAPTURE__REQUEST__CHOICE (142u)
#define PVED_CLS_SER_TOOL_REQ_M_SER_TOOL_REQ_XID_M_PARAMETER_UPDATE_REQUEST__CHOICE (144u)
#define PVED_CLS_SER_TOOL_REQ_M_SER_TOOL_REQ_XID_M_CALIBRATION_RESET_REQUEST__CHOICE (146u)
#define PVED_CLS_SER_TOOL_REQ_M_SER_TOOL_REQ_XID_M_SOFT__RESET__REQUEST_CHOICE (150u)

#define PVED_CLS_SER_TOOL_REQ_M_TX_RATE_STAT_MSG_7_M_TRANSMISSION__STOP_CHOICE (0u)
#define PVED_CLS_SER_TOOL_REQ_M_TX_RATE_STAT_MSG_7_M_NO_CHANGE_CHOICE (255u)

#define PVED_CLS_SER_TOOL_REQ_M_TX_RATE_STAT_MSG_OP_M_NO_CHANGE_0_CHOICE (0u)
#define PVED_CLS_SER_TOOL_REQ_M_TX_RATE_STAT_MSG_OP_M_NO_CHANGE_255_CHOICE (255u)

#define PVED_CLS_SER_TOOL_REQ_M_REQ_SERVICE_MODE_M_DIRECT__OUTPUT__CONTROL_CHOICE (0u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_SERVICE_MODE_M_WHEEL__ANGLE__SENSOR__CALIBRATION_CHOICE (1u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_SERVICE_MODE_M_SPOOL__CALIBRATION_CHOICE (2u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_SERVICE_MODE_M_JOYSTICK__CALIBRATION_CHOICE (3u)

#define PVED_CLS_SER_TOOL_REQ_M_REQ_SENSOR5_V_M_OFF_CHOICE (0u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_SENSOR5_V_M_ON_CHOICE (1u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_SENSOR5_V_M_RESERVED_CHOICE (2u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_SENSOR5_V_M_NO__CHANGE_CHOICE (3u)

#define PVED_CLS_SER_TOOL_REQ_M_REQ_ANS_CAPTURE_M_LEFTMOST_POSITION_CHOICE (0u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_ANS_CAPTURE_M_NEUTRAL_POSITION_CHOICE (1u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_ANS_CAPTURE_M_RIGHTMOST_POSITION_CHOICE (2u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_ANS_CAPTURE_M_RESERVED_CHOICE (3u)

#define PVED_CLS_SER_TOOL_REQ_M_REQ_CSS_M_OFF_CHOICE (0u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_CSS_M_ON_CHOICE (1u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_CSS_M_RESERVED_CHOICE (2u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_CSS_M_NO__CHANGE_CHOICE (3u)

#define PVED_CLS_SER_TOOL_REQ_M_TX_RATE_STAT_MSG_8_M_TRANSMISSION__STOP_CHOICE (0u)
#define PVED_CLS_SER_TOOL_REQ_M_TX_RATE_STAT_MSG_8_M_NO_CHANGE_CHOICE (255u)

#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3072_CHOICE (3072u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3073_CHOICE (3073u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3074_CHOICE (3074u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3076_CHOICE (3076u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3078_CHOICE (3078u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3080_CHOICE (3080u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3081_CHOICE (3081u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3082_CHOICE (3082u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3084_CHOICE (3084u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3086_CHOICE (3086u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3088_CHOICE (3088u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3089_CHOICE (3089u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3090_CHOICE (3090u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3091_CHOICE (3091u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3093_CHOICE (3093u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3095_CHOICE (3095u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3097_CHOICE (3097u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3120_CHOICE (3120u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3122_CHOICE (3122u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3123_CHOICE (3123u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3124_CHOICE (3124u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3125_CHOICE (3125u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3126_CHOICE (3126u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3128_CHOICE (3128u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3130_CHOICE (3130u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3132_CHOICE (3132u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3133_CHOICE (3133u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3134_CHOICE (3134u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3160_CHOICE (3160u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3162_CHOICE (3162u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3164_CHOICE (3164u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3166_CHOICE (3166u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3168_CHOICE (3168u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3170_CHOICE (3170u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3183_CHOICE (3183u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3185_CHOICE (3185u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3187_CHOICE (3187u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3189_CHOICE (3189u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3203_CHOICE (3203u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3205_CHOICE (3205u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3207_CHOICE (3207u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3209_CHOICE (3209u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3211_CHOICE (3211u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3213_CHOICE (3213u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3215_CHOICE (3215u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3217_CHOICE (3217u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3219_CHOICE (3219u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3235_CHOICE (3235u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3237_CHOICE (3237u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3238_CHOICE (3238u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3239_CHOICE (3239u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3240_CHOICE (3240u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3241_CHOICE (3241u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3242_CHOICE (3242u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3243_CHOICE (3243u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3244_CHOICE (3244u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3245_CHOICE (3245u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3246_CHOICE (3246u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3247_CHOICE (3247u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3248_CHOICE (3248u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3249_CHOICE (3249u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3250_CHOICE (3250u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3251_CHOICE (3251u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3252_CHOICE (3252u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3253_CHOICE (3253u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3285_CHOICE (3285u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3287_CHOICE (3287u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3288_CHOICE (3288u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3289_CHOICE (3289u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3290_CHOICE (3290u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3291_CHOICE (3291u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3292_CHOICE (3292u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3293_CHOICE (3293u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3294_CHOICE (3294u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3295_CHOICE (3295u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3296_CHOICE (3296u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3297_CHOICE (3297u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3298_CHOICE (3298u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3299_CHOICE (3299u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3300_CHOICE (3300u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3301_CHOICE (3301u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3302_CHOICE (3302u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3303_CHOICE (3303u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3304_CHOICE (3304u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3305_CHOICE (3305u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3306_CHOICE (3306u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3307_CHOICE (3307u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3308_CHOICE (3308u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3309_CHOICE (3309u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3310_CHOICE (3310u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3311_CHOICE (3311u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3312_CHOICE (3312u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3313_CHOICE (3313u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3314_CHOICE (3314u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3315_CHOICE (3315u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3316_CHOICE (3316u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3317_CHOICE (3317u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3318_CHOICE (3318u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3319_CHOICE (3319u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3320_CHOICE (3320u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3321_CHOICE (3321u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3322_CHOICE (3322u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3323_CHOICE (3323u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3349_CHOICE (3349u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3351_CHOICE (3351u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3352_CHOICE (3352u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3354_CHOICE (3354u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3355_CHOICE (3355u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3357_CHOICE (3357u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3358_CHOICE (3358u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3360_CHOICE (3360u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3361_CHOICE (3361u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3363_CHOICE (3363u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3364_CHOICE (3364u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3365_CHOICE (3365u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3366_CHOICE (3366u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3368_CHOICE (3368u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3369_CHOICE (3369u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3371_CHOICE (3371u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3372_CHOICE (3372u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3374_CHOICE (3374u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3375_CHOICE (3375u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3377_CHOICE (3377u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3378_CHOICE (3378u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3379_CHOICE (3379u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3381_CHOICE (3381u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3383_CHOICE (3383u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3419_CHOICE (3419u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3421_CHOICE (3421u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3422_CHOICE (3422u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3424_CHOICE (3424u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3426_CHOICE (3426u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3428_CHOICE (3428u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3449_CHOICE (3449u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3451_CHOICE (3451u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3453_CHOICE (3453u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3455_CHOICE (3455u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3457_CHOICE (3457u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3459_CHOICE (3459u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3461_CHOICE (3461u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3463_CHOICE (3463u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3465_CHOICE (3465u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3467_CHOICE (3467u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3469_CHOICE (3469u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3473_CHOICE (3473u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3474_CHOICE (3474u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3475_CHOICE (3475u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3476_CHOICE (3476u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3477_CHOICE (3477u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3478_CHOICE (3478u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3479_CHOICE (3479u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3480_CHOICE (3480u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3481_CHOICE (3481u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3482_CHOICE (3482u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3483_CHOICE (3483u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3484_CHOICE (3484u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3519_CHOICE (3519u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3521_CHOICE (3521u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3522_CHOICE (3522u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3524_CHOICE (3524u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3526_CHOICE (3526u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3528_CHOICE (3528u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3529_CHOICE (3529u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3530_CHOICE (3530u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3532_CHOICE (3532u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3534_CHOICE (3534u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3536_CHOICE (3536u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3537_CHOICE (3537u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3538_CHOICE (3538u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3540_CHOICE (3540u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3542_CHOICE (3542u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3544_CHOICE (3544u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3545_CHOICE (3545u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3546_CHOICE (3546u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3548_CHOICE (3548u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3550_CHOICE (3550u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3552_CHOICE (3552u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3553_CHOICE (3553u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3554_CHOICE (3554u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3556_CHOICE (3556u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3558_CHOICE (3558u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3560_CHOICE (3560u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3561_CHOICE (3561u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3562_CHOICE (3562u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3564_CHOICE (3564u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3566_CHOICE (3566u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3568_CHOICE (3568u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3569_CHOICE (3569u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3570_CHOICE (3570u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3571_CHOICE (3571u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3572_CHOICE (3572u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3573_CHOICE (3573u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3574_CHOICE (3574u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3576_CHOICE (3576u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3578_CHOICE (3578u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3580_CHOICE (3580u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3582_CHOICE (3582u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3583_CHOICE (3583u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3584_CHOICE (3584u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3644_CHOICE (3644u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3646_CHOICE (3646u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3647_CHOICE (3647u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3648_CHOICE (3648u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3649_CHOICE (3649u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3650_CHOICE (3650u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3652_CHOICE (3652u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3654_CHOICE (3654u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3656_CHOICE (3656u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3657_CHOICE (3657u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3658_CHOICE (3658u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3660_CHOICE (3660u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3662_CHOICE (3662u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3664_CHOICE (3664u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3665_CHOICE (3665u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3666_CHOICE (3666u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3668_CHOICE (3668u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3670_CHOICE (3670u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3672_CHOICE (3672u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3673_CHOICE (3673u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3674_CHOICE (3674u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3676_CHOICE (3676u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3678_CHOICE (3678u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3680_CHOICE (3680u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3681_CHOICE (3681u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3682_CHOICE (3682u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3684_CHOICE (3684u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3686_CHOICE (3686u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3688_CHOICE (3688u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3689_CHOICE (3689u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3690_CHOICE (3690u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3692_CHOICE (3692u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3694_CHOICE (3694u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3696_CHOICE (3696u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3697_CHOICE (3697u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3698_CHOICE (3698u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3699_CHOICE (3699u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3700_CHOICE (3700u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3701_CHOICE (3701u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3703_CHOICE (3703u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3705_CHOICE (3705u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3706_CHOICE (3706u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3708_CHOICE (3708u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3710_CHOICE (3710u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3712_CHOICE (3712u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3714_CHOICE (3714u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3716_CHOICE (3716u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3718_CHOICE (3718u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3719_CHOICE (3719u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3769_CHOICE (3769u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3771_CHOICE (3771u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3772_CHOICE (3772u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3773_CHOICE (3773u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3774_CHOICE (3774u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3775_CHOICE (3775u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3776_CHOICE (3776u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3789_CHOICE (3789u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3791_CHOICE (3791u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3793_CHOICE (3793u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3795_CHOICE (3795u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3797_CHOICE (3797u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3799_CHOICE (3799u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3801_CHOICE (3801u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3802_CHOICE (3802u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3804_CHOICE (3804u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3806_CHOICE (3806u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3808_CHOICE (3808u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3810_CHOICE (3810u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3811_CHOICE (3811u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3812_CHOICE (3812u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3814_CHOICE (3814u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_PARAM_ADDRESS_M_P3822_CHOICE (3822u)

#define PVED_CLS_SER_TOOL_REQ_M_TX_RATE_STAT_MSG_1_M_TRANSMISSION_STOP_CHOICE (0u)
#define PVED_CLS_SER_TOOL_REQ_M_TX_RATE_STAT_MSG_1_M_NO_CHANGE_CHOICE (255u)

#define PVED_CLS_SER_TOOL_REQ_M_REQ_SERVICE_MODE_CHK_M_JOYSTICK__CALIBRATION_CHOICE (21845u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_SERVICE_MODE_CHK_M_DIRECT__OUTPUT__CONTROL_CHOICE (21930u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_SERVICE_MODE_CHK_M_SPOOL__CALIBRATION_CHOICE (23130u)
#define PVED_CLS_SER_TOOL_REQ_M_REQ_SERVICE_MODE_CHK_M_WHEEL__ANGLE__SENSOR__CALIBRATION_CHOICE (42405u)

#define PVED_CLS_SER_TOOL_REQ_M_TX_RATE_STAT_MSG_2_M_TRANSMISSION_STOP_CHOICE (0u)
#define PVED_CLS_SER_TOOL_REQ_M_TX_RATE_STAT_MSG_2_M_NO__CHANGE_CHOICE (255u)

#define PVED_CLS_SER_TOOL_REQ_M_TX_RATE_STAT_MSG_3_M_TRANSMISSION__STOP_CHOICE (0u)
#define PVED_CLS_SER_TOOL_REQ_M_TX_RATE_STAT_MSG_3_M_NO__CHANGE_CHOICE (255u)

#define PVED_CLS_SER_TOOL_REQ_M_TX_RATE_STAT_MSG_4_M_TRANSMISSION__STOP_CHOICE (0u)
#define PVED_CLS_SER_TOOL_REQ_M_TX_RATE_STAT_MSG_4_M_NO__CHANGE_CHOICE (255u)

#define PVED_CLS_SER_TOOL_REQ_M_TX_RATE_STAT_MSG_5_M_TRANSMISSION__STOP_CHOICE (0u)
#define PVED_CLS_SER_TOOL_REQ_M_TX_RATE_STAT_MSG_5_M_NO__CHANGE_CHOICE (255u)

#define PVED_CLS_SER_TOOL_REQ_M_TX_RATE_STAT_MSG_6_M_TRANSMISSION__STOP_CHOICE (0u)
#define PVED_CLS_SER_TOOL_REQ_M_TX_RATE_STAT_MSG_6_M_NO_CHANGE_CHOICE (255u)

#define PVED_CLS_STR_FB_MSG_S_STR_FB_STW_L2_L_S_NOT__AVAILABLE_CHOICE (255u)

#define PVED_CLS_STR_FB_MSG_S_IMD_STW_STATUS_S_STEERING_WHEEL_ACTIVE_CHOICE (0u)
#define PVED_CLS_STR_FB_MSG_S_IMD_STW_STATUS_S_STEERING_WHEEL_INACTIVE_CHOICE (1u)
#define PVED_CLS_STR_FB_MSG_S_IMD_STW_STATUS_S_RESERVED_CHOICE (2u)
#define PVED_CLS_STR_FB_MSG_S_IMD_STW_STATUS_S_INFORMATION_NOT_AVAILABLE_CHOICE (3u)

#define PVED_CLS_STR_FB_MSG_M_STR_FB_STW_L2_L_M_NOT__AVAILABLE_CHOICE (255u)

#define PVED_CLS_STR_FB_MSG_M_IMD_STW_STATUS_M_STEERING_WHEEL_ACTIVE_CHOICE (0u)
#define PVED_CLS_STR_FB_MSG_M_IMD_STW_STATUS_M_STEERING_WHEEL_INACTIVE_CHOICE (1u)
#define PVED_CLS_STR_FB_MSG_M_IMD_STW_STATUS_M_RESERVED_CHOICE (2u)
#define PVED_CLS_STR_FB_MSG_M_IMD_STW_STATUS_M_INFORMATION_NOT_AVAILABLE_CHOICE (3u)

#define PVED_CLS_AUX_JOY_P_AUX_JOY_CL_ENABLE_P_INACTIVE_CHOICE (0u)
#define PVED_CLS_AUX_JOY_P_AUX_JOY_CL_ENABLE_P_ACTIVE_CHOICE (1u)
#define PVED_CLS_AUX_JOY_P_AUX_JOY_CL_ENABLE_P_RESERVED_CHOICE (2u)
#define PVED_CLS_AUX_JOY_P_AUX_JOY_CL_ENABLE_P_INFORMATION_NOT_AVAILABLE_CHOICE (3u)

#define PVED_CLS_AUX_JOY_P_AUX_JOY_CL_ERROR_CODE_P_RESERVED_0_CHOICE (0u)
#define PVED_CLS_AUX_JOY_P_AUX_JOY_CL_ERROR_CODE_P_RESERVED_1_CHOICE (1u)
#define PVED_CLS_AUX_JOY_P_AUX_JOY_CL_ERROR_CODE_P_RESERVED_2_CHOICE (2u)
#define PVED_CLS_AUX_JOY_P_AUX_JOY_CL_ERROR_CODE_P_RESERVED_3_CHOICE (3u)
#define PVED_CLS_AUX_JOY_P_AUX_JOY_CL_ERROR_CODE_P_RESERVED_4_CHOICE (4u)
#define PVED_CLS_AUX_JOY_P_AUX_JOY_CL_ERROR_CODE_P_RESERVED_5_CHOICE (5u)
#define PVED_CLS_AUX_JOY_P_AUX_JOY_CL_ERROR_CODE_P_RESERVED_6_CHOICE (6u)
#define PVED_CLS_AUX_JOY_P_AUX_JOY_CL_ERROR_CODE_P_RESERVED_7_CHOICE (7u)
#define PVED_CLS_AUX_JOY_P_AUX_JOY_CL_ERROR_CODE_P_RESERVED_14_CHOICE (14u)
#define PVED_CLS_AUX_JOY_P_AUX_JOY_CL_ERROR_CODE_P_NO__ERROR_CHOICE (15u)

#define PVED_CLS_AUX_JOY_R_AUX_JOY_CL_ENABLE_R_INACTIVE_CHOICE (0u)
#define PVED_CLS_AUX_JOY_R_AUX_JOY_CL_ENABLE_R_ACTIVE_CHOICE (1u)
#define PVED_CLS_AUX_JOY_R_AUX_JOY_CL_ENABLE_R_RESERVED_CHOICE (2u)
#define PVED_CLS_AUX_JOY_R_AUX_JOY_CL_ENABLE_R_INFORMATION_NOT_AVAILABLE_CHOICE (3u)

#define PVED_CLS_AUX_JOY_R_AUX_JOY_CL_ERROR_CODE_R_RESERVED_0_CHOICE (0u)
#define PVED_CLS_AUX_JOY_R_AUX_JOY_CL_ERROR_CODE_R_RESERVED_1_CHOICE (1u)
#define PVED_CLS_AUX_JOY_R_AUX_JOY_CL_ERROR_CODE_R_RESERVED_2_CHOICE (2u)
#define PVED_CLS_AUX_JOY_R_AUX_JOY_CL_ERROR_CODE_R_RESERVED_3_CHOICE (3u)
#define PVED_CLS_AUX_JOY_R_AUX_JOY_CL_ERROR_CODE_R_RESERVED_4_CHOICE (4u)
#define PVED_CLS_AUX_JOY_R_AUX_JOY_CL_ERROR_CODE_R_RESERVED_5_CHOICE (5u)
#define PVED_CLS_AUX_JOY_R_AUX_JOY_CL_ERROR_CODE_R_RESERVED_6_CHOICE (6u)
#define PVED_CLS_AUX_JOY_R_AUX_JOY_CL_ERROR_CODE_R_RESERVED_7_CHOICE (7u)
#define PVED_CLS_AUX_JOY_R_AUX_JOY_CL_ERROR_CODE_R_RESERVED_14_CHOICE (14u)
#define PVED_CLS_AUX_JOY_R_AUX_JOY_CL_ERROR_CODE_R_NO__ERROR_CHOICE (15u)

#define PVED_CLS_AUX_STW_R_AUX_STW_ERROR_CODE_R_RESERVED_CHOICE (0u)
#define PVED_CLS_AUX_STW_R_AUX_STW_ERROR_CODE_R_SENSOR_CHIP_ERROR_CHOICE (1u)
#define PVED_CLS_AUX_STW_R_AUX_STW_ERROR_CODE_R_STEERING_ANGLE_FAILURE_CHOICE (2u)
#define PVED_CLS_AUX_STW_R_AUX_STW_ERROR_CODE_R_CAN_INPUT_MESSAGE_FAILURE_CHOICE (3u)
#define PVED_CLS_AUX_STW_R_AUX_STW_ERROR_CODE_R_POWER_FAILURE_CHOICE (4u)
#define PVED_CLS_AUX_STW_R_AUX_STW_ERROR_CODE_R_CPU_FAILURE_CHOICE (5u)
#define PVED_CLS_AUX_STW_R_AUX_STW_ERROR_CODE_R_MEMORY_FAILURE_CHOICE (6u)
#define PVED_CLS_AUX_STW_R_AUX_STW_ERROR_CODE_R_FORCE_FEEDBACK_FAILURE_CHOICE (7u)
#define PVED_CLS_AUX_STW_R_AUX_STW_ERROR_CODE_R_TEMPERATURE_WARNING_CHOICE (14u)
#define PVED_CLS_AUX_STW_R_AUX_STW_ERROR_CODE_R_NO__ERROR_CHOICE (15u)

#define PVED_CLS_AUX_STW_P_AUX_STW_ERROR_CODE_P_RESERVED_CHOICE (0u)
#define PVED_CLS_AUX_STW_P_AUX_STW_ERROR_CODE_P_SENSOR_CHIP_ERROR_CHOICE (1u)
#define PVED_CLS_AUX_STW_P_AUX_STW_ERROR_CODE_P_STEERING_ANGLE_FAILURE_CHOICE (2u)
#define PVED_CLS_AUX_STW_P_AUX_STW_ERROR_CODE_P_CAN_INPUT_MESSAGE_FAILURE_CHOICE (3u)
#define PVED_CLS_AUX_STW_P_AUX_STW_ERROR_CODE_P_POWER_FAILURE_CHOICE (4u)
#define PVED_CLS_AUX_STW_P_AUX_STW_ERROR_CODE_P_CPU_FAILURE_CHOICE (5u)
#define PVED_CLS_AUX_STW_P_AUX_STW_ERROR_CODE_P_MEMORY_FAILURE_CHOICE (6u)
#define PVED_CLS_AUX_STW_P_AUX_STW_ERROR_CODE_P_FORCE_FEEDBACK_FAILURE_CHOICE (7u)
#define PVED_CLS_AUX_STW_P_AUX_STW_ERROR_CODE_P_TEMPERATURE_WARNING_CHOICE (14u)
#define PVED_CLS_AUX_STW_P_AUX_STW_ERROR_CODE_P_NO__ERROR_CHOICE (15u)

#define PVED_CLS_STW_R_STW_ERROR_CODE_R_RESERVED_0_CHOICE (0u)
#define PVED_CLS_STW_R_STW_ERROR_CODE_R_SENSOR__CHIP_ERROR_CHOICE (1u)
#define PVED_CLS_STW_R_STW_ERROR_CODE_R_STEERING_ANGLE_FAILURE_CHOICE (2u)
#define PVED_CLS_STW_R_STW_ERROR_CODE_R_CAN_INPUT_MESSAGE_FAILURE_CHOICE (3u)
#define PVED_CLS_STW_R_STW_ERROR_CODE_R_POWER_FAILURE_CHOICE (4u)
#define PVED_CLS_STW_R_STW_ERROR_CODE_R_CPU_FAILURE_CHOICE (5u)
#define PVED_CLS_STW_R_STW_ERROR_CODE_R_MEMORY_FAILURE_CHOICE (6u)
#define PVED_CLS_STW_R_STW_ERROR_CODE_R_RESERVED_7_CHOICE (7u)
#define PVED_CLS_STW_R_STW_ERROR_CODE_R_RESERVED_8_CHOICE (8u)
#define PVED_CLS_STW_R_STW_ERROR_CODE_R_RESERVED_9_CHOICE (9u)
#define PVED_CLS_STW_R_STW_ERROR_CODE_R_RESERVED_10_CHOICE (10u)
#define PVED_CLS_STW_R_STW_ERROR_CODE_R_RESERVED_11_CHOICE (11u)
#define PVED_CLS_STW_R_STW_ERROR_CODE_R_RESERVED_12_CHOICE (12u)
#define PVED_CLS_STW_R_STW_ERROR_CODE_R_RESERVED_13_CHOICE (13u)
#define PVED_CLS_STW_R_STW_ERROR_CODE_R_TEMPERATURE__WARNING_CHOICE (14u)
#define PVED_CLS_STW_R_STW_ERROR_CODE_R_NO_ERROR_CHOICE (15u)

#define PVED_CLS_STW_P_STW_ERROR_CODE_P_RESERVED_0_CHOICE (0u)
#define PVED_CLS_STW_P_STW_ERROR_CODE_P_SENSOR__CHIP_ERROR_CHOICE (1u)
#define PVED_CLS_STW_P_STW_ERROR_CODE_P_STEERING_ANGLE_FAILURE_CHOICE (2u)
#define PVED_CLS_STW_P_STW_ERROR_CODE_P_CAN_INPUT_MESSAGE_FAILURE_CHOICE (3u)
#define PVED_CLS_STW_P_STW_ERROR_CODE_P_POWER_FAILURE_CHOICE (4u)
#define PVED_CLS_STW_P_STW_ERROR_CODE_P_CPU_FAILURE_CHOICE (5u)
#define PVED_CLS_STW_P_STW_ERROR_CODE_P_MEMORY_FAILURE_CHOICE (6u)
#define PVED_CLS_STW_P_STW_ERROR_CODE_P_RESERVED_7_CHOICE (7u)
#define PVED_CLS_STW_P_STW_ERROR_CODE_P_RESERVED_8_CHOICE (8u)
#define PVED_CLS_STW_P_STW_ERROR_CODE_P_RESERVED_9_CHOICE (9u)
#define PVED_CLS_STW_P_STW_ERROR_CODE_P_RESERVED_10_CHOICE (10u)
#define PVED_CLS_STW_P_STW_ERROR_CODE_P_RESERVED_11_CHOICE (11u)
#define PVED_CLS_STW_P_STW_ERROR_CODE_P_RESERVED_12_CHOICE (12u)
#define PVED_CLS_STW_P_STW_ERROR_CODE_P_RESERVED_13_CHOICE (13u)
#define PVED_CLS_STW_P_STW_ERROR_CODE_P_TEMPERATURE__WARNING_CHOICE (14u)
#define PVED_CLS_STW_P_STW_ERROR_CODE_P_NO_ERROR_CHOICE (15u)

#define PVED_CLS_STAT_MSG_5_S_FDA_ERR_CONDITION_S_INACTIVE_CHOICE (0u)
#define PVED_CLS_STAT_MSG_5_S_FDA_ERR_CONDITION_S_ACTIVE_CHOICE (1u)
#define PVED_CLS_STAT_MSG_5_S_FDA_ERR_CONDITION_S_RESERVED_CHOICE (2u)
#define PVED_CLS_STAT_MSG_5_S_FDA_ERR_CONDITION_S_INFORMATION__NOT__AVAILABLE_CHOICE (3u)

#define PVED_CLS_STAT_MSG_5_S_FDA_SPL_INDICATION_S_LEFT_CHOICE (0u)
#define PVED_CLS_STAT_MSG_5_S_FDA_SPL_INDICATION_S_NEUTRAL_CHOICE (1u)
#define PVED_CLS_STAT_MSG_5_S_FDA_SPL_INDICATION_S_RIGHT_CHOICE (2u)
#define PVED_CLS_STAT_MSG_5_S_FDA_SPL_INDICATION_S_INFORMATION__NOT__AVAILABLE_CHOICE (3u)

#define PVED_CLS_STAT_MSG_5_S_FDA_WAS_INDICATION_S_LEFT_CHOICE (0u)
#define PVED_CLS_STAT_MSG_5_S_FDA_WAS_INDICATION_S_NEUTRAL_CHOICE (1u)
#define PVED_CLS_STAT_MSG_5_S_FDA_WAS_INDICATION_S_RIGHT_CHOICE (2u)
#define PVED_CLS_STAT_MSG_5_S_FDA_WAS_INDICATION_S_INFORMATION__NOT__AVAILABLE_CHOICE (3u)

#define PVED_CLS_STAT_MSG_5_S_FDA_STW_INDICATION_S_LEFT_CHOICE (0u)
#define PVED_CLS_STAT_MSG_5_S_FDA_STW_INDICATION_S_NEUTRAL_CHOICE (1u)
#define PVED_CLS_STAT_MSG_5_S_FDA_STW_INDICATION_S_RIGHT_CHOICE (2u)
#define PVED_CLS_STAT_MSG_5_S_FDA_STW_INDICATION_S_INFORMATION__NOT__AVAILABLE_CHOICE (3u)

#define PVED_CLS_STAT_MSG_5_S_FDA_FAULT_CONDITION_S_INACTIVE_CHOICE (0u)
#define PVED_CLS_STAT_MSG_5_S_FDA_FAULT_CONDITION_S_ACTIVE_CHOICE (1u)
#define PVED_CLS_STAT_MSG_5_S_FDA_FAULT_CONDITION_S_RESERVED_CHOICE (2u)
#define PVED_CLS_STAT_MSG_5_S_FDA_FAULT_CONDITION_S_INFORMATION__NOT__AVAILABLE_CHOICE (3u)

#define PVED_CLS_STAT_MSG_5_S_SPL_DIAG_S_SPOOL_MONITORING_ACTIVE_CHOICE (0u)
#define PVED_CLS_STAT_MSG_5_S_SPL_DIAG_S_SPOOL__MOVEMENT_CHECK_ACTIVE_CHOICE (1u)
#define PVED_CLS_STAT_MSG_5_S_SPL_DIAG_S____EXE_OF__SPL_MNTRNG____SPL_MVMNT_CHOICE (2u)
#define PVED_CLS_STAT_MSG_5_S_SPL_DIAG_S_NO__SPOOL_DIAGNOSTICS_ACTIVE_CHOICE (3u)

#define PVED_CLS_STAT_MSG_5_S_SPL_CTRL_S_SPOOL_CONTROL_DISABLED_CHOICE (0u)
#define PVED_CLS_STAT_MSG_5_S_SPL_CTRL_S_SPOOL_CONTROL_ENABLED_CHOICE (1u)
#define PVED_CLS_STAT_MSG_5_S_SPL_CTRL_S_ERROR_CONDITION_CHOICE (2u)
#define PVED_CLS_STAT_MSG_5_S_SPL_CTRL_S_INFORMATION__NOT_AVAILABLE_CHOICE (3u)

#define PVED_CLS_STAT_MSG_5_S_FDA_MUTED_S_FAULT_DETECTION_ALGO_MUTED_CHOICE (0u)
#define PVED_CLS_STAT_MSG_5_S_FDA_MUTED_S_FAULT_DETECTION_ALGO_ENABLED_CHOICE (1u)
#define PVED_CLS_STAT_MSG_5_S_FDA_MUTED_S_RESERVED_CHOICE (2u)
#define PVED_CLS_STAT_MSG_5_S_FDA_MUTED_S_INFORMATION__NOT__AVAILABLE_CHOICE (3u)

#define PVED_CLS_STAT_MSG_5_M_FDA_ERR_CONDITION_M_INACTIVE_CHOICE (0u)
#define PVED_CLS_STAT_MSG_5_M_FDA_ERR_CONDITION_M_ACTIVE_CHOICE (1u)
#define PVED_CLS_STAT_MSG_5_M_FDA_ERR_CONDITION_M_RESERVED_CHOICE (2u)
#define PVED_CLS_STAT_MSG_5_M_FDA_ERR_CONDITION_M_INFORMATION__NOT__AVAILABLE_CHOICE (3u)

#define PVED_CLS_STAT_MSG_5_M_FDA_SPL_INDICATION_M_LEFT_CHOICE (0u)
#define PVED_CLS_STAT_MSG_5_M_FDA_SPL_INDICATION_M_NEUTRAL_CHOICE (1u)
#define PVED_CLS_STAT_MSG_5_M_FDA_SPL_INDICATION_M_RIGHT_CHOICE (2u)
#define PVED_CLS_STAT_MSG_5_M_FDA_SPL_INDICATION_M_INFORMATION__NOT__AVAILABLE_CHOICE (3u)

#define PVED_CLS_STAT_MSG_5_M_FDA_WAS_INDICATION_M_LEFT_CHOICE (0u)
#define PVED_CLS_STAT_MSG_5_M_FDA_WAS_INDICATION_M_NEUTRAL_CHOICE (1u)
#define PVED_CLS_STAT_MSG_5_M_FDA_WAS_INDICATION_M_RIGHT_CHOICE (2u)
#define PVED_CLS_STAT_MSG_5_M_FDA_WAS_INDICATION_M_INFORMATION__NOT__AVAILABLE_CHOICE (3u)

#define PVED_CLS_STAT_MSG_5_M_FDA_STW_INDICATION_M_LEFT_CHOICE (0u)
#define PVED_CLS_STAT_MSG_5_M_FDA_STW_INDICATION_M_NEUTRAL_CHOICE (1u)
#define PVED_CLS_STAT_MSG_5_M_FDA_STW_INDICATION_M_RIGHT_CHOICE (2u)
#define PVED_CLS_STAT_MSG_5_M_FDA_STW_INDICATION_M_INFORMATION__NOT__AVAILABLE_CHOICE (3u)

#define PVED_CLS_STAT_MSG_5_M_FDA_FAULT_CONDITION_M_INACTIVE_CHOICE (0u)
#define PVED_CLS_STAT_MSG_5_M_FDA_FAULT_CONDITION_M_ACTIVE_CHOICE (1u)
#define PVED_CLS_STAT_MSG_5_M_FDA_FAULT_CONDITION_M_RESERVED_CHOICE (2u)
#define PVED_CLS_STAT_MSG_5_M_FDA_FAULT_CONDITION_M_INFORMATION__NOT__AVAILABLE_CHOICE (3u)

#define PVED_CLS_STAT_MSG_5_M_SPL_DIAG_M_SPOOL_MONITORING_ACTIVE_CHOICE (0u)
#define PVED_CLS_STAT_MSG_5_M_SPL_DIAG_M_SPOOL__MOVEMENT_CHECK_ACTIVE_CHOICE (1u)
#define PVED_CLS_STAT_MSG_5_M_SPL_DIAG_M____EXE_OF__SPL_MNTRNG____SPL_MVMNT_CHOICE (2u)
#define PVED_CLS_STAT_MSG_5_M_SPL_DIAG_M_NO__SPOOL_DIAGNOSTICS_ACTIVE_CHOICE (3u)

#define PVED_CLS_STAT_MSG_5_M_SPL_CTRL_M_SPOOL_CONTROL_DISABLED_CHOICE (0u)
#define PVED_CLS_STAT_MSG_5_M_SPL_CTRL_M_SPOOL_CONTROL_ENABLED_CHOICE (1u)
#define PVED_CLS_STAT_MSG_5_M_SPL_CTRL_M_ERROR_CONDITION_CHOICE (2u)
#define PVED_CLS_STAT_MSG_5_M_SPL_CTRL_M_INFORMATION__NOT_AVAILABLE_CHOICE (3u)

#define PVED_CLS_STAT_MSG_5_M_FDA_MUTED_M_FAULT_DETECTION_ALGO_MUTED_CHOICE (0u)
#define PVED_CLS_STAT_MSG_5_M_FDA_MUTED_M_FAULT_DETECTION_ALGO_ENABLED_CHOICE (1u)
#define PVED_CLS_STAT_MSG_5_M_FDA_MUTED_M_RESERVED_CHOICE (2u)
#define PVED_CLS_STAT_MSG_5_M_FDA_MUTED_M_INFORMATION__NOT__AVAILABLE_CHOICE (3u)

#define PVED_CLS_GPS1_GMS_GPS1_SYSTEM_LOCKOUT_NOT_ACTIVE_CHOICE (0u)
#define PVED_CLS_GPS1_GMS_GPS1_SYSTEM_LOCKOUT_ACTIVE_CHOICE (1u)
#define PVED_CLS_GPS1_GMS_GPS1_SYSTEM_LOCKOUT_ERROR__CONDITION_CHOICE (2u)
#define PVED_CLS_GPS1_GMS_GPS1_SYSTEM_LOCKOUT_INFORMATION__NOT_AVAILABLE_CHOICE (3u)

#define PVED_CLS_GPS1_GMS_GPS1_SYSTEM_READY_SYSTEM_IS_NOT_READY_CHOICE (0u)
#define PVED_CLS_GPS1_GMS_GPS1_SYSTEM_READY_SYSTEM_IS_READY_CHOICE (1u)
#define PVED_CLS_GPS1_GMS_GPS1_SYSTEM_READY_ERROR_CONDITION_CHOICE (2u)
#define PVED_CLS_GPS1_GMS_GPS1_SYSTEM_READY_INFORMATION_NOT_AVAILABLE_CHOICE (3u)

#define PVED_CLS_GPS1_GMS_GPS1_STR_INPUT_POS_STATUS_INCORRECT_POSITION_CHOICE (0u)
#define PVED_CLS_GPS1_GMS_GPS1_STR_INPUT_POS_STATUS_CORRECT_POSITION_CHOICE (1u)
#define PVED_CLS_GPS1_GMS_GPS1_STR_INPUT_POS_STATUS_ERROR_CONDITION_CHOICE (2u)
#define PVED_CLS_GPS1_GMS_GPS1_STR_INPUT_POS_STATUS_INFORMATION__NOT_AVAILABLE_CHOICE (3u)

#define PVED_CLS_GPS1_GMS_GPS1_REQ_RESET_RESET_NOT_REQUIRED_CHOICE (0u)
#define PVED_CLS_GPS1_GMS_GPS1_REQ_RESET_RESET_REQUIRED_CHOICE (1u)
#define PVED_CLS_GPS1_GMS_GPS1_REQ_RESET_ERROR_CONDITION_CHOICE (2u)
#define PVED_CLS_GPS1_GMS_GPS1_REQ_RESET_NOT_AVAILABLE_CHOICE (3u)

#define PVED_CLS_GPS1_GMS_GPS1_LIMIT_STATUS_NOT_LIMITED_CHOICE (0u)
#define PVED_CLS_GPS1_GMS_GPS1_LIMIT_STATUS_RESERVED_1_CHOICE (1u)
#define PVED_CLS_GPS1_GMS_GPS1_LIMIT_STATUS_LIMITED_HIGH_CHOICE (2u)
#define PVED_CLS_GPS1_GMS_GPS1_LIMIT_STATUS_LIMITED_LOW__CHOICE (3u)
#define PVED_CLS_GPS1_GMS_GPS1_LIMIT_STATUS_RESERVED_4_CHOICE (4u)
#define PVED_CLS_GPS1_GMS_GPS1_LIMIT_STATUS_RESERVED_5_CHOICE (5u)
#define PVED_CLS_GPS1_GMS_GPS1_LIMIT_STATUS_NON_RECOVERABLE_FAULT_CHOICE (6u)
#define PVED_CLS_GPS1_GMS_GPS1_LIMIT_STATUS_RESERVED_7_CHOICE (7u)

#define PVED_CLS_GPS1_GMS_GPS1_EXIT_REASON_NO_REASON_ALL_CLEAR_CHOICE (0u)
#define PVED_CLS_GPS1_GMS_GPS1_EXIT_REASON_RESERVED_1_CHOICE (1u)
#define PVED_CLS_GPS1_GMS_GPS1_EXIT_REASON_RESERVED_2_CHOICE (2u)
#define PVED_CLS_GPS1_GMS_GPS1_EXIT_REASON_OPERATOR_OVERRIDE_OF_FUNCTION_CHOICE (3u)
#define PVED_CLS_GPS1_GMS_GPS1_EXIT_REASON_RESERVED_4_CHOICE (4u)
#define PVED_CLS_GPS1_GMS_GPS1_EXIT_REASON_GMC_TIMEOUT_CHOICE (5u)
#define PVED_CLS_GPS1_GMS_GPS1_EXIT_REASON_GMC_OUT_OF_RANGE_INVALID_CHOICE (6u)
#define PVED_CLS_GPS1_GMS_GPS1_EXIT_REASON_RESERVED_7_CHOICE (7u)
#define PVED_CLS_GPS1_GMS_GPS1_EXIT_REASON_RESERVED_8_CHOICE (8u)
#define PVED_CLS_GPS1_GMS_GPS1_EXIT_REASON_RESERVED_9_CHOICE (9u)
#define PVED_CLS_GPS1_GMS_GPS1_EXIT_REASON_RESERVED_10_CHOICE (10u)
#define PVED_CLS_GPS1_GMS_GPS1_EXIT_REASON_RESERVED_11_CHOICE (11u)
#define PVED_CLS_GPS1_GMS_GPS1_EXIT_REASON_RESERVED_12_CHOICE (12u)
#define PVED_CLS_GPS1_GMS_GPS1_EXIT_REASON_RESERVED_13_CHOICE (13u)
#define PVED_CLS_GPS1_GMS_GPS1_EXIT_REASON_RESERVED_14_CHOICE (14u)
#define PVED_CLS_GPS1_GMS_GPS1_EXIT_REASON_RESERVED_15_CHOICE (15u)
#define PVED_CLS_GPS1_GMS_GPS1_EXIT_REASON_RESERVED_16_CHOICE (16u)
#define PVED_CLS_GPS1_GMS_GPS1_EXIT_REASON_RESERVED_17_CHOICE (17u)
#define PVED_CLS_GPS1_GMS_GPS1_EXIT_REASON_RESERVED_18_CHOICE (18u)
#define PVED_CLS_GPS1_GMS_GPS1_EXIT_REASON_RESERVED_19_CHOICE (19u)
#define PVED_CLS_GPS1_GMS_GPS1_EXIT_REASON_RESERVED_20_CHOICE (20u)
#define PVED_CLS_GPS1_GMS_GPS1_EXIT_REASON_RESERVED_21_CHOICE (21u)
#define PVED_CLS_GPS1_GMS_GPS1_EXIT_REASON_RESERVED_22_CHOICE (22u)
#define PVED_CLS_GPS1_GMS_GPS1_EXIT_REASON_RESERVED_23_CHOICE (23u)
#define PVED_CLS_GPS1_GMS_GPS1_EXIT_REASON_VEHICLE_SPEED_TOO_HIGH_CHOICE (24u)
#define PVED_CLS_GPS1_GMS_GPS1_EXIT_REASON_ALTRNTE_GUIDNCE_OR_NO_SYS_ACTIVE_CHOICE (25u)
#define PVED_CLS_GPS1_GMS_GPS1_EXIT_REASON_RESERVED_26_CHOICE (26u)
#define PVED_CLS_GPS1_GMS_GPS1_EXIT_REASON_RESERVED_27_CHOICE (27u)
#define PVED_CLS_GPS1_GMS_GPS1_EXIT_REASON_RESERVED_28_CHOICE (28u)
#define PVED_CLS_GPS1_GMS_GPS1_EXIT_REASON_RESERVED_29_CHOICE (29u)
#define PVED_CLS_GPS1_GMS_GPS1_EXIT_REASON_RESERVED_30_CHOICE (30u)
#define PVED_CLS_GPS1_GMS_GPS1_EXIT_REASON_RESERVED_31_CHOICE (31u)
#define PVED_CLS_GPS1_GMS_GPS1_EXIT_REASON_RESERVED_32_CHOICE (32u)
#define PVED_CLS_GPS1_GMS_GPS1_EXIT_REASON_RESERVED_33_CHOICE (33u)
#define PVED_CLS_GPS1_GMS_GPS1_EXIT_REASON_RESERVED_34_CHOICE (34u)
#define PVED_CLS_GPS1_GMS_GPS1_EXIT_REASON_RESERVED_35_CHOICE (35u)
#define PVED_CLS_GPS1_GMS_GPS1_EXIT_REASON_RESERVED_36_CHOICE (36u)
#define PVED_CLS_GPS1_GMS_GPS1_EXIT_REASON_RESERVED_37_CHOICE (37u)
#define PVED_CLS_GPS1_GMS_GPS1_EXIT_REASON_RESERVED_38_CHOICE (38u)
#define PVED_CLS_GPS1_GMS_GPS1_EXIT_REASON_RESERVED_39_CHOICE (39u)
#define PVED_CLS_GPS1_GMS_GPS1_EXIT_REASON_RESERVED_40_CHOICE (40u)
#define PVED_CLS_GPS1_GMS_GPS1_EXIT_REASON_RESERVED_41_CHOICE (41u)
#define PVED_CLS_GPS1_GMS_GPS1_EXIT_REASON_RESERVED_42_CHOICE (42u)
#define PVED_CLS_GPS1_GMS_GPS1_EXIT_REASON_RESERVED_43_CHOICE (43u)
#define PVED_CLS_GPS1_GMS_GPS1_EXIT_REASON_RESERVED_44_CHOICE (44u)
#define PVED_CLS_GPS1_GMS_GPS1_EXIT_REASON_RESERVED_45_CHOICE (45u)
#define PVED_CLS_GPS1_GMS_GPS1_EXIT_REASON_RESERVED_46_CHOICE (46u)
#define PVED_CLS_GPS1_GMS_GPS1_EXIT_REASON_RESERVED_47_CHOICE (47u)
#define PVED_CLS_GPS1_GMS_GPS1_EXIT_REASON_RESERVED_48_CHOICE (48u)
#define PVED_CLS_GPS1_GMS_GPS1_EXIT_REASON_RESERVED_49_CHOICE (49u)
#define PVED_CLS_GPS1_GMS_GPS1_EXIT_REASON_RESERVED_50_CHOICE (50u)
#define PVED_CLS_GPS1_GMS_GPS1_EXIT_REASON_RESERVED_51_CHOICE (51u)
#define PVED_CLS_GPS1_GMS_GPS1_EXIT_REASON_RESERVED_52_CHOICE (52u)
#define PVED_CLS_GPS1_GMS_GPS1_EXIT_REASON_RESERVED_53_CHOICE (53u)
#define PVED_CLS_GPS1_GMS_GPS1_EXIT_REASON_RESERVED_54_CHOICE (54u)
#define PVED_CLS_GPS1_GMS_GPS1_EXIT_REASON_RESERVED_55_CHOICE (55u)
#define PVED_CLS_GPS1_GMS_GPS1_EXIT_REASON_RESERVED_56_CHOICE (56u)
#define PVED_CLS_GPS1_GMS_GPS1_EXIT_REASON_RESERVED_57_CHOICE (57u)
#define PVED_CLS_GPS1_GMS_GPS1_EXIT_REASON_RESERVED_58_CHOICE (58u)
#define PVED_CLS_GPS1_GMS_GPS1_EXIT_REASON_RESERVED_59_CHOICE (59u)
#define PVED_CLS_GPS1_GMS_GPS1_EXIT_REASON_RESERVED_60_CHOICE (60u)
#define PVED_CLS_GPS1_GMS_GPS1_EXIT_REASON_RESERVED_61_CHOICE (61u)
#define PVED_CLS_GPS1_GMS_GPS1_EXIT_REASON_ERROR___SAFE_STATE__CHOICE (62u)
#define PVED_CLS_GPS1_GMS_GPS1_EXIT_REASON_RESERVED_63_CHOICE (63u)

#define PVED_CLS_GPS1_GMC_GPS1_STR_CMD_STATUS_NOT_INTENDED_FOR_STEERING_CHOICE (0u)
#define PVED_CLS_GPS1_GMC_GPS1_STR_CMD_STATUS_INTENDED_FOR_STEERING_CHOICE (1u)
#define PVED_CLS_GPS1_GMC_GPS1_STR_CMD_STATUS_ERROR_CONDITION_CHOICE (2u)
#define PVED_CLS_GPS1_GMC_GPS1_STR_CMD_STATUS_INFORMATION_NOT_AVAILABLE_CHOICE (3u)

#define PVED_CLS_MMI_R_MMI_STR_MODE_REQ_R_ON_ROAD_CHOICE (0u)
#define PVED_CLS_MMI_R_MMI_STR_MODE_REQ_R_OFF_ROAD_REACTION_CHOICE (16u)
#define PVED_CLS_MMI_R_MMI_STR_MODE_REQ_R_OFF_ROAD_NON_REACTION_CHOICE (17u)
#define PVED_CLS_MMI_R_MMI_STR_MODE_REQ_R_STW_PROGRAM_1_CHOICE (32u)
#define PVED_CLS_MMI_R_MMI_STR_MODE_REQ_R_STW_PROGRAM_2_CHOICE (33u)
#define PVED_CLS_MMI_R_MMI_STR_MODE_REQ_R_STW_PROGRAM_3_CHOICE (34u)
#define PVED_CLS_MMI_R_MMI_STR_MODE_REQ_R_STW_PROGRAM_4_CHOICE (35u)
#define PVED_CLS_MMI_R_MMI_STR_MODE_REQ_R_STW_PROGRAM_5_CHOICE (36u)
#define PVED_CLS_MMI_R_MMI_STR_MODE_REQ_R_AUX_STEERING_CHOICE (48u)
#define PVED_CLS_MMI_R_MMI_STR_MODE_REQ_R_GPS_STEERING_CHOICE (64u)
#define PVED_CLS_MMI_R_MMI_STR_MODE_REQ_R_SERVICE_MODE_CHOICE (224u)
#define PVED_CLS_MMI_R_MMI_STR_MODE_REQ_R_INITIALIZATION_CHOICE (240u)
#define PVED_CLS_MMI_R_MMI_STR_MODE_REQ_R_SAFE_STATE_CHOICE (255u)

#define PVED_CLS_MMI_R_MMI_LOCKOUT_AUX_R_AUX_STEERING_ALLOWED_CHOICE (0u)
#define PVED_CLS_MMI_R_MMI_LOCKOUT_AUX_R_AUX__STEERING_PROHOBITED_CHOICE (1u)
#define PVED_CLS_MMI_R_MMI_LOCKOUT_AUX_R_ERROR_CONDITION_CHOICE (2u)
#define PVED_CLS_MMI_R_MMI_LOCKOUT_AUX_R_INFORMATION_NOT_AVAILABLE_CHOICE (3u)

#define PVED_CLS_MMI_R_MMI_LOCKOUT_GPS_R_NO_GPS_RECEIVER_SELECTED__GPS_STEERING_PROHIBITED__CHOICE (0u)
#define PVED_CLS_MMI_R_MMI_LOCKOUT_GPS_R_GPS_RECEIVER_SELECTED_CHOICE (1u)
#define PVED_CLS_MMI_R_MMI_LOCKOUT_GPS_R_GPS2_RECEIVER_SELECTED_CHOICE (2u)
#define PVED_CLS_MMI_R_MMI_LOCKOUT_GPS_R_RESERVED_CHOICE (3u)

#define PVED_CLS_MMI_R_MMI_AUX_MODE_REQ_R_AUX__PROGRAM_1_CHOICE (48u)
#define PVED_CLS_MMI_R_MMI_AUX_MODE_REQ_R_AUX__PROGRAM_2_CHOICE (49u)
#define PVED_CLS_MMI_R_MMI_AUX_MODE_REQ_R_AUX__PROGRAM_3_CHOICE (50u)
#define PVED_CLS_MMI_R_MMI_AUX_MODE_REQ_R_AUX__PROGRAM_4_CHOICE (51u)
#define PVED_CLS_MMI_R_MMI_AUX_MODE_REQ_R_AUX__PROGRAM_5_CHOICE (52u)

#define PVED_CLS_MMI_P_MMI_STR_MODE_REQ_P_ON_ROAD_CHOICE (0u)
#define PVED_CLS_MMI_P_MMI_STR_MODE_REQ_P_OFF_ROAD_REACTION_CHOICE (16u)
#define PVED_CLS_MMI_P_MMI_STR_MODE_REQ_P_OFF_ROAD_NON_REACTION_CHOICE (17u)
#define PVED_CLS_MMI_P_MMI_STR_MODE_REQ_P_STW_PROGRAM_1_CHOICE (32u)
#define PVED_CLS_MMI_P_MMI_STR_MODE_REQ_P_STW_PROGRAM_2_CHOICE (33u)
#define PVED_CLS_MMI_P_MMI_STR_MODE_REQ_P_STW_PROGRAM_3_CHOICE (34u)
#define PVED_CLS_MMI_P_MMI_STR_MODE_REQ_P_STW_PROGRAM_4_CHOICE (35u)
#define PVED_CLS_MMI_P_MMI_STR_MODE_REQ_P_STW_PROGRAM_5_CHOICE (36u)

#define PVED_CLS_MMI_P_MMI_LOCKOUT_AUX_P_AUX_STEERING_ALLOWED_CHOICE (0u)
#define PVED_CLS_MMI_P_MMI_LOCKOUT_AUX_P_AUX__STEERING_PROHOBITED_CHOICE (1u)
#define PVED_CLS_MMI_P_MMI_LOCKOUT_AUX_P_ERROR_CONDITION_CHOICE (2u)
#define PVED_CLS_MMI_P_MMI_LOCKOUT_AUX_P_INFORMATION_NOT_AVAILABLE_CHOICE (3u)

#define PVED_CLS_MMI_P_MMI_LOCKOUT_GPS_P_NO_GPS_RECEIVER_SELECTED__GPS_STEERING_PROHIBITED__CHOICE (0u)
#define PVED_CLS_MMI_P_MMI_LOCKOUT_GPS_P_GPS_RECEIVER_SELECTED_CHOICE (1u)
#define PVED_CLS_MMI_P_MMI_LOCKOUT_GPS_P_GPS2_RECEIVER_SELECTED_CHOICE (2u)
#define PVED_CLS_MMI_P_MMI_LOCKOUT_GPS_P_NO_INFORMATION_AVAILABLE_CHOICE (3u)

#define PVED_CLS_MMI_P_MMI_AUX_MODE_REQ_P_AUX__PROGRAM_1_CHOICE (48u)
#define PVED_CLS_MMI_P_MMI_AUX_MODE_REQ_P_AUX__PROGRAM_2_CHOICE (49u)
#define PVED_CLS_MMI_P_MMI_AUX_MODE_REQ_P_AUX__PROGRAM_3_CHOICE (50u)
#define PVED_CLS_MMI_P_MMI_AUX_MODE_REQ_P_AUX__PROGRAM_4_CHOICE (51u)
#define PVED_CLS_MMI_P_MMI_AUX_MODE_REQ_P_AUX__PROGRAM_5_CHOICE (52u)

#define PVED_CLS_VSP_R_VSP_DIR_R_FORWARD__CHOICE (0u)
#define PVED_CLS_VSP_R_VSP_DIR_R_REVERSE_CHOICE (1u)
#define PVED_CLS_VSP_R_VSP_DIR_R_ERROR_CONDITION_CHOICE (2u)
#define PVED_CLS_VSP_R_VSP_DIR_R_INFORMATION__NOT_AVAILABLE_CHOICE (3u)

#define PVED_CLS_VSP_P_VSP_DIR_P_FORWARD_CHOICE (0u)
#define PVED_CLS_VSP_P_VSP_DIR_P_REVERSE_CHOICE (1u)
#define PVED_CLS_VSP_P_VSP_DIR_P_ERROR_CONDITION_CHOICE (2u)
#define PVED_CLS_VSP_P_VSP_DIR_P_INFORMATION_NOT_AVAILABLE_CHOICE (3u)

#define PVED_CLS_STAT_MSG_3_S_SPL_CTRL_STATUS_S_SPOOL_IS_CONTROLLED_ACTIVELY_CHOICE (0u)
#define PVED_CLS_STAT_MSG_3_S_SPL_CTRL_STATUS_S_SPOOL_CONTROL_RELEASED_CHOICE (1u)
#define PVED_CLS_STAT_MSG_3_S_SPL_CTRL_STATUS_S_ERROR_CONDITION_CHOICE (2u)
#define PVED_CLS_STAT_MSG_3_S_SPL_CTRL_STATUS_S_INFORMATION_NOT_AVAILABLE_CHOICE (3u)

#define PVED_CLS_STAT_MSG_3_M_SPL_CTRL_STATUS_M_SPOOL_IS_CONTROLLED_ACTIVELY_CHOICE (0u)
#define PVED_CLS_STAT_MSG_3_M_SPL_CTRL_STATUS_M_SPOOL_CONTROL_RELEASED_CHOICE (1u)
#define PVED_CLS_STAT_MSG_3_M_SPL_CTRL_STATUS_M_ERROR_CONDITION_CHOICE (2u)
#define PVED_CLS_STAT_MSG_3_M_SPL_CTRL_STATUS_M_INFORMATION_NOT_AVAILABLE_CHOICE (3u)

#define PVED_CLS_STAT_MSG_2_S_SRC_CL_WA_SETPOINT_S_RESERVED_0_CHOICE (0u)
#define PVED_CLS_STAT_MSG_2_S_SRC_CL_WA_SETPOINT_S_AUX_CHOICE (1u)
#define PVED_CLS_STAT_MSG_2_S_SRC_CL_WA_SETPOINT_S_RESERVED_2_CHOICE (2u)
#define PVED_CLS_STAT_MSG_2_S_SRC_CL_WA_SETPOINT_S_GPS_CHOICE (3u)

#define PVED_CLS_STAT_MSG_2_S_DOUT_STATE_S_RESERVED_CHOICE (0u)
#define PVED_CLS_STAT_MSG_2_S_DOUT_STATE_S_IN_GOOD_CONDITION_CHOICE (1u)
#define PVED_CLS_STAT_MSG_2_S_DOUT_STATE_S_ERROR_CONDITION_CHOICE (2u)
#define PVED_CLS_STAT_MSG_2_S_DOUT_STATE_S_INFORMATION_NOT_AVAILABLE_CHOICE (3u)

#define PVED_CLS_STAT_MSG_2_S_STATE_CSS_S_OFF_CHOICE (0u)
#define PVED_CLS_STAT_MSG_2_S_STATE_CSS_S_ON_CHOICE (1u)
#define PVED_CLS_STAT_MSG_2_S_STATE_CSS_S_ERROR_CONDITION_CHOICE (2u)
#define PVED_CLS_STAT_MSG_2_S_STATE_CSS_S_INFORMATION_NOT_AVAILABLE_CHOICE (3u)

#define PVED_CLS_STAT_MSG_2_M_SRC_CL_WA_SETPOINT_M_RESERVED_0_CHOICE (0u)
#define PVED_CLS_STAT_MSG_2_M_SRC_CL_WA_SETPOINT_M_AUX_CHOICE (1u)
#define PVED_CLS_STAT_MSG_2_M_SRC_CL_WA_SETPOINT_M_RESERVED_2_CHOICE (2u)
#define PVED_CLS_STAT_MSG_2_M_SRC_CL_WA_SETPOINT_M_GPS_CHOICE (3u)

#define PVED_CLS_STAT_MSG_2_M_DOUT_STATE_M_RESERVED_CHOICE (0u)
#define PVED_CLS_STAT_MSG_2_M_DOUT_STATE_M_IN_GOOD_CONDITION_CHOICE (1u)
#define PVED_CLS_STAT_MSG_2_M_DOUT_STATE_M_ERROR_CONDITION_CHOICE (2u)
#define PVED_CLS_STAT_MSG_2_M_DOUT_STATE_M_INFORMATION_NOT_AVAILABLE_CHOICE (3u)

#define PVED_CLS_STAT_MSG_2_M_STATE_CSS_M_OFF_CHOICE (0u)
#define PVED_CLS_STAT_MSG_2_M_STATE_CSS_M_ON_CHOICE (1u)
#define PVED_CLS_STAT_MSG_2_M_STATE_CSS_M_ERROR_CONDITION_CHOICE (2u)
#define PVED_CLS_STAT_MSG_2_M_STATE_CSS_M_INFORMATION_NOT_AVAILABLE_CHOICE (3u)

#define PVED_CLS_STAT_MSG_OP_S_OPERATION_STATE_S_ON_ROAD_CHOICE (0u)
#define PVED_CLS_STAT_MSG_OP_S_OPERATION_STATE_S_OFF_ROAD_REACTION_CHOICE (16u)
#define PVED_CLS_STAT_MSG_OP_S_OPERATION_STATE_S_OFF_ROAD_NON_REACTION_CHOICE (17u)
#define PVED_CLS_STAT_MSG_OP_S_OPERATION_STATE_S_STW_PROGRAM_1_CHOICE (32u)
#define PVED_CLS_STAT_MSG_OP_S_OPERATION_STATE_S_STW_PROGRAM_2_CHOICE (33u)
#define PVED_CLS_STAT_MSG_OP_S_OPERATION_STATE_S_STW_PROGRAM_3_CHOICE (34u)
#define PVED_CLS_STAT_MSG_OP_S_OPERATION_STATE_S_STW_PROGRAM_4_CHOICE (35u)
#define PVED_CLS_STAT_MSG_OP_S_OPERATION_STATE_S_STW_PROGRAM_5_CHOICE (36u)
#define PVED_CLS_STAT_MSG_OP_S_OPERATION_STATE_S_AUX__PROGRAM_1_CHOICE (48u)
#define PVED_CLS_STAT_MSG_OP_S_OPERATION_STATE_S_AUX__PROGRAM_2_CHOICE (49u)
#define PVED_CLS_STAT_MSG_OP_S_OPERATION_STATE_S_AUX__PROGRAM_3_CHOICE (50u)
#define PVED_CLS_STAT_MSG_OP_S_OPERATION_STATE_S_AUX__PROGRAM_4_CHOICE (51u)
#define PVED_CLS_STAT_MSG_OP_S_OPERATION_STATE_S_AUX__PROGRAM_5_CHOICE (52u)
#define PVED_CLS_STAT_MSG_OP_S_OPERATION_STATE_S_GPS_STEERING_CHOICE (64u)
#define PVED_CLS_STAT_MSG_OP_S_OPERATION_STATE_S_GPS2_STEERING_CHOICE (65u)
#define PVED_CLS_STAT_MSG_OP_S_OPERATION_STATE_S_OFF__ROAD_SAFETY__CHECKS_CHOICE (208u)
#define PVED_CLS_STAT_MSG_OP_S_OPERATION_STATE_S_SERVICE_MODE____DIRECT_O_P_CNTRL_CHOICE (224u)
#define PVED_CLS_STAT_MSG_OP_S_OPERATION_STATE_S_SERVICE_MODE___WAS__CALIBRATION_CHOICE (225u)
#define PVED_CLS_STAT_MSG_OP_S_OPERATION_STATE_S_SERVICE_MODE____SPOOL__CALIBRATION_CHOICE (226u)
#define PVED_CLS_STAT_MSG_OP_S_OPERATION_STATE_S_SERVICE_MOD__JOYSTICK__CALIBRATION_CHOICE (227u)
#define PVED_CLS_STAT_MSG_OP_S_OPERATION_STATE_S_INITIALIZATION_CHOICE (240u)
#define PVED_CLS_STAT_MSG_OP_S_OPERATION_STATE_S_SAFE_STATE_CHOICE (255u)

#define PVED_CLS_STAT_MSG_OP_S_LOCKOUT_AUX_S_AUX_STEERING_ALLOWED_CHOICE (0u)
#define PVED_CLS_STAT_MSG_OP_S_LOCKOUT_AUX_S_AUX__STEERING_PROHOBITED_CHOICE (1u)
#define PVED_CLS_STAT_MSG_OP_S_LOCKOUT_AUX_S_ERROR_CONDITION_CHOICE (2u)
#define PVED_CLS_STAT_MSG_OP_S_LOCKOUT_AUX_S_INFORMATION_NOT_AVAILABLE_CHOICE (3u)

#define PVED_CLS_STAT_MSG_OP_S_LOCKOUT_EH_STEERING_S_EH_STEERING_ALLOWED_CHOICE (0u)
#define PVED_CLS_STAT_MSG_OP_S_LOCKOUT_EH_STEERING_S_EH_STEERING_PROHIBITED_CHOICE (1u)
#define PVED_CLS_STAT_MSG_OP_S_LOCKOUT_EH_STEERING_S_ERROR_CONDITION_CHOICE (2u)
#define PVED_CLS_STAT_MSG_OP_S_LOCKOUT_EH_STEERING_S_INFORMATION_NOT_AVAILABLE_CHOICE (3u)

#define PVED_CLS_STAT_MSG_OP_S_LOCKOUT_PROGRAM_CHANGE_S_PROGRAM_CHANGES__ALLOWED_CHOICE (0u)
#define PVED_CLS_STAT_MSG_OP_S_LOCKOUT_PROGRAM_CHANGE_S_PROGRAM_CHANGES_PROHIBITED_CHOICE (1u)
#define PVED_CLS_STAT_MSG_OP_S_LOCKOUT_PROGRAM_CHANGE_S_ERROR__CONDITION_CHOICE (2u)
#define PVED_CLS_STAT_MSG_OP_S_LOCKOUT_PROGRAM_CHANGE_S_INFORMATION_NOT_AVAILABLE_CHOICE (3u)

#define PVED_CLS_STAT_MSG_OP_S_LOCKOUT_DEVICE_CHANGE_S_STEERING_DEV_CHANGES_ALLOWED__CHOICE (0u)
#define PVED_CLS_STAT_MSG_OP_S_LOCKOUT_DEVICE_CHANGE_S_STEERING_DEV_CHANGES_PROHIBITED_CHOICE (1u)
#define PVED_CLS_STAT_MSG_OP_S_LOCKOUT_DEVICE_CHANGE_S_ERROR__CONDITION_CHOICE (2u)
#define PVED_CLS_STAT_MSG_OP_S_LOCKOUT_DEVICE_CHANGE_S_INFORMATION_NOT_AVAILABLE_CHOICE (3u)

#define PVED_CLS_STAT_MSG_OP_S_LOCKOUT_GPS_S_NO_GPS_RECEIVER_SELECTED_CHOICE (0u)
#define PVED_CLS_STAT_MSG_OP_S_LOCKOUT_GPS_S_GPS__STEERING_SELECTED_CHOICE (1u)
#define PVED_CLS_STAT_MSG_OP_S_LOCKOUT_GPS_S_GPS_2__STEERING_SELECTED_CHOICE (2u)
#define PVED_CLS_STAT_MSG_OP_S_LOCKOUT_GPS_S_RESERVED_CHOICE (3u)

#define PVED_CLS_STAT_MSG_OP_S_SERVICE_MODE_STATE_S_DIRECT_OUTPUT_CONTROL_RESET_CHOICE (0u)
#define PVED_CLS_STAT_MSG_OP_S_SERVICE_MODE_STATE_S_DIRECT_OUTPUT_CONTROL__CHOICE (1u)
#define PVED_CLS_STAT_MSG_OP_S_SERVICE_MODE_STATE_S_WAS_CALIBRATION__RESET_CHOICE (16u)
#define PVED_CLS_STAT_MSG_OP_S_SERVICE_MODE_STATE_S_WAS_CALIBRATION_IN_PROGRESS_CHOICE (17u)
#define PVED_CLS_STAT_MSG_OP_S_SERVICE_MODE_STATE_S_WAS_CALIBRATION_COUNTER_UPDATE_CHOICE (29u)
#define PVED_CLS_STAT_MSG_OP_S_SERVICE_MODE_STATE_S_WAS_CALIBRATION_FAILURE_CHOICE (30u)
#define PVED_CLS_STAT_MSG_OP_S_SERVICE_MODE_STATE_S_WAS_CALIBRATION_COMPLETE_CHOICE (31u)
#define PVED_CLS_STAT_MSG_OP_S_SERVICE_MODE_STATE_S_SPOOL_CALIBRATION_RESET_CHOICE (32u)
#define PVED_CLS_STAT_MSG_OP_S_SERVICE_MODE_STATE_S_SPOOL_CALIBRATION_INACTIVE_CHOICE (33u)
#define PVED_CLS_STAT_MSG_OP_S_SERVICE_MODE_STATE_S_SPOOL_CALIBRATION_GETTING_ARMED_CHOICE (34u)
#define PVED_CLS_STAT_MSG_OP_S_SERVICE_MODE_STATE_S_SPOOL_CALIBRATION_ARMED_CHOICE (35u)
#define PVED_CLS_STAT_MSG_OP_S_SERVICE_MODE_STATE_S_SPOOL_CALIBRATION_IN_PROGRESS_CHOICE (36u)
#define PVED_CLS_STAT_MSG_OP_S_SERVICE_MODE_STATE_S_SPOOL_PARAM_PLAUSIBILITY_CHECK_CHOICE (37u)
#define PVED_CLS_STAT_MSG_OP_S_SERVICE_MODE_STATE_S_SPOOL_PARAMETERS_READY_TO_UPDATE_CHOICE (38u)
#define PVED_CLS_STAT_MSG_OP_S_SERVICE_MODE_STATE_S_SPOOL_PARAMETERS_UPDATE_CHOICE (39u)
#define PVED_CLS_STAT_MSG_OP_S_SERVICE_MODE_STATE_S_SPOOL_CALIBRATION_COUNTER_UPDATE_CHOICE (45u)
#define PVED_CLS_STAT_MSG_OP_S_SERVICE_MODE_STATE_S_SPOOL_CALIBRATION_FAILURE_CHOICE (46u)
#define PVED_CLS_STAT_MSG_OP_S_SERVICE_MODE_STATE_S_SPOOL_CALIBRATION_COMPLETE_CHOICE (47u)
#define PVED_CLS_STAT_MSG_OP_S_SERVICE_MODE_STATE_S_JOYSTICK_CALIBRATION__RESET_CHOICE (48u)
#define PVED_CLS_STAT_MSG_OP_S_SERVICE_MODE_STATE_S_JOYSTICK_CALIBRATION_IN_PROGRESS_CHOICE (49u)
#define PVED_CLS_STAT_MSG_OP_S_SERVICE_MODE_STATE_S_JOYSTICK_CALIBRATION_CNTR_UPDATE_CHOICE (61u)
#define PVED_CLS_STAT_MSG_OP_S_SERVICE_MODE_STATE_S_JOYSTICK_CALIBRATION_FAILURE_CHOICE (62u)
#define PVED_CLS_STAT_MSG_OP_S_SERVICE_MODE_STATE_S_JOYSTICK_CALIBRATION_COMPLETE_CHOICE (63u)
#define PVED_CLS_STAT_MSG_OP_S_SERVICE_MODE_STATE_S_NO_ANALOG_JOYSTICK_CONFIGURED_CHOICE (253u)
#define PVED_CLS_STAT_MSG_OP_S_SERVICE_MODE_STATE_S_NO_WHEEL_ANGLE_SENSOR_CONFIGURED_CHOICE (254u)
#define PVED_CLS_STAT_MSG_OP_S_SERVICE_MODE_STATE_S_INFORMATION_NOT_AVAILABLE__CHOICE (255u)

#define PVED_CLS_STAT_MSG_OP_M_OPERATION_STATE_M_ON_ROAD_CHOICE (0u)
#define PVED_CLS_STAT_MSG_OP_M_OPERATION_STATE_M_OFF_ROAD_REACTION_CHOICE (16u)
#define PVED_CLS_STAT_MSG_OP_M_OPERATION_STATE_M_OFF_ROAD_NON_REACTION_CHOICE (17u)
#define PVED_CLS_STAT_MSG_OP_M_OPERATION_STATE_M_STW_PROGRAM_1_CHOICE (32u)
#define PVED_CLS_STAT_MSG_OP_M_OPERATION_STATE_M_STW_PROGRAM_2_CHOICE (33u)
#define PVED_CLS_STAT_MSG_OP_M_OPERATION_STATE_M_STW_PROGRAM_3_CHOICE (34u)
#define PVED_CLS_STAT_MSG_OP_M_OPERATION_STATE_M_STW_PROGRAM_4_CHOICE (35u)
#define PVED_CLS_STAT_MSG_OP_M_OPERATION_STATE_M_STW_PROGRAM_5_CHOICE (36u)
#define PVED_CLS_STAT_MSG_OP_M_OPERATION_STATE_M_AUX__PROGRAM_1_CHOICE (48u)
#define PVED_CLS_STAT_MSG_OP_M_OPERATION_STATE_M_AUX__PROGRAM_2_CHOICE (49u)
#define PVED_CLS_STAT_MSG_OP_M_OPERATION_STATE_M_AUX__PROGRAM_3_CHOICE (50u)
#define PVED_CLS_STAT_MSG_OP_M_OPERATION_STATE_M_AUX__PROGRAM_4_CHOICE (51u)
#define PVED_CLS_STAT_MSG_OP_M_OPERATION_STATE_M_AUX__PROGRAM_5_CHOICE (52u)
#define PVED_CLS_STAT_MSG_OP_M_OPERATION_STATE_M_GPS_STEERING_CHOICE (64u)
#define PVED_CLS_STAT_MSG_OP_M_OPERATION_STATE_M_GPS2_STEERING_CHOICE (65u)
#define PVED_CLS_STAT_MSG_OP_M_OPERATION_STATE_M_OFF__ROAD_SAFETY__CHECKS_CHOICE (208u)
#define PVED_CLS_STAT_MSG_OP_M_OPERATION_STATE_M_SERVICE_MODE____DIRECT_O_P_CNTRL_CHOICE (224u)
#define PVED_CLS_STAT_MSG_OP_M_OPERATION_STATE_M_SERVICE_MODE___WAS__CALIBRATION_CHOICE (225u)
#define PVED_CLS_STAT_MSG_OP_M_OPERATION_STATE_M_SERVICE_MODE____SPOOL__CALIBRATION_CHOICE (226u)
#define PVED_CLS_STAT_MSG_OP_M_OPERATION_STATE_M_SERVICE_MOD__JOYSTICK__CALIBRATION_CHOICE (227u)
#define PVED_CLS_STAT_MSG_OP_M_OPERATION_STATE_M_INITIALIZATION_CHOICE (240u)
#define PVED_CLS_STAT_MSG_OP_M_OPERATION_STATE_M_SAFE_STATE_CHOICE (255u)

#define PVED_CLS_STAT_MSG_OP_M_LOCKOUT_AUX_M_AUX_STEERING_ALLOWED_CHOICE (0u)
#define PVED_CLS_STAT_MSG_OP_M_LOCKOUT_AUX_M_AUX__STEERING_PROHOBITED_CHOICE (1u)
#define PVED_CLS_STAT_MSG_OP_M_LOCKOUT_AUX_M_ERROR_CONDITION_CHOICE (2u)
#define PVED_CLS_STAT_MSG_OP_M_LOCKOUT_AUX_M_INFORMATION_NOT_AVAILABLE_CHOICE (3u)

#define PVED_CLS_STAT_MSG_OP_M_LOCKOUT_EH_STEERING_M_EH_STEERING_ALLOWED_CHOICE (0u)
#define PVED_CLS_STAT_MSG_OP_M_LOCKOUT_EH_STEERING_M_EH_STEERING_PROHIBITED_CHOICE (1u)
#define PVED_CLS_STAT_MSG_OP_M_LOCKOUT_EH_STEERING_M_ERROR_CONDITION_CHOICE (2u)
#define PVED_CLS_STAT_MSG_OP_M_LOCKOUT_EH_STEERING_M_INFORMATION_NOT_AVAILABLE_CHOICE (3u)

#define PVED_CLS_STAT_MSG_OP_M_LOCKOUT_PROGRAM_CHANGE_M_PROGRAM_CHANGES_ALLOWED__CHOICE (0u)
#define PVED_CLS_STAT_MSG_OP_M_LOCKOUT_PROGRAM_CHANGE_M_PROGRAM_CHANGES_PROHIBITED_CHOICE (1u)
#define PVED_CLS_STAT_MSG_OP_M_LOCKOUT_PROGRAM_CHANGE_M_ERROR__CONDITION_CHOICE (2u)
#define PVED_CLS_STAT_MSG_OP_M_LOCKOUT_PROGRAM_CHANGE_M_INFORMATION_NOT_AVAILABLE_CHOICE (3u)

#define PVED_CLS_STAT_MSG_OP_M_LOCKOUT_DEVICE_CHANGE_M_STEERING_DEV_CHANGES_ALLOWED__CHOICE (0u)
#define PVED_CLS_STAT_MSG_OP_M_LOCKOUT_DEVICE_CHANGE_M_STEERING_DEV_CHANGES_PROHIBITED_CHOICE (1u)
#define PVED_CLS_STAT_MSG_OP_M_LOCKOUT_DEVICE_CHANGE_M_ERROR__CONDITION_CHOICE (2u)
#define PVED_CLS_STAT_MSG_OP_M_LOCKOUT_DEVICE_CHANGE_M_INFORMATION_NOT_AVAILABLE_CHOICE (3u)

#define PVED_CLS_STAT_MSG_OP_M_LOCKOUT_GPS_M_NO_GPS_RECEIVER_SELECTED_CHOICE (0u)
#define PVED_CLS_STAT_MSG_OP_M_LOCKOUT_GPS_M_GPS___STEERING_SELECTED_CHOICE (1u)
#define PVED_CLS_STAT_MSG_OP_M_LOCKOUT_GPS_M_GPS_2__STEERING_SELECTED_CHOICE (2u)
#define PVED_CLS_STAT_MSG_OP_M_LOCKOUT_GPS_M_RESERVED_CHOICE (3u)

#define PVED_CLS_STAT_MSG_OP_M_SERVICE_MODE_STATE_M_DIRECT_OUTPUT_CONTROL_RESET_CHOICE (0u)
#define PVED_CLS_STAT_MSG_OP_M_SERVICE_MODE_STATE_M_DIRECT_OUTPUT_CONTROL__CHOICE (1u)
#define PVED_CLS_STAT_MSG_OP_M_SERVICE_MODE_STATE_M_WAS_CALIBRATION__RESET_CHOICE (16u)
#define PVED_CLS_STAT_MSG_OP_M_SERVICE_MODE_STATE_M_WAS_CALIBRATION_IN_PROGRESS_CHOICE (17u)
#define PVED_CLS_STAT_MSG_OP_M_SERVICE_MODE_STATE_M_WAS_CALIBRATION_COUNTER_UPDATE_CHOICE (29u)
#define PVED_CLS_STAT_MSG_OP_M_SERVICE_MODE_STATE_M_WAS_CALIBRATION_FAILURE_CHOICE (30u)
#define PVED_CLS_STAT_MSG_OP_M_SERVICE_MODE_STATE_M_WAS_CALIBRATION_COMPLETE_CHOICE (31u)
#define PVED_CLS_STAT_MSG_OP_M_SERVICE_MODE_STATE_M_SPOOL_CALIBRATION_RESET_CHOICE (32u)
#define PVED_CLS_STAT_MSG_OP_M_SERVICE_MODE_STATE_M_SPOOL_CALIBRATION_INACTIVE_CHOICE (33u)
#define PVED_CLS_STAT_MSG_OP_M_SERVICE_MODE_STATE_M_SPOOL_CALIBRATION_GETTING_ARMED_CHOICE (34u)
#define PVED_CLS_STAT_MSG_OP_M_SERVICE_MODE_STATE_M_SPOOL_CALIBRATION_ARMED_CHOICE (35u)
#define PVED_CLS_STAT_MSG_OP_M_SERVICE_MODE_STATE_M_SPOOL_CALIBRATION_IN_PROGRESS_CHOICE (36u)
#define PVED_CLS_STAT_MSG_OP_M_SERVICE_MODE_STATE_M_SPOOL_PARAM_PLAUSIBILITY_CHECK_CHOICE (37u)
#define PVED_CLS_STAT_MSG_OP_M_SERVICE_MODE_STATE_M_SPOOL_PARAMETERS_READY_TO_UPDATE_CHOICE (38u)
#define PVED_CLS_STAT_MSG_OP_M_SERVICE_MODE_STATE_M_SPOOL_PARAMETERS_UPDATE_CHOICE (39u)
#define PVED_CLS_STAT_MSG_OP_M_SERVICE_MODE_STATE_M_SPOOL_CALIBRATION_COUNTER_UPDATE_CHOICE (45u)
#define PVED_CLS_STAT_MSG_OP_M_SERVICE_MODE_STATE_M_SPOOL_CALIBRATION_FAILURE_CHOICE (46u)
#define PVED_CLS_STAT_MSG_OP_M_SERVICE_MODE_STATE_M_SPOOL_CALIBRATION_COMPLETE_CHOICE (47u)
#define PVED_CLS_STAT_MSG_OP_M_SERVICE_MODE_STATE_M_JOYSTICK_CALIBRATION__RESET_CHOICE (48u)
#define PVED_CLS_STAT_MSG_OP_M_SERVICE_MODE_STATE_M_JOYSTICK_CALIBRATION_IN_PROGRESS_CHOICE (49u)
#define PVED_CLS_STAT_MSG_OP_M_SERVICE_MODE_STATE_M_JOYSTICK_CALIBRATION_CNTR_UPDATE_CHOICE (61u)
#define PVED_CLS_STAT_MSG_OP_M_SERVICE_MODE_STATE_M_JOYSTICK_CALIBRATION_FAILURE_CHOICE (62u)
#define PVED_CLS_STAT_MSG_OP_M_SERVICE_MODE_STATE_M_JOYSTICK_CALIBRATION_COMPLETE_CHOICE (63u)
#define PVED_CLS_STAT_MSG_OP_M_SERVICE_MODE_STATE_M_NO_ANALOG_JOYSTICK_CONFIGURED_CHOICE (253u)
#define PVED_CLS_STAT_MSG_OP_M_SERVICE_MODE_STATE_M_NO_WHEEL_ANGLE_SENSOR_CONFIGURED_CHOICE (254u)
#define PVED_CLS_STAT_MSG_OP_M_SERVICE_MODE_STATE_M_INFORMATION_NOT_AVAILABLE__CHOICE (255u)

/**
 * Signals in message STAT_MSG_8_S.
 *
 * Main_C
 *
 * All signal values are as on the CAN bus.
 */
struct pved_cls_stat_msg_8_s_t {
    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t imd_status_s;

    /**
     * Range: 0..255 (0..255 10ms)
     * Scale: 1
     * Offset: 0
     */
    uint8_t imd_confidence_counter_s;

    /**
     * Range: 1000..3000 (0..2000 10um)
     * Scale: 1
     * Offset: -1000
     */
    uint16_t svc_integral_part_s;
};

/**
 * Signals in message STAT_MSG_8_M.
 *
 * Main_C
 *
 * All signal values are as on the CAN bus.
 */
struct pved_cls_stat_msg_8_m_t {
    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t imd_status_m;

    /**
     * Range: 0..255 (0..255 10ms)
     * Scale: 1
     * Offset: 0
     */
    uint8_t imd_confidence_counter_m;

    /**
     * Range: 1000..3000 (0..2000 10um)
     * Scale: 1
     * Offset: -1000
     */
    uint16_t svc_integral_part_m;
};

/**
 * Signals in message ELOBAU_EJM2_R.
 *
 * All signal values are as on the CAN bus.
 */
struct pved_cls_elobau_ejm2_r_t {
    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t elobau_neutral_r;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t elobau_left_r;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t elobau_right_r;

    /**
     * Range: 0..1000 (0..1000 0.1%)
     * Scale: 1
     * Offset: 0
     */
    uint16_t elobau_pos_r;
};

/**
 * Signals in message ELOBAU_EJM1_R.
 *
 * All signal values are as on the CAN bus.
 */
struct pved_cls_elobau_ejm1_r_t {
    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t elobau_neutral_r;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t elobau_left_r;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t elobau_right_r;

    /**
     * Range: 0..1000 (0..1000 0.1%)
     * Scale: 1
     * Offset: 0
     */
    uint16_t elobau_pos_r;
};

/**
 * Signals in message ELOBAU_EJM2_P.
 *
 * All signal values are as on the CAN bus.
 */
struct pved_cls_elobau_ejm2_p_t {
    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t elobau_neutral_p;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t elobau_left_p;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t elobau_right_p;

    /**
     * Range: 0..1000 (0..1000 0.1%)
     * Scale: 1
     * Offset: 0
     */
    uint16_t elobau_pos_p;
};

/**
 * Signals in message ELOBAU_EJM1_P.
 *
 * All signal values are as on the CAN bus.
 */
struct pved_cls_elobau_ejm1_p_t {
    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t elobau_neutral_p;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t elobau_left_p;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t elobau_right_p;

    /**
     * Range: 0..1000 (0..1000 0.1%)
     * Scale: 1
     * Offset: 0
     */
    uint16_t elobau_pos_p;
};

/**
 * Signals in message ELOBAU_BJM2_R.
 *
 * All signal values are as on the CAN bus.
 */
struct pved_cls_elobau_bjm2_r_t {
    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t elobau_neutral_r;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t elobau_left_r;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t elobau_right_r;

    /**
     * Range: 0..1000 (0..1000 0.1%)
     * Scale: 1
     * Offset: 0
     */
    uint16_t elobau_pos_r;
};

/**
 * Signals in message ELOBAU_BJM1_R.
 *
 * All signal values are as on the CAN bus.
 */
struct pved_cls_elobau_bjm1_r_t {
    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t elobau_neutral_r;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t elobau_left_r;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t elobau_right_r;

    /**
     * Range: 0..1000 (0..1000 0.1%)
     * Scale: 1
     * Offset: 0
     */
    uint16_t elobau_pos_r;
};

/**
 * Signals in message ELOBAU_BJM2_P.
 *
 * All signal values are as on the CAN bus.
 */
struct pved_cls_elobau_bjm2_p_t {
    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t elobau_neutral_p;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t elobau_left_p;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t elobau_right_p;

    /**
     * Range: 0..1000 (0..1000 0.1%)
     * Scale: 1
     * Offset: 0
     */
    uint16_t elobau_pos_p;
};

/**
 * Signals in message ELOBAU_BJM1_P.
 *
 * All signal values are as on the CAN bus.
 */
struct pved_cls_elobau_bjm1_p_t {
    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t elobau_neutral_p;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t elobau_left_p;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t elobau_right_p;

    /**
     * Range: 0..1000 (0..1000 0.1%)
     * Scale: 1
     * Offset: 0
     */
    uint16_t elobau_pos_p;
};

/**
 * Signals in message STAT_MSG_7_S.
 *
 * Safe_C
 *
 * All signal values are as on the CAN bus.
 */
struct pved_cls_stat_msg_7_s_t {
    /**
     * Range: 0..2000 (-1000..1000 0.1%)
     * Scale: 1
     * Offset: -1000
     */
    uint16_t joy1_s;

    /**
     * Range: 0..2000 (-1000..1000 0.1%)
     * Scale: 1
     * Offset: -1000
     */
    uint16_t joy2_s;

    /**
     * Range: 0..2000 (-1000..1000 0.1%)
     * Scale: 1
     * Offset: -1000
     */
    uint16_t joy_flw_req_s;
};

/**
 * Signals in message STAT_MSG_7_M.
 *
 * Main_C
 *
 * All signal values are as on the CAN bus.
 */
struct pved_cls_stat_msg_7_m_t {
    /**
     * Range: 0..2000 (-1000..1000 0.1%)
     * Scale: 1
     * Offset: -1000
     */
    uint16_t joy1_m;

    /**
     * Range: 0..2000 (-1000..1000 0.1%)
     * Scale: 1
     * Offset: -1000
     */
    uint16_t joy2_m;

    /**
     * Range: 0..2000 (-1000..1000 0.1%)
     * Scale: 1
     * Offset: -1000
     */
    uint16_t joy_flw_req_m;
};

/**
 * Signals in message GPS2_GMS.
 *
 * Main_C
 *
 * All signal values are as on the CAN bus.
 */
struct pved_cls_gps2_gms_t {
    /**
     * Range: 0..64256 (-8032..8032 1/km)
     * Scale: 0.25
     * Offset: -8032
     */
    uint16_t gps2_estimated_curvature;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gps2_system_lockout;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gps2_system_ready;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gps2_str_input_pos_status;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gps2_req_reset;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gps2_limit_status;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gps2_exit_reason;
};

/**
 * Signals in message GPS2_GMC.
 *
 * Main_C
 *
 * All signal values are as on the CAN bus.
 */
struct pved_cls_gps2_gmc_t {
    /**
     * Range: 0..64256 (-8032..8032 1/km)
     * Scale: 0.25
     * Offset: -8032
     */
    uint16_t gps2_curvature_cmd;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gps2_str_cmd_status;
};

/**
 * Signals in message J1939_ACK_S.
 *
 * Safe_E
 *
 * All signal values are as on the CAN bus.
 */
struct pved_cls_j1939_ack_s_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t control_byte_s;
};

/**
 * Signals in message J1939_ACK_M.
 *
 * Main_E
 *
 * All signal values are as on the CAN bus.
 */
struct pved_cls_j1939_ack_m_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t control_byte_m;
};

/**
 * Signals in message REQ_PGN_S.
 *
 * Safe_E
 *
 * All signal values are as on the CAN bus.
 */
struct pved_cls_req_pgn_s_t {
    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t req_pgn_msb_s;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t req_pgn_lsb_s;
};

/**
 * Signals in message REQ_PGN_M.
 *
 * Main_E
 *
 * All signal values are as on the CAN bus.
 */
struct pved_cls_req_pgn_m_t {
    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t req_pgn_msb_m;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t req_pgn_lsb_m;
};

/**
 * Signals in message DM1_S.
 *
 * Safe_C
 *
 * All signal values are as on the CAN bus.
 */
struct pved_cls_dm1_s_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message DM1_M.
 *
 * Main_C
 *
 * All signal values are as on the CAN bus.
 */
struct pved_cls_dm1_m_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message SER_TOOL_REPLY_S.
 *
 * Safe_E
 *
 * All signal values are as on the CAN bus.
 */
struct pved_cls_ser_tool_reply_s_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ser_tool_reply_xid_s;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reply_param_data_length_s;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reply_calib_err_code_s;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reply_consistency_chk_s;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reply_input_status_s;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reply_result_from_ecu_s;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reply_sensor5_v_state_s;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reply_pos_captured_s;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reply_was_captured_s;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reply_css_state_s;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t reply_param_address_s;

    /**
     * Range: 0..65535 (0..65535 mV)
     * Scale: 1
     * Offset: 0
     */
    uint16_t reply_ad1_s;

    /**
     * Range: 0..2000 (-1000..1000 10um)
     * Scale: 1
     * Offset: -1000
     */
    uint16_t reply_req_spool_pos_s;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reply_wa_mov_status_r_s;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reply_wa_mov_status_l_s;

    /**
     * Range: 0..255 (0..255 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t reply_calibration_progress_s;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3822_s;

    /**
     * Range: 1..25 (1..25 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3814_s;

    /**
     * Range: 5..400 (5..400 dDeg)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3812_s;

    /**
     * Range: 1..10 (1..10 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3811_s;

    /**
     * Range: 1..10 (1..10 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3810_s;

    /**
     * Range: 10..600 (10..600 100ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3808_s;

    /**
     * Range: 10..600 (10..600 100ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3806_s;

    /**
     * Range: 5..400 (5..400 dDeg)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3804_s;

    /**
     * Range: 50..300 (50..300 10um)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3802_s;

    /**
     * Range: 0..60 (0..60 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3801_s;

    /**
     * Range: 0..300 (0..300 10um)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3799_s;

    /**
     * Range: 0..300 (0..300 10um)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3797_s;

    /**
     * Range: 0..5000 (0..5000 mv)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3795_s;

    /**
     * Range: 0..2500 (0..2500 mv)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3793_s;

    /**
     * Range: 0..5000 (0..5000 mv)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3791_s;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3789_s;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3776_s;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3775_s;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3774_s;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3773_s;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3772_s;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3771_s;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3769_s;

    /**
     * Range: 0..45 (0..45 deg)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3719_s;

    /**
     * Range: 5..200 (5..200 dHz)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3718_s;

    /**
     * Range: 1..1000 (1..1000 IR)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3716_s;

    /**
     * Range: 1..1000 (1..1000 IR)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3714_s;

    /**
     * Range: 0..1000 (0..1000 IR)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3712_s;

    /**
     * Range: 0..1000 (0..1000 IR)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3710_s;

    /**
     * Range: 100..1000 (100..1000 IR)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3708_s;

    /**
     * Range: 1..180 (1..180 Deg)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3706_s;

    /**
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3705_s;

    /**
     * Range: 1..1000 (1..1000 IR)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3703_s;

    /**
     * Range: 1..1000 (1..1000 IR)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3701_s;

    /**
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3700_s;

    /**
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3699_s;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3698_s;

    /**
     * Range: 0..100 (0..100 kmph)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3697_s;

    /**
     * Range: 0..100 (0..100 kmph)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3696_s;

    /**
     * Range: 0..1000 (0..1000 IR)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3694_s;

    /**
     * Range: 0..1000 (0..1000 IR)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3692_s;

    /**
     * Range: 0..1000 (0..1000 IR)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3690_s;

    /**
     * Range: 1..100 (1..100 kmph)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3689_s;

    /**
     * Range: 1..100 (1..100 kmph)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3688_s;

    /**
     * Range: 10..800 (10..800 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3686_s;

    /**
     * Range: 10..800 (10..800 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3684_s;

    /**
     * Range: 10..800 (10..800 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3682_s;

    /**
     * Range: 1..100 (1..100 kmph)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3681_s;

    /**
     * Range: 1..100 (1..100 kmph)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3680_s;

    /**
     * Range: 10..800 (10..800 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3678_s;

    /**
     * Range: 10..800 (10..800 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3676_s;

    /**
     * Range: 10..800 (10..800 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3674_s;

    /**
     * Range: 1..100 (1..100 kmph)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3673_s;

    /**
     * Range: 1..100 (1..100 kmph)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3672_s;

    /**
     * Range: 10..800 (10..800 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3670_s;

    /**
     * Range: 10..800 (10..800 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3668_s;

    /**
     * Range: 10..800 (10..800 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3666_s;

    /**
     * Range: 1..100 (1..100 kmph)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3665_s;

    /**
     * Range: 1..100 (1..100 kmph)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3664_s;

    /**
     * Range: 10..800 (10..800 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3662_s;

    /**
     * Range: 10..800 (10..800 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3660_s;

    /**
     * Range: 10..800 (10..800 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3658_s;

    /**
     * Range: 1..100 (1..100 kmph)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3657_s;

    /**
     * Range: 1..100 (1..100 kmph)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3656_s;

    /**
     * Range: 10..800 (10..800 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3654_s;

    /**
     * Range: 10..800 (10..800 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3652_s;

    /**
     * Range: 10..800 (10..800 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3650_s;

    /**
     * Range: 0..100 (0..100 dRpm)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3649_s;

    /**
     * Range: 0..100 (0..100 IR)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3648_s;

    /**
     * Range: 0..100 (0..100 IR)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3647_s;

    /**
     * Range: 0..100 (0..100 dRpm)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3646_s;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3644_s;

    /**
     * Range: 0..45 (0..45 deg)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3584_s;

    /**
     * Range: 1..100 (1..100 drpm)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3583_s;

    /**
     * Range: 5..200 (5..200 dHz)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3582_s;

    /**
     * Range: 1..1000 (1..1000 IR)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3580_s;

    /**
     * Range: 1..1000 (1..1000 IR)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3578_s;

    /**
     * Range: 1..1000 (1..1000 IR)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3576_s;

    /**
     * Range: 1..1000 (1..1000 IR)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3574_s;

    /**
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3573_s;

    /**
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3572_s;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3571_s;

    /**
     * Range: 0..200 (0..200 dDeg)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3570_s;

    /**
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3569_s;

    /**
     * Range: 1..180 (1..180 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3568_s;

    /**
     * Range: 0..1000 (0..1000 IR)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3566_s;

    /**
     * Range: 0..1000 (0..1000 IR)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3564_s;

    /**
     * Range: 0..1000 (0..1000 IR)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3562_s;

    /**
     * Range: 1..100 (1..100 kmph)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3561_s;

    /**
     * Range: 1..100 (1..100 kmph)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3560_s;

    /**
     * Range: 10..800 (10..800 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3558_s;

    /**
     * Range: 10..800 (10..800 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3556_s;

    /**
     * Range: 10..800 (10..800 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3554_s;

    /**
     * Range: 1..100 (1..100 kmph)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3553_s;

    /**
     * Range: 1..100 (1..100 kmph)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3552_s;

    /**
     * Range: 10..800 (10..800 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3550_s;

    /**
     * Range: 10..800 (10..800 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3548_s;

    /**
     * Range: 10..800 (10..800 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3546_s;

    /**
     * Range: 1..100 (1..100 kmph)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3545_s;

    /**
     * Range: 1..100 (1..100 kmph)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3544_s;

    /**
     * Range: 10..800 (10..800 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3542_s;

    /**
     * Range: 10..800 (10..800 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3540_s;

    /**
     * Range: 10..800 (10..800 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3538_s;

    /**
     * Range: 1..100 (1..100 kmph)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3537_s;

    /**
     * Range: 1..100 (1..100 kmph)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3536_s;

    /**
     * Range: 10..800 (10..800 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3534_s;

    /**
     * Range: 10..800 (10..800 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3532_s;

    /**
     * Range: 10..800 (10..800 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3530_s;

    /**
     * Range: 1..100 (1..100 kmph)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3529_s;

    /**
     * Range: 1..100 (1..100 kmph)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3528_s;

    /**
     * Range: 10..800 (10..800 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3526_s;

    /**
     * Range: 10..800 (10..800 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3524_s;

    /**
     * Range: 10..800 (10..800 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3522_s;

    /**
     * Range: 0..100 (0..100 drpm)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3521_s;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3519_s;

    /**
     * Range: 0..200 (0..200 dHz)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3484_s;

    /**
     * Range: 0..100 (0..100 kmph)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3483_s;

    /**
     * Range: 0..100 (0..100 kmph)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3482_s;

    /**
     * Range: 0..100 (0..100 kmph)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3481_s;

    /**
     * Range: 0..100 (0..100 kmph)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3480_s;

    /**
     * Range: 0..100 (0..100 kmph)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3479_s;

    /**
     * Range: 0..200 (0..200 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3478_s;

    /**
     * Range: 0..200 (0..200 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3477_s;

    /**
     * Range: 0..200 (0..200 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3476_s;

    /**
     * Range: 0..200 (0..200 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3475_s;

    /**
     * Range: 0..200 (0..200 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3474_s;

    /**
     * Range: 0..200 (0..200 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3473_s;

    /**
     * Range: 0..89 (0..89 deg)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3469_s;

    /**
     * Range: 0..100 (0..100 kmph)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3467_s;

    /**
     * Range: 0..89 (0..89 deg)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3465_s;

    /**
     * Range: 0..100 (0..100 kmph)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3463_s;

    /**
     * Range: 0..89 (0..89 deg)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3461_s;

    /**
     * Range: 0..1000 (0..1000 IR)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3459_s;

    /**
     * Range: 0..100 (0..100 kmph)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3457_s;

    /**
     * Range: 0..1000 (0..1000 IR)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3455_s;

    /**
     * Range: 0..100 (0..100 kmph)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3453_s;

    /**
     * Range: 0..1000 (0..1000 IR)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3451_s;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3449_s;

    /**
     * Range: 0..89 (0..89 deg)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3428_s;

    /**
     * Range: 0..89 (0..89 deg)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3426_s;

    /**
     * Range: 1000..10000 (1000..10000 mm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3424_s;

    /**
     * Range: 1000..10000 (1000..10000 mm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3422_s;

    /**
     * Range: 0..10 (0..10 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3421_s;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3419_s;

    /**
     * Range: 0..255 (0..255 10ms)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3383_s;

    /**
     * Range: 0..60000 (0..60000 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3381_s;

    /**
     * Range: 100..400 (100..400 10ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3379_s;

    /**
     * Range: 1..75 (1..75 10ms)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3378_s;

    /**
     * Range: 0..200 (0..200 10um)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3377_s;

    /**
     * Range: 0..2000 (0..2000 IR)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3375_s;

    /**
     * Range: 0..255 (0..255 10ms)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3374_s;

    /**
     * Range: 0..360 (0..360 deg)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3372_s;

    /**
     * Range: 0..255 (0..255 10ms)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3371_s;

    /**
     * Range: 0..2000 (0..2000 IR)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3369_s;

    /**
     * Range: 0..255 (0..255 10ms)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3368_s;

    /**
     * Range: 0..4800 (0..4800 dRpm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3366_s;

    /**
     * Range: 0..255 (0..255 10ms)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3365_s;

    /**
     * Range: 0..100 (0..100 kmph)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3364_s;

    /**
     * Range: 0..255 (0..255 10ms)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3363_s;

    /**
     * Range: 0..2000 (0..2000 IR)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3361_s;

    /**
     * Range: 0..255 (0..255 10ms)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3360_s;

    /**
     * Range: 0..4800 (0..4800 dRpm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3358_s;

    /**
     * Range: 0..255 (0..255 10ms)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3357_s;

    /**
     * Range: 0..360 (0..360 deg)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3355_s;

    /**
     * Range: 0..255 (0..255 10ms)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3354_s;

    /**
     * Range: 0..2000 (0..2000 IR)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3352_s;

    /**
     * Range: 0..255 (0..255 10ms)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3351_s;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3349_s;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3323_s;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3322_s;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3321_s;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3320_s;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3319_s;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3318_s;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3317_s;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3316_s;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3315_s;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3314_s;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3313_s;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3312_s;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3311_s;

    /**
     * Range: 0..32 (0..32 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3310_s;

    /**
     * Range: 1..10 (1..10 10ms)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3309_s;

    /**
     * Range: 0..255 (0..255 10ms)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3308_s;

    /**
     * Range: 0..255 (0..255 10ms)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3307_s;

    /**
     * Range: 0..255 (0..255 10ms)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3306_s;

    /**
     * Range: 0..255 (0..255 10ms)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3305_s;

    /**
     * Range: 0..255 (0..255 10ms)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3304_s;

    /**
     * Range: 0..255 (0..255 10ms)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3303_s;

    /**
     * Range: 0..255 (0..255 10ms)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3302_s;

    /**
     * Range: 1..254 (1..254 10ms)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3301_s;

    /**
     * Range: 0..253 (0..253 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3300_s;

    /**
     * Range: 0..253 (0..253 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3299_s;

    /**
     * Range: 0..253 (0..253 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3298_s;

    /**
     * Range: 0..253 (0..253 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3297_s;

    /**
     * Range: 0..253 (0..253 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3296_s;

    /**
     * Range: 0..253 (0..253 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3295_s;

    /**
     * Range: 0..253 (0..253 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3294_s;

    /**
     * Range: 0..253 (0..253 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3293_s;

    /**
     * Range: 0..253 (0..253 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3292_s;

    /**
     * Range: 5..255 (5..255 10ms)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3291_s;

    /**
     * Range: 2..255 (2..255 10ms)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3290_s;

    /**
     * Range: 10..255 (10..255 10ms)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3289_s;

    /**
     * Range: 10..255 (10..255 10ms)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3288_s;

    /**
     * Range: 5..255 (5..255 10ms)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3287_s;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3285_s;

    /**
     * Range: 5..100 (5..100 kmph)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3253_s;

    /**
     * Range: 0..200 (0..200 damph)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3252_s;

    /**
     * Range: 0..100 (0..100 kmph)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3251_s;

    /**
     * Range: 0..100 (0..100 kmph)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3250_s;

    /**
     * Range: 5..200 (5..200 dHz)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3249_s;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3248_s;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3247_s;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3246_s;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3245_s;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3244_s;

    /**
     * Range: 10..255 (10..255 mA)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3243_s;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3242_s;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3241_s;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3240_s;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3239_s;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3238_s;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3237_s;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3235_s;

    /**
     * Range: 4650..5350 (4650..5350 mV)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3219_s;

    /**
     * Range: 4650..5350 (4650..5350 mV)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3217_s;

    /**
     * Range: 0..6000 (0..6000 mV)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3215_s;

    /**
     * Range: 0..6000 (0..6000 mV)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3213_s;

    /**
     * Range: 0..6000 (0..6000 mV)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3211_s;

    /**
     * Range: 0..6000 (0..6000 mV)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3209_s;

    /**
     * Range: 0..6000 (0..6000 mV)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3207_s;

    /**
     * Range: 0..6000 (0..6000 mV)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3205_s;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3203_s;

    /**
     * Range: 0..5000 (0..5000 mV)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3189_s;

    /**
     * Range: 0..5000 (0..5000 mV)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3187_s;

    /**
     * Range: 0..5000 (0..5000 mV)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3185_s;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3183_s;

    /**
     * Range: 0..150 (0..150 10um)
     * Scale: 1
     * Offset: 0
     */
    int16_t p3170_s;

    /**
     * Range: 0..300 (0..300 10um)
     * Scale: 1
     * Offset: 0
     */
    int16_t p3168_s;

    /**
     * Range: -300..0 (-300..0 10um)
     * Scale: 1
     * Offset: 0
     */
    int16_t p3166_s;

    /**
     * Range: 300..1000 (300..1000 10um)
     * Scale: 1
     * Offset: 0
     */
    int16_t p3164_s;

    /**
     * Range: -1000..300 (-1000..300 10um)
     * Scale: 1
     * Offset: 0
     */
    int16_t p3162_s;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3160_s;

    /**
     * Range: 0..10 (0..10 kmph)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3134_s;

    /**
     * Range: 0..200 (0..200 dDeg)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3133_s;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3132_s;

    /**
     * Range: -200..200 (-200..200 10um)
     * Scale: 1
     * Offset: 0
     */
    int16_t p3130_s;

    /**
     * Range: -200..200 (-200..200 10um)
     * Scale: 1
     * Offset: 0
     */
    int16_t p3128_s;

    /**
     * Range: 0..2000 (0..2000 10ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3126_s;

    /**
     * Range: 0..10 (0..10 10ms)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3125_s;

    /**
     * Range: 1..20 (1..20 10ms)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3124_s;

    /**
     * Range: 0..200 (0..200 IR)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3123_s;

    /**
     * Range: 0..150 (0..150 dRpm)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3122_s;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3120_s;

    /**
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3097_s;

    /**
     * Range: 0..150 (0..150 10um)
     * Scale: 1
     * Offset: 0
     */
    int16_t p3095_s;

    /**
     * Range: 0..1000 (0..1000 10um)
     * Scale: 1
     * Offset: 0
     */
    int16_t p3093_s;

    /**
     * Range: -1000..0 (0..1000 10um)
     * Scale: 1
     * Offset: 1000
     */
    int16_t p3091_s;

    /**
     * Range: 0..200 (0..200 10um)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3090_s;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3089_s;

    /**
     * Range: 5..120 (5..120 lpm)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3088_s;

    /**
     * Range: 100..10000 (100..10000 ccm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3086_s;

    /**
     * Range: 0..1200 (0..1200 ccm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3084_s;

    /**
     * Range: 100..1000 (100..1000 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3082_s;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3081_s;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3080_s;

    /**
     * Range: 0..1000 (0..1000 10ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3078_s;

    /**
     * Range: 100..2000 (100..2000 mA)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3076_s;

    /**
     * Range: 100..2000 (100..2000 mA)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3074_s;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3073_s;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3072_s;

    /**
     * Range: 0..2000 (-1000..1000 10um)
     * Scale: 1
     * Offset: -1000
     */
    uint16_t reply_spl_set_last_s;

    /**
     * Range: 0..65535 (0..65535 mV)
     * Scale: 1
     * Offset: 0
     */
    uint16_t reply_ad2_s;

    /**
     * Range: 0..255 (0..255 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t reply_req_cov_pwm_s;

    /**
     * Range: 0..65535 (0..65535 mV)
     * Scale: 1
     * Offset: 0
     */
    uint16_t reply_sensor_voltage_s;

    /**
     * Range: 20..65534 (0..65514 0.1s)
     * Scale: 1
     * Offset: -20
     */
    uint16_t reply_t_last_move_s;
};

/**
 * Signals in message SER_TOOL_REPLY_M.
 *
 * Main_E
 *
 * All signal values are as on the CAN bus.
 */
struct pved_cls_ser_tool_reply_m_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ser_tool_reply_xid_m;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reply_param_data_length_m;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reply_calib_err_code_m;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reply_consistency_chk_m;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reply_input_status_m;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reply_result_from_ecu_m;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reply_sensor5_v_state_m;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reply_pos_captured_m;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reply_was_captured_m;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reply_css_state_m;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t reply_param_address_m;

    /**
     * Range: 0..65535 (0..65535 mV)
     * Scale: 1
     * Offset: 0
     */
    uint16_t reply_ad1_m;

    /**
     * Range: 0..2000 (-1000..1000 10um)
     * Scale: 1
     * Offset: -1000
     */
    uint16_t reply_req_spool_pos_m;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reply_wa_mov_status_r_m;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reply_wa_mov_status_l_m;

    /**
     * Range: 0..255 (0..255 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t reply_calibration_progress_m;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3822_m;

    /**
     * Range: 1..25 (1..25 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3814_m;

    /**
     * Range: 5..400 (5..400 dDeg)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3812_m;

    /**
     * Range: 1..10 (1..10 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3811_m;

    /**
     * Range: 1..10 (1..10 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3810_m;

    /**
     * Range: 10..600 (10..600 100ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3808_m;

    /**
     * Range: 10..600 (10..600 100ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3806_m;

    /**
     * Range: 5..400 (5..400 dDeg)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3804_m;

    /**
     * Range: 50..300 (50..300 10um)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3802_m;

    /**
     * Range: 0..60 (0..60 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3801_m;

    /**
     * Range: 0..300 (0..300 10um)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3799_m;

    /**
     * Range: 0..300 (0..300 10um)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3797_m;

    /**
     * Range: 0..5000 (0..5000 mv)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3795_m;

    /**
     * Range: 0..2500 (0..2500 mv)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3793_m;

    /**
     * Range: 0..5000 (0..5000 mv)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3791_m;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3789_m;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3776_m;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3775_m;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3774_m;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3773_m;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3772_m;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3771_m;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3769_m;

    /**
     * Range: 0..45 (0..45 deg)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3719_m;

    /**
     * Range: 5..200 (5..200 dHz)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3718_m;

    /**
     * Range: 1..1000 (1..1000 IR)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3716_m;

    /**
     * Range: 1..1000 (1..1000 IR)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3714_m;

    /**
     * Range: 0..1000 (0..1000 IR)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3712_m;

    /**
     * Range: 0..1000 (0..1000 IR)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3710_m;

    /**
     * Range: 100..1000 (100..1000 IR)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3708_m;

    /**
     * Range: 1..180 (1..180 Deg)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3706_m;

    /**
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3705_m;

    /**
     * Range: 1..1000 (1..1000 IR)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3703_m;

    /**
     * Range: 1..1000 (1..1000 IR)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3701_m;

    /**
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3700_m;

    /**
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3699_m;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3698_m;

    /**
     * Range: 0..100 (0..100 kmph)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3697_m;

    /**
     * Range: 0..100 (0..100 kmph)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3696_m;

    /**
     * Range: 0..1000 (0..1000 IR)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3694_m;

    /**
     * Range: 0..1000 (0..1000 IR)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3692_m;

    /**
     * Range: 0..1000 (0..1000 IR)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3690_m;

    /**
     * Range: 1..100 (1..100 kmph)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3689_m;

    /**
     * Range: 1..100 (1..100 kmph)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3688_m;

    /**
     * Range: 10..800 (10..800 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3686_m;

    /**
     * Range: 10..800 (10..800 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3684_m;

    /**
     * Range: 10..800 (10..800 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3682_m;

    /**
     * Range: 1..100 (1..100 kmph)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3681_m;

    /**
     * Range: 1..100 (1..100 kmph)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3680_m;

    /**
     * Range: 10..800 (10..800 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3678_m;

    /**
     * Range: 10..800 (10..800 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3676_m;

    /**
     * Range: 10..800 (10..800 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3674_m;

    /**
     * Range: 1..100 (1..100 kmph)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3673_m;

    /**
     * Range: 1..100 (1..100 kmph)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3672_m;

    /**
     * Range: 10..800 (10..800 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3670_m;

    /**
     * Range: 10..800 (10..800 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3668_m;

    /**
     * Range: 10..800 (10..800 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3666_m;

    /**
     * Range: 1..100 (1..100 kmph)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3665_m;

    /**
     * Range: 1..100 (1..100 kmph)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3664_m;

    /**
     * Range: 10..800 (10..800 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3662_m;

    /**
     * Range: 10..800 (10..800 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3660_m;

    /**
     * Range: 10..800 (10..800 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3658_m;

    /**
     * Range: 1..100 (1..100 kmph)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3657_m;

    /**
     * Range: 1..100 (1..100 kmph)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3656_m;

    /**
     * Range: 10..800 (10..800 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3654_m;

    /**
     * Range: 10..800 (10..800 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3652_m;

    /**
     * Range: 10..800 (10..800 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3650_m;

    /**
     * Range: 0..100 (0..100 dRpm)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3649_m;

    /**
     * Range: 0..100 (0..100 IR)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3648_m;

    /**
     * Range: 0..100 (0..100 IR)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3647_m;

    /**
     * Range: 0..100 (0..100 dRpm)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3646_m;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3644_m;

    /**
     * Range: 0..45 (0..45 deg)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3584_m;

    /**
     * Range: 1..100 (1..100 drpm)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3583_m;

    /**
     * Range: 5..200 (5..200 dHz)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3582_m;

    /**
     * Range: 1..1000 (1..1000 IR)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3580_m;

    /**
     * Range: 1..1000 (1..1000 IR)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3578_m;

    /**
     * Range: 1..1000 (1..1000 IR)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3576_m;

    /**
     * Range: 1..1000 (1..1000 IR)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3574_m;

    /**
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3573_m;

    /**
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3572_m;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3571_m;

    /**
     * Range: 0..200 (0..200 dDeg)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3570_m;

    /**
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3569_m;

    /**
     * Range: 1..180 (1..180 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3568_m;

    /**
     * Range: 0..1000 (0..1000 IR)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3566_m;

    /**
     * Range: 0..1000 (0..1000 IR)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3564_m;

    /**
     * Range: 0..1000 (0..1000 IR)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3562_m;

    /**
     * Range: 1..100 (1..100 kmph)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3561_m;

    /**
     * Range: 1..100 (1..100 kmph)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3560_m;

    /**
     * Range: 10..800 (10..800 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3558_m;

    /**
     * Range: 10..800 (10..800 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3556_m;

    /**
     * Range: 10..800 (10..800 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3554_m;

    /**
     * Range: 1..100 (1..100 kmph)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3553_m;

    /**
     * Range: 1..100 (1..100 kmph)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3552_m;

    /**
     * Range: 10..800 (10..800 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3550_m;

    /**
     * Range: 10..800 (10..800 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3548_m;

    /**
     * Range: 10..800 (10..800 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3546_m;

    /**
     * Range: 1..100 (1..100 kmph)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3545_m;

    /**
     * Range: 1..100 (1..100 kmph)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3544_m;

    /**
     * Range: 10..800 (10..800 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3542_m;

    /**
     * Range: 10..800 (10..800 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3540_m;

    /**
     * Range: 10..800 (10..800 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3538_m;

    /**
     * Range: 1..100 (1..100 kmph)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3537_m;

    /**
     * Range: 1..100 (1..100 kmph)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3536_m;

    /**
     * Range: 10..800 (10..800 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3534_m;

    /**
     * Range: 10..800 (10..800 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3532_m;

    /**
     * Range: 10..800 (10..800 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3530_m;

    /**
     * Range: 1..100 (1..100 kmph)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3529_m;

    /**
     * Range: 1..100 (1..100 kmph)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3528_m;

    /**
     * Range: 10..800 (10..800 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3526_m;

    /**
     * Range: 10..800 (10..800 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3524_m;

    /**
     * Range: 10..800 (10..800 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3522_m;

    /**
     * Range: 0..100 (0..100 drpm)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3521_m;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3519_m;

    /**
     * Range: 0..200 (0..200 dHz)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3484_m;

    /**
     * Range: 0..100 (0..100 kmph)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3483_m;

    /**
     * Range: 0..100 (0..100 kmph)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3482_m;

    /**
     * Range: 0..100 (0..100 kmph)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3481_m;

    /**
     * Range: 0..100 (0..100 kmph)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3480_m;

    /**
     * Range: 0..100 (0..100 kmph)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3479_m;

    /**
     * Range: 0..200 (0..200 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3478_m;

    /**
     * Range: 0..200 (0..200 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3477_m;

    /**
     * Range: 0..200 (0..200 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3476_m;

    /**
     * Range: 0..200 (0..200 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3475_m;

    /**
     * Range: 0..200 (0..200 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3474_m;

    /**
     * Range: 0..200 (0..200 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3473_m;

    /**
     * Range: 0..89 (0..89 deg)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3469_m;

    /**
     * Range: 0..100 (0..100 kmph)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3467_m;

    /**
     * Range: 0..89 (0..89 deg)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3465_m;

    /**
     * Range: 0..100 (0..100 kmph)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3463_m;

    /**
     * Range: 0..89 (0..89 deg)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3461_m;

    /**
     * Range: 0..1000 (0..1000 IR)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3459_m;

    /**
     * Range: 0..100 (0..100 kmph)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3457_m;

    /**
     * Range: 0..1000 (0..1000 IR)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3455_m;

    /**
     * Range: 0..100 (0..100 kmph)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3453_m;

    /**
     * Range: 0..1000 (0..1000 IR)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3451_m;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3449_m;

    /**
     * Range: 0..89 (0..89 deg)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3428_m;

    /**
     * Range: 0..89 (0..89 deg)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3426_m;

    /**
     * Range: 1000..10000 (1000..10000 mm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3424_m;

    /**
     * Range: 1000..10000 (1000..10000 mm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3422_m;

    /**
     * Range: 0..10 (0..10 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3421_m;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3419_m;

    /**
     * Range: 0..255 (0..255 10ms)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3383_m;

    /**
     * Range: 0..60000 (0..60000 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3381_m;

    /**
     * Range: 100..400 (100..400 10ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3379_m;

    /**
     * Range: 1..75 (1..75 10ms)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3378_m;

    /**
     * Range: 0..200 (0..200 10um)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3377_m;

    /**
     * Range: 0..2000 (0..2000 IR)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3375_m;

    /**
     * Range: 0..255 (0..255 10ms)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3374_m;

    /**
     * Range: 0..360 (0..360 deg)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3372_m;

    /**
     * Range: 0..255 (0..255 10ms)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3371_m;

    /**
     * Range: 0..2000 (0..2000 IR)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3369_m;

    /**
     * Range: 0..255 (0..255 10ms)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3368_m;

    /**
     * Range: 0..4800 (0..4800 dRpm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3366_m;

    /**
     * Range: 0..255 (0..255 10ms)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3365_m;

    /**
     * Range: 0..100 (0..100 kmph)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3364_m;

    /**
     * Range: 0..255 (0..255 10ms)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3363_m;

    /**
     * Range: 0..2000 (0..2000 IR)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3361_m;

    /**
     * Range: 0..255 (0..255 10ms)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3360_m;

    /**
     * Range: 0..4800 (0..4800 dRpm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3358_m;

    /**
     * Range: 0..255 (0..255 10ms)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3357_m;

    /**
     * Range: 0..360 (0..360 deg)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3355_m;

    /**
     * Range: 0..255 (0..255 10ms)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3354_m;

    /**
     * Range: 0..2000 (0..2000 IR)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3352_m;

    /**
     * Range: 0..255 (0..255 10ms)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3351_m;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3349_m;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3323_m;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3322_m;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3321_m;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3320_m;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3319_m;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3318_m;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3317_m;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3316_m;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3315_m;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3314_m;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3313_m;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3312_m;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3311_m;

    /**
     * Range: 0..32 (0..32 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3310_m;

    /**
     * Range: 1..10 (1..10 10ms)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3309_m;

    /**
     * Range: 0..255 (0..255 10ms)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3308_m;

    /**
     * Range: 0..255 (0..255 10ms)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3307_m;

    /**
     * Range: 0..255 (0..255 10ms)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3306_m;

    /**
     * Range: 0..255 (0..255 10ms)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3305_m;

    /**
     * Range: 0..255 (0..255 10ms)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3304_m;

    /**
     * Range: 0..255 (0..255 10ms)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3303_m;

    /**
     * Range: 0..255 (0..255 10ms)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3302_m;

    /**
     * Range: 1..254 (1..254 10ms)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3301_m;

    /**
     * Range: 0..253 (0..253 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3300_m;

    /**
     * Range: 0..253 (0..253 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3299_m;

    /**
     * Range: 0..253 (0..253 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3298_m;

    /**
     * Range: 0..253 (0..253 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3297_m;

    /**
     * Range: 0..253 (0..253 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3296_m;

    /**
     * Range: 0..253 (0..253 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3295_m;

    /**
     * Range: 0..253 (0..253 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3294_m;

    /**
     * Range: 0..253 (0..253 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3293_m;

    /**
     * Range: 0..253 (0..253 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3292_m;

    /**
     * Range: 5..255 (5..255 10ms)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3291_m;

    /**
     * Range: 2..255 (2..255 10ms)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3290_m;

    /**
     * Range: 10..255 (10..255 10ms)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3289_m;

    /**
     * Range: 10..255 (10..255 10ms)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3288_m;

    /**
     * Range: 5..255 (5..255 10ms)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3287_m;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3285_m;

    /**
     * Range: 5..100 (5..100 kmph)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3253_m;

    /**
     * Range: 0..200 (0..200 damph)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3252_m;

    /**
     * Range: 0..100 (0..100 kmph)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3251_m;

    /**
     * Range: 0..100 (0..100 kmph)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3250_m;

    /**
     * Range: 5..200 (5..200 dHz)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3249_m;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3248_m;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3247_m;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3246_m;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3245_m;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3244_m;

    /**
     * Range: 10..255 (10..255 mA)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3243_m;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3242_m;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3241_m;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3240_m;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3239_m;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3238_m;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3237_m;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3235_m;

    /**
     * Range: 4650..5350 (4650..5350 mV)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3219_m;

    /**
     * Range: 4650..5350 (4650..5350 mV)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3217_m;

    /**
     * Range: 0..6000 (0..6000 mV)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3215_m;

    /**
     * Range: 0..6000 (0..6000 mV)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3213_m;

    /**
     * Range: 0..6000 (0..6000 mV)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3211_m;

    /**
     * Range: 0..6000 (0..6000 mV)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3209_m;

    /**
     * Range: 0..6000 (0..6000 mV)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3207_m;

    /**
     * Range: 0..6000 (0..6000 mV)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3205_m;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3203_m;

    /**
     * Range: 0..5000 (0..5000 mV)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3189_m;

    /**
     * Range: 0..5000 (0..5000 mV)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3187_m;

    /**
     * Range: 0..5000 (0..5000 mV)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3185_m;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3183_m;

    /**
     * Range: 0..150 (0..150 10um)
     * Scale: 1
     * Offset: 0
     */
    int16_t p3170_m;

    /**
     * Range: 0..300 (0..300 10um)
     * Scale: 1
     * Offset: 0
     */
    int16_t p3168_m;

    /**
     * Range: -300..0 (-300..0 10um)
     * Scale: 1
     * Offset: 0
     */
    int16_t p3166_m;

    /**
     * Range: 300..1000 (300..1000 10um)
     * Scale: 1
     * Offset: 0
     */
    int16_t p3164_m;

    /**
     * Range: -1000..1000 (-1000..1000 10um)
     * Scale: 1
     * Offset: 0
     */
    int16_t p3162_m;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3160_m;

    /**
     * Range: 0..10 (0..10 kmph)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3134_m;

    /**
     * Range: 0..200 (0..200 dDeg)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3133_m;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3132_m;

    /**
     * Range: -200..200 (-200..200 10um)
     * Scale: 1
     * Offset: 0
     */
    int16_t p3130_m;

    /**
     * Range: -200..200 (-200..200 10um)
     * Scale: 1
     * Offset: 0
     */
    int16_t p3128_m;

    /**
     * Range: 0..2000 (0..2000 10ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3126_m;

    /**
     * Range: 0..10 (0..10 10ms)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3125_m;

    /**
     * Range: 1..20 (1..20 10ms)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3124_m;

    /**
     * Range: 0..200 (0..200 IR)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3123_m;

    /**
     * Range: 0..150 (0..150 dRpm)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3122_m;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3120_m;

    /**
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3097_m;

    /**
     * Range: 0..150 (0..150 10um)
     * Scale: 1
     * Offset: 0
     */
    int16_t p3095_m;

    /**
     * Range: 0..1000 (0..1000 10um)
     * Scale: 1
     * Offset: 0
     */
    int16_t p3093_m;

    /**
     * Range: -1000..0 (0..1000 10um)
     * Scale: 1
     * Offset: 1000
     */
    int16_t p3091_m;

    /**
     * Range: 0..200 (0..200 10um)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3090_m;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3089_m;

    /**
     * Range: 5..120 (5..120 lpm)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3088_m;

    /**
     * Range: 100..10000 (100..10000 ccm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3086_m;

    /**
     * Range: 0..1200 (0..1200 ccm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3084_m;

    /**
     * Range: 100..1000 (100..1000 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3082_m;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3081_m;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3080_m;

    /**
     * Range: 0..1000 (0..1000 10ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3078_m;

    /**
     * Range: 100..2000 (100..2000 mA)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3076_m;

    /**
     * Range: 100..2000 (100..2000 mA)
     * Scale: 1
     * Offset: 0
     */
    uint16_t p3074_m;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3073_m;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t p3072_m;

    /**
     * Range: 0..2000 (-1000..1000 10um)
     * Scale: 1
     * Offset: -1000
     */
    uint16_t reply_spl_set_last_m;

    /**
     * Range: 0..65535 (0..65535 mV)
     * Scale: 1
     * Offset: 0
     */
    uint16_t reply_ad2_m;

    /**
     * Range: 0..255 (0..255 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t reply_req_cov_pwm_m;

    /**
     * Range: 0..65535 (0..65535 mV)
     * Scale: 1
     * Offset: 0
     */
    uint16_t reply_sensor_voltage_m;

    /**
     * Range: 20..65534 (0..65514 0.1s)
     * Scale: 1
     * Offset: -20
     */
    uint16_t reply_t_last_move_m;
};

/**
 * Signals in message SER_TOOL_REQ_S.
 *
 * Safe_E
 *
 * All signal values are as on the CAN bus.
 */
struct pved_cls_ser_tool_req_s_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ser_tool_req_xid_s;

    /**
     * Range: 0..255 (0..2550 ms)
     * Scale: 10
     * Offset: 0
     */
    uint8_t tx_rate_stat_msg_7_s;

    /**
     * Range: 0..255 (0..255 0.1deg)
     * Scale: 1
     * Offset: 0
     */
    uint8_t req_wa_sweep_angle_s;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t req_param_data_length_s;

    /**
     * Range: 0..255 (0..2550 ms)
     * Scale: 10
     * Offset: 0
     */
    uint8_t tx_rate_stat_msg_op_s;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t req_service_mode_s;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t req_sensor5_v_s;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t req_ans_capture_s;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t req_css_s;

    /**
     * Range: 0..255 (0..2550 ms)
     * Scale: 10
     * Offset: 0
     */
    uint8_t tx_rate_stat_msg_8_s;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t req_param_address_s;

    /**
     * Range: 0..255 (0..2550 ms)
     * Scale: 10
     * Offset: 0
     */
    uint8_t tx_rate_stat_msg_1_s;

    /**
     * Range: 0..65535 (0..65535 10um)
     * Scale: 1
     * Offset: 0
     */
    uint16_t req_spl_init_sp_s;

    /**
     * Range: 0..2000 (-1000..1000 10um)
     * Scale: 1
     * Offset: -1000
     */
    uint16_t req_spool_pos_s;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t req_service_mode_chk_s;

    /**
     * Range: 0..255 (0..2550 ms)
     * Scale: 10
     * Offset: 0
     */
    uint8_t tx_rate_stat_msg_2_s;

    /**
     * Range: 0..255 (0..2550 ms)
     * Scale: 10
     * Offset: 0
     */
    uint8_t tx_rate_stat_msg_3_s;

    /**
     * Range: 0..255 (0..255 0.1s)
     * Scale: 1
     * Offset: 0
     */
    uint8_t req_spl_calib_tmin_s;

    /**
     * Range: 0..255 (0..255 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t req_cov_pwm_s;

    /**
     * Range: 0..255 (0..2550 ms)
     * Scale: 10
     * Offset: 0
     */
    uint8_t tx_rate_stat_msg_4_s;

    /**
     * Range: 0..255 (0..255 0.1s)
     * Scale: 1
     * Offset: 0
     */
    uint8_t req_spl_calib_tmax_s;

    /**
     * Range: 0..255 (0..2550 ms)
     * Scale: 10
     * Offset: 0
     */
    uint8_t tx_rate_stat_msg_5_s;

    /**
     * Range: 0..255 (0..2550 ms)
     * Scale: 10
     * Offset: 0
     */
    uint8_t tx_rate_stat_msg_6_s;
};

/**
 * Signals in message SER_TOOL_REQ_M.
 *
 * Main_E
 *
 * All signal values are as on the CAN bus.
 */
struct pved_cls_ser_tool_req_m_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ser_tool_req_xid_m;

    /**
     * Range: 0..255 (0..2550 ms)
     * Scale: 10
     * Offset: 0
     */
    uint8_t tx_rate_stat_msg_7_m;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t req_param_data_length_m;

    /**
     * Range: 0..255 (0..2550 ms)
     * Scale: 10
     * Offset: 0
     */
    uint8_t tx_rate_stat_msg_op_m;

    /**
     * Range: 0..255 (0..255 0.1deg)
     * Scale: 1
     * Offset: 0
     */
    uint8_t req_wa_sweep_angle_m;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t req_service_mode_m;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t req_sensor5_v_m;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t req_ans_capture_m;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t req_css_m;

    /**
     * Range: 0..255 (0..2550 ms)
     * Scale: 10
     * Offset: 0
     */
    uint8_t tx_rate_stat_msg_8_m;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t req_param_address_m;

    /**
     * Range: 0..255 (0..2550 ms)
     * Scale: 10
     * Offset: 0
     */
    uint8_t tx_rate_stat_msg_1_m;

    /**
     * Range: 0..65535 (0..65535 10um)
     * Scale: 1
     * Offset: 0
     */
    uint16_t req_spl_init_sp_m;

    /**
     * Range: 0..2000 (-1000..1000 10um)
     * Scale: 1
     * Offset: -1000
     */
    uint16_t req_spool_pos_m;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t req_service_mode_chk_m;

    /**
     * Range: 0..255 (0..2550 ms)
     * Scale: 10
     * Offset: 0
     */
    uint8_t tx_rate_stat_msg_2_m;

    /**
     * Range: 0..255 (0..2550 ms)
     * Scale: 10
     * Offset: 0
     */
    uint8_t tx_rate_stat_msg_3_m;

    /**
     * Range: 0..255 (0..255 0.1s)
     * Scale: 1
     * Offset: 0
     */
    uint8_t req_spl_calib_tmin_m;

    /**
     * Range: 0..255 (0..255 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t req_cov_pwm_m;

    /**
     * Range: 0..255 (0..2550 ms)
     * Scale: 10
     * Offset: 0
     */
    uint8_t tx_rate_stat_msg_4_m;

    /**
     * Range: 0..255 (0..255 0.1s)
     * Scale: 1
     * Offset: 0
     */
    uint8_t req_spl_calib_tmax_m;

    /**
     * Range: 0..255 (0..2550 ms)
     * Scale: 10
     * Offset: 0
     */
    uint8_t tx_rate_stat_msg_5_m;

    /**
     * Range: 0..255 (0..2550 ms)
     * Scale: 10
     * Offset: 0
     */
    uint8_t tx_rate_stat_msg_6_m;
};

/**
 * Signals in message STR_FB_MSG_S.
 *
 * Safe_C
 *
 * All signal values are as on the CAN bus.
 */
struct pved_cls_str_fb_msg_s_t {
    /**
     * Range: 0..2000 (-1000..1000 0.1%)
     * Scale: 1
     * Offset: -1000
     */
    uint16_t str_fb_est_flow_s;

    /**
     * Range: 0..2000 (-1000..1000 0.1%)
     * Scale: 1
     * Offset: -1000
     */
    uint16_t str_fb_est_wa_s;

    /**
     * Range: 0..80 (0..8 Rev)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t str_fb_stw_l2_l_s;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t str_fb_seq_s;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t imd_stw_status_s;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t str_fb_crc_s;
};

/**
 * Signals in message STR_FB_MSG_M.
 *
 * Main_C
 *
 * All signal values are as on the CAN bus.
 */
struct pved_cls_str_fb_msg_m_t {
    /**
     * Range: 0..2000 (-1000..1000 0.1%)
     * Scale: 1
     * Offset: -1000
     */
    uint16_t str_fb_est_flow_m;

    /**
     * Range: 0..2000 (-1000..1000 0.1%)
     * Scale: 1
     * Offset: -1000
     */
    uint16_t str_fb_est_wa_m;

    /**
     * Range: 0..80 (0..8 Rev)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t str_fb_stw_l2_l_m;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t str_fb_seq_m;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t imd_stw_status_m;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t str_fb_crc_m;
};

/**
 * Signals in message AUX_JOY_P.
 *
 * Main_C
 *
 * All signal values are as on the CAN bus.
 */
struct pved_cls_aux_joy_p_t {
    /**
     * Range: 0..2000 (-1000..1000 0.1%)
     * Scale: 1
     * Offset: -1000
     */
    uint16_t aux_joy_pos_p;

    /**
     * Range: 0..400 (-200..200 0.1%)
     * Scale: 1
     * Offset: -200
     */
    uint16_t aux_joy_cl_trim_p;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t aux_joy_cl_enable_p;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t aux_joy_seq_p;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t aux_joy_cl_error_code_p;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t aux_joy_crc_p;
};

/**
 * Signals in message AUX_JOY_R.
 *
 * Safe_C
 *
 * All signal values are as on the CAN bus.
 */
struct pved_cls_aux_joy_r_t {
    /**
     * Range: 0..2000 (-1000..1000 0.1%)
     * Scale: 1
     * Offset: -1000
     */
    uint16_t aux_joy_pos_r;

    /**
     * Range: 0..400 (-200..200 0.1%)
     * Scale: 1
     * Offset: -200
     */
    uint16_t aux_joy_cl_trim_r;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t aux_joy_cl_enable_r;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t aux_joy_seq_r;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t aux_joy_cl_error_code_r;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t aux_joy_crc_r;
};

/**
 * Signals in message AUX_STW_R.
 *
 * Safe_C
 *
 * All signal values are as on the CAN bus.
 */
struct pved_cls_aux_stw_r_t {
    /**
     * Range: 0..4094.998522595639603448058115 (0..359.912 degree)
     * Scale: 0.08789063
     * Offset: 0
     */
    uint16_t aux_stw_pos_r;

    /**
     * Range: 0..40959.99860189871438852388221 (-300..300 RPM)
     * Scale: 0.014648438
     * Offset: -300
     */
    uint16_t aux_stw_velocity_r;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t aux_stw_seq_r;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t aux_stw_error_code_r;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t aux_stw_crc_r;
};

/**
 * Signals in message AUX_STW_P.
 *
 * Main_C
 *
 * All signal values are as on the CAN bus.
 */
struct pved_cls_aux_stw_p_t {
    /**
     * Range: 0..4094.998522595639603448058115 (0..359.912 degree)
     * Scale: 0.08789063
     * Offset: 0
     */
    uint16_t aux_stw_pos_p;

    /**
     * Range: 0..40959.99860189871438852388221 (-300..300 RPM)
     * Scale: 0.014648438
     * Offset: -300
     */
    uint16_t aux_stw_velocity_p;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t aux_stw_seq_p;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t aux_stw_error_code_p;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t aux_stw_crc_p;
};

/**
 * Signals in message WAS_P.
 *
 * Main_C
 *
 * All signal values are as on the CAN bus.
 */
struct pved_cls_was_p_t {
    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t was_wa_p;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t was_seq_p;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t was_crc_p;
};

/**
 * Signals in message WAS_R.
 *
 * Safe_C
 *
 * All signal values are as on the CAN bus.
 */
struct pved_cls_was_r_t {
    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t was_wa_r;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t was_seq_r;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t was_crc_r;
};

/**
 * Signals in message STW_R.
 *
 * Safe_C
 *
 * All signal values are as on the CAN bus.
 */
struct pved_cls_stw_r_t {
    /**
     * Range: 0..4094.998522595639603448058115 (0..359.912 degree)
     * Scale: 0.08789063
     * Offset: 0
     */
    uint16_t stw_pos_r;

    /**
     * Range: 0..40959.99860189871438852388221 (-300..300 RPM)
     * Scale: 0.014648438
     * Offset: -300
     */
    uint16_t stw_velocity_r;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t stw_seq_r;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t stw_error_code_r;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t stw_crc_r;
};

/**
 * Signals in message STW_P.
 *
 * Main_C
 *
 * All signal values are as on the CAN bus.
 */
struct pved_cls_stw_p_t {
    /**
     * Range: 0..4094.998522595639603448058115 (0..359.912 degree)
     * Scale: 0.08789063
     * Offset: 0
     */
    uint16_t stw_pos_p;

    /**
     * Range: 0..40959.99860189871438852388221 (-300..300 RPM)
     * Scale: 0.014648438
     * Offset: -300
     */
    uint16_t stw_velocity_p;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t stw_seq_p;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t stw_error_code_p;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t stw_crc_p;
};

/**
 * Signals in message STAT_MSG_6_S.
 *
 * Safe_C
 *
 * All signal values are as on the CAN bus.
 */
struct pved_cls_stat_msg_6_s_t {
    /**
     * Range: -
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t avg_cpu_load_s;

    /**
     * Range: 0..2000 (-1000..1000 0.1%)
     * Scale: 1
     * Offset: -1000
     */
    uint16_t spi_flow_command_s;

    /**
     * Range: 0..2000 (-1000..1000 0.1%)
     * Scale: 1
     * Offset: -1000
     */
    uint16_t was2_s;

    /**
     * Range: 0..255 (0..2550 ms)
     * Scale: 10
     * Offset: 0
     */
    uint8_t spool_monitoring_timeout_s;

    /**
     * Range: 0..255 (0..2550 [ms])
     * Scale: 10
     * Offset: 0
     */
    uint8_t spool_monitoring_time_s;
};

/**
 * Signals in message STAT_MSG_6_M.
 *
 * Main_C
 *
 * All signal values are as on the CAN bus.
 */
struct pved_cls_stat_msg_6_m_t {
    /**
     * Range: -
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t avg_cpu_load_m;

    /**
     * Range: 0..2000 (-1000..1000 0.1%)
     * Scale: 1
     * Offset: -1000
     */
    uint16_t spi_flow_command_m;

    /**
     * Range: 0..2000 (-1000..1000 0.1%)
     * Scale: 1
     * Offset: -1000
     */
    uint16_t was2_m;

    /**
     * Range: 0..255 (0..2550 ms)
     * Scale: 10
     * Offset: 0
     */
    uint8_t spool_monitoring_timeout_m;

    /**
     * Range: 0..255 (0..2550 ms)
     * Scale: 10
     * Offset: 0
     */
    uint8_t spool_monitoring_time_m;
};

/**
 * Signals in message STAT_MSG_5_S.
 *
 * Safe_C
 *
 * All signal values are as on the CAN bus.
 */
struct pved_cls_stat_msg_5_s_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fda_err_condition_s;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fda_spl_indication_s;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fda_was_indication_s;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fda_stw_indication_s;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fda_fault_condition_s;

    /**
     * Range: 0..2000 (-1000..1000 0.1%)
     * Scale: 1
     * Offset: -1000
     */
    uint16_t was_s;

    /**
     * Range: 0..2000 (-1000..1000 10um)
     * Scale: 1
     * Offset: -1000
     */
    uint16_t fda_spool_position_s;

    /**
     * Range: 0..1024 (0..10240 ms)
     * Scale: 10
     * Offset: 0
     */
    uint16_t fda_confidence_counter_s;

    /**
     * Range: 0..6000 (-300..300 RPM)
     * Scale: 0.1
     * Offset: -300
     */
    uint16_t fda_stw_velocity_s;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t spl_diag_s;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t spl_ctrl_s;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fda_muted_s;
};

/**
 * Signals in message STAT_MSG_4_S.
 *
 * Safe_C
 *
 * All signal values are as on the CAN bus.
 */
struct pved_cls_stat_msg_4_s_t {
    /**
     * Range: 0..2000 (-1000..1000 0.1%)
     * Scale: 1
     * Offset: -1000
     */
    uint16_t flow_cmd_s;

    /**
     * Range: 0..65535 (0..65535 ccm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t ideal_oil_vol_s;

    /**
     * Range: 0..2000 (-1000..1000 0.1%)
     * Scale: 1
     * Offset: -1000
     */
    uint16_t flow_setpoint_s;

    /**
     * Range: 0..36000 (0..3600 deg)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t efu_stw_difference_s;
};

/**
 * Signals in message STAT_MSG_4_M.
 *
 * Main_C
 *
 * All signal values are as on the CAN bus.
 */
struct pved_cls_stat_msg_4_m_t {
    /**
     * Range: 0..2000 (-1000..1000 0.1%)
     * Scale: 1
     * Offset: -1000
     */
    uint16_t flow_cmd_m;

    /**
     * Range: 0..65535 (0..65535 ccm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t ideal_oil_vol_m;

    /**
     * Range: 0..2000 (-1000..1000 0.1%)
     * Scale: 1
     * Offset: -1000
     */
    uint16_t flow_setpoint_m;

    /**
     * Range: 0..36000 (0..3600 deg)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t efu_stw_difference_m;
};

/**
 * Signals in message ADR_CLAIMED_S.
 *
 * Safe_E
 *
 * All signal values are as on the CAN bus.
 */
struct pved_cls_adr_claimed_s_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message ADR_CLAIMED_M.
 *
 * Main_E
 *
 * All signal values are as on the CAN bus.
 */
struct pved_cls_adr_claimed_m_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message STAT_MSG_5_M.
 *
 * Main_C
 *
 * All signal values are as on the CAN bus.
 */
struct pved_cls_stat_msg_5_m_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fda_err_condition_m;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fda_spl_indication_m;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fda_was_indication_m;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fda_stw_indication_m;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fda_fault_condition_m;

    /**
     * Range: 0..2000 (-1000..1000 0.1%)
     * Scale: 1
     * Offset: -1000
     */
    uint16_t was_m;

    /**
     * Range: 0..2000 (-1000..1000 10um)
     * Scale: 1
     * Offset: -1000
     */
    uint16_t fda_spool_position_m;

    /**
     * Range: 0..1024 (0..10240 ms)
     * Scale: 10
     * Offset: 0
     */
    uint16_t fda_confidence_counter_m;

    /**
     * Range: 0..6000 (-300..300 RPM)
     * Scale: 0.1
     * Offset: -300
     */
    uint16_t fda_stw_velocity_m;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t spl_diag_m;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t spl_ctrl_m;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fda_muted_m;
};

/**
 * Signals in message GPS1_GMS.
 *
 * Main_C
 *
 * All signal values are as on the CAN bus.
 */
struct pved_cls_gps1_gms_t {
    /**
     * Range: 0..64256 (-8032..8032 1/km)
     * Scale: 0.25
     * Offset: -8032
     */
    uint16_t gps1_estimated_curvature;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gps1_system_lockout;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gps1_system_ready;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gps1_str_input_pos_status;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gps1_req_reset;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gps1_limit_status;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gps1_exit_reason;
};

/**
 * Signals in message GPS1_GMC.
 *
 * Main_C
 *
 * All signal values are as on the CAN bus.
 */
struct pved_cls_gps1_gmc_t {
    /**
     * Range: 0..64256 (-8032..8032 1/km)
     * Scale: 0.25
     * Offset: -8032
     */
    uint16_t gps1_curvature_cmd;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gps1_str_cmd_status;
};

/**
 * Signals in message MMI_R.
 *
 * Safe_C
 *
 * All signal values are as on the CAN bus.
 */
struct pved_cls_mmi_r_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t mmi_xid_res_r;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t mmi_str_mode_req_r;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t mmi_lockout_aux_r;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t mmi_lockout_gps_r;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t mmi_aux_mode_req_r;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mmi_seq_r;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t mmi_crc_r;
};

/**
 * Signals in message MMI_P.
 *
 * Main_C
 *
 * All signal values are as on the CAN bus.
 */
struct pved_cls_mmi_p_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t mmi_xid_res_p;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t mmi_str_mode_req_p;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t mmi_lockout_aux_p;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t mmi_lockout_gps_p;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t mmi_aux_mode_req_p;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mmi_seq_p;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t mmi_crc_p;
};

/**
 * Signals in message VSP_R.
 *
 * Safe_C
 *
 * All signal values are as on the CAN bus.
 */
struct pved_cls_vsp_r_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vsp_dir_r;

    /**
     * Range: -
     * Scale: 0.00390625
     * Offset: 0
     */
    uint16_t vsp_speed_r;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vsp_seq_r;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t vsp_crc_r;
};

/**
 * Signals in message VSP_P.
 *
 * Main_C
 *
 * All signal values are as on the CAN bus.
 */
struct pved_cls_vsp_p_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vsp_dir_p;

    /**
     * Range: -
     * Scale: 0.00390625
     * Offset: 0
     */
    uint16_t vsp_speed_p;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vsp_seq_p;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t vsp_crc_p;
};

/**
 * Signals in message STAT_MSG_3_S.
 *
 * Safe_C
 *
 * All signal values are as on the CAN bus.
 */
struct pved_cls_stat_msg_3_s_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: -40
     */
    uint16_t pcb_temp_s;

    /**
     * Range: 0..65535 (0..65535 mV)
     * Scale: 1
     * Offset: 0
     */
    uint16_t batt_volt_s;

    /**
     * Range: 0..65535 (0..65535 mV)
     * Scale: 1
     * Offset: 0
     */
    uint16_t sensor5_v_volt_s;

    /**
     * Range: 50..150 (-50..50 10um)
     * Scale: 1
     * Offset: -100
     */
    uint8_t lvdt_neut_comp_s;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t lvdt_comp_count_s;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t spl_ctrl_status_s;
};

/**
 * Signals in message STAT_MSG_3_M.
 *
 * Main_C
 *
 * All signal values are as on the CAN bus.
 */
struct pved_cls_stat_msg_3_m_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: -40
     */
    uint16_t pcb_temp_m;

    /**
     * Range: 0..65535 (0..65535 mV)
     * Scale: 1
     * Offset: 0
     */
    uint16_t batt_volt_m;

    /**
     * Range: 0..65535 (0..65535 mV)
     * Scale: 1
     * Offset: 0
     */
    uint16_t sensor5_v_volt_m;

    /**
     * Range: 50..150 (-50..50 10um)
     * Scale: 1
     * Offset: -100
     */
    uint8_t lvdt_neut_comp_m;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t lvdt_comp_count_m;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t spl_ctrl_status_m;
};

/**
 * Signals in message STAT_MSG_2_S.
 *
 * Safe_C
 *
 * All signal values are as on the CAN bus.
 */
struct pved_cls_stat_msg_2_s_t {
    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t src_cl_wa_setpoint_s;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t dout_state_s;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t state_css_s;

    /**
     * Range: 0..65535 (0..65535 mV)
     * Scale: 1
     * Offset: 0
     */
    uint16_t ad3_s;

    /**
     * Range: 0..65535 (0..65535 mA)
     * Scale: 1
     * Offset: 0
     */
    uint16_t dout_current_s;

    /**
     * Range: 0..2000 (-1000..1000 0.1%)
     * Scale: 1
     * Offset: -1000
     */
    uint16_t cl_wa_setpoint_s;
};

/**
 * Signals in message STAT_MSG_2_M.
 *
 * Main_C
 *
 * All signal values are as on the CAN bus.
 */
struct pved_cls_stat_msg_2_m_t {
    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t src_cl_wa_setpoint_m;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t dout_state_m;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t state_css_m;

    /**
     * Range: 0..65535 (0..65535 mV)
     * Scale: 1
     * Offset: 0
     */
    uint16_t ad3_m;

    /**
     * Range: 0..65535 (0..65535 mA)
     * Scale: 1
     * Offset: 0
     */
    uint16_t dout_current_m;

    /**
     * Range: 0..2000 (-1000..1000 0.1%)
     * Scale: 1
     * Offset: -1000
     */
    uint16_t cl_wa_setpoint_m;
};

/**
 * Signals in message STAT_MSG_1_S.
 *
 * Safe_C
 *
 * All signal values are as on the CAN bus.
 */
struct pved_cls_stat_msg_1_s_t {
    /**
     * Range: 0..2000 (-1000..1000 10um)
     * Scale: 1
     * Offset: -1000
     */
    uint16_t spool_setpoint_s;

    /**
     * Range: 0..2000 (-1000..1000 10um)
     * Scale: 1
     * Offset: -1000
     */
    uint16_t spool_position_s;

    /**
     * Range: 0..65535 (0..65535 mV)
     * Scale: 1
     * Offset: 0
     */
    uint16_t ad1_s;

    /**
     * Range: 0..65535 (0..65535 mV)
     * Scale: 1
     * Offset: 0
     */
    uint16_t ad2_s;
};

/**
 * Signals in message STAT_MSG_1_M.
 *
 * Main_C
 *
 * All signal values are as on the CAN bus.
 */
struct pved_cls_stat_msg_1_m_t {
    /**
     * Range: 0..2000 (-1000..1000 10um)
     * Scale: 1
     * Offset: -1000
     */
    uint16_t spool_setpoint_m;

    /**
     * Range: 0..2000 (-1000..1000 10um)
     * Scale: 1
     * Offset: -1000
     */
    uint16_t spool_position_m;

    /**
     * Range: 0..65535 (0..65535 mV)
     * Scale: 1
     * Offset: 0
     */
    uint16_t ad1_m;

    /**
     * Range: 0..65535 (0..65535 mV)
     * Scale: 1
     * Offset: 0
     */
    uint16_t ad2_m;
};

/**
 * Signals in message STAT_MSG_OP_S.
 *
 * Safe_C
 *
 * All signal values are as on the CAN bus.
 */
struct pved_cls_stat_msg_op_s_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t operation_state_s;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t lockout_aux_s;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t lockout_eh_steering_s;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t lockout_program_change_s;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t lockout_device_change_s;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t lockout_gps_s;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t service_mode_state_s;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t operation_state_seq_s;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t operation_state_crc_s;
};

/**
 * Signals in message STAT_MSG_OP_M.
 *
 * Main_C
 *
 * All signal values are as on the CAN bus.
 */
struct pved_cls_stat_msg_op_m_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t operation_state_m;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t lockout_aux_m;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t lockout_eh_steering_m;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t lockout_program_change_m;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t lockout_device_change_m;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t lockout_gps_m;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t service_mode_state_m;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t operation_state_seq_m;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t operation_state_crc_m;
};

/**
 * Pack message STAT_MSG_8_S.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pved_cls_stat_msg_8_s_pack(
    uint8_t *dst_p,
    const struct pved_cls_stat_msg_8_s_t *src_p,
    size_t size);

/**
 * Unpack message STAT_MSG_8_S.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pved_cls_stat_msg_8_s_unpack(
    struct pved_cls_stat_msg_8_s_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_stat_msg_8_s_imd_status_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_8_s_imd_status_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_8_s_imd_status_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_stat_msg_8_s_imd_confidence_counter_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_8_s_imd_confidence_counter_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_8_s_imd_confidence_counter_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_stat_msg_8_s_svc_integral_part_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_8_s_svc_integral_part_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_8_s_svc_integral_part_s_is_in_range(uint16_t value);

/**
 * Pack message STAT_MSG_8_M.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pved_cls_stat_msg_8_m_pack(
    uint8_t *dst_p,
    const struct pved_cls_stat_msg_8_m_t *src_p,
    size_t size);

/**
 * Unpack message STAT_MSG_8_M.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pved_cls_stat_msg_8_m_unpack(
    struct pved_cls_stat_msg_8_m_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_stat_msg_8_m_imd_status_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_8_m_imd_status_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_8_m_imd_status_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_stat_msg_8_m_imd_confidence_counter_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_8_m_imd_confidence_counter_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_8_m_imd_confidence_counter_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_stat_msg_8_m_svc_integral_part_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_8_m_svc_integral_part_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_8_m_svc_integral_part_m_is_in_range(uint16_t value);

/**
 * Pack message ELOBAU_EJM2_R.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pved_cls_elobau_ejm2_r_pack(
    uint8_t *dst_p,
    const struct pved_cls_elobau_ejm2_r_t *src_p,
    size_t size);

/**
 * Unpack message ELOBAU_EJM2_R.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pved_cls_elobau_ejm2_r_unpack(
    struct pved_cls_elobau_ejm2_r_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_elobau_ejm2_r_elobau_neutral_r_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_elobau_ejm2_r_elobau_neutral_r_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_elobau_ejm2_r_elobau_neutral_r_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_elobau_ejm2_r_elobau_left_r_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_elobau_ejm2_r_elobau_left_r_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_elobau_ejm2_r_elobau_left_r_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_elobau_ejm2_r_elobau_right_r_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_elobau_ejm2_r_elobau_right_r_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_elobau_ejm2_r_elobau_right_r_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_elobau_ejm2_r_elobau_pos_r_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_elobau_ejm2_r_elobau_pos_r_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_elobau_ejm2_r_elobau_pos_r_is_in_range(uint16_t value);

/**
 * Pack message ELOBAU_EJM1_R.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pved_cls_elobau_ejm1_r_pack(
    uint8_t *dst_p,
    const struct pved_cls_elobau_ejm1_r_t *src_p,
    size_t size);

/**
 * Unpack message ELOBAU_EJM1_R.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pved_cls_elobau_ejm1_r_unpack(
    struct pved_cls_elobau_ejm1_r_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_elobau_ejm1_r_elobau_neutral_r_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_elobau_ejm1_r_elobau_neutral_r_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_elobau_ejm1_r_elobau_neutral_r_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_elobau_ejm1_r_elobau_left_r_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_elobau_ejm1_r_elobau_left_r_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_elobau_ejm1_r_elobau_left_r_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_elobau_ejm1_r_elobau_right_r_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_elobau_ejm1_r_elobau_right_r_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_elobau_ejm1_r_elobau_right_r_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_elobau_ejm1_r_elobau_pos_r_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_elobau_ejm1_r_elobau_pos_r_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_elobau_ejm1_r_elobau_pos_r_is_in_range(uint16_t value);

/**
 * Pack message ELOBAU_EJM2_P.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pved_cls_elobau_ejm2_p_pack(
    uint8_t *dst_p,
    const struct pved_cls_elobau_ejm2_p_t *src_p,
    size_t size);

/**
 * Unpack message ELOBAU_EJM2_P.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pved_cls_elobau_ejm2_p_unpack(
    struct pved_cls_elobau_ejm2_p_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_elobau_ejm2_p_elobau_neutral_p_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_elobau_ejm2_p_elobau_neutral_p_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_elobau_ejm2_p_elobau_neutral_p_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_elobau_ejm2_p_elobau_left_p_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_elobau_ejm2_p_elobau_left_p_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_elobau_ejm2_p_elobau_left_p_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_elobau_ejm2_p_elobau_right_p_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_elobau_ejm2_p_elobau_right_p_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_elobau_ejm2_p_elobau_right_p_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_elobau_ejm2_p_elobau_pos_p_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_elobau_ejm2_p_elobau_pos_p_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_elobau_ejm2_p_elobau_pos_p_is_in_range(uint16_t value);

/**
 * Pack message ELOBAU_EJM1_P.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pved_cls_elobau_ejm1_p_pack(
    uint8_t *dst_p,
    const struct pved_cls_elobau_ejm1_p_t *src_p,
    size_t size);

/**
 * Unpack message ELOBAU_EJM1_P.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pved_cls_elobau_ejm1_p_unpack(
    struct pved_cls_elobau_ejm1_p_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_elobau_ejm1_p_elobau_neutral_p_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_elobau_ejm1_p_elobau_neutral_p_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_elobau_ejm1_p_elobau_neutral_p_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_elobau_ejm1_p_elobau_left_p_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_elobau_ejm1_p_elobau_left_p_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_elobau_ejm1_p_elobau_left_p_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_elobau_ejm1_p_elobau_right_p_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_elobau_ejm1_p_elobau_right_p_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_elobau_ejm1_p_elobau_right_p_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_elobau_ejm1_p_elobau_pos_p_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_elobau_ejm1_p_elobau_pos_p_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_elobau_ejm1_p_elobau_pos_p_is_in_range(uint16_t value);

/**
 * Pack message ELOBAU_BJM2_R.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pved_cls_elobau_bjm2_r_pack(
    uint8_t *dst_p,
    const struct pved_cls_elobau_bjm2_r_t *src_p,
    size_t size);

/**
 * Unpack message ELOBAU_BJM2_R.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pved_cls_elobau_bjm2_r_unpack(
    struct pved_cls_elobau_bjm2_r_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_elobau_bjm2_r_elobau_neutral_r_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_elobau_bjm2_r_elobau_neutral_r_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_elobau_bjm2_r_elobau_neutral_r_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_elobau_bjm2_r_elobau_left_r_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_elobau_bjm2_r_elobau_left_r_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_elobau_bjm2_r_elobau_left_r_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_elobau_bjm2_r_elobau_right_r_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_elobau_bjm2_r_elobau_right_r_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_elobau_bjm2_r_elobau_right_r_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_elobau_bjm2_r_elobau_pos_r_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_elobau_bjm2_r_elobau_pos_r_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_elobau_bjm2_r_elobau_pos_r_is_in_range(uint16_t value);

/**
 * Pack message ELOBAU_BJM1_R.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pved_cls_elobau_bjm1_r_pack(
    uint8_t *dst_p,
    const struct pved_cls_elobau_bjm1_r_t *src_p,
    size_t size);

/**
 * Unpack message ELOBAU_BJM1_R.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pved_cls_elobau_bjm1_r_unpack(
    struct pved_cls_elobau_bjm1_r_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_elobau_bjm1_r_elobau_neutral_r_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_elobau_bjm1_r_elobau_neutral_r_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_elobau_bjm1_r_elobau_neutral_r_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_elobau_bjm1_r_elobau_left_r_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_elobau_bjm1_r_elobau_left_r_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_elobau_bjm1_r_elobau_left_r_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_elobau_bjm1_r_elobau_right_r_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_elobau_bjm1_r_elobau_right_r_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_elobau_bjm1_r_elobau_right_r_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_elobau_bjm1_r_elobau_pos_r_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_elobau_bjm1_r_elobau_pos_r_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_elobau_bjm1_r_elobau_pos_r_is_in_range(uint16_t value);

/**
 * Pack message ELOBAU_BJM2_P.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pved_cls_elobau_bjm2_p_pack(
    uint8_t *dst_p,
    const struct pved_cls_elobau_bjm2_p_t *src_p,
    size_t size);

/**
 * Unpack message ELOBAU_BJM2_P.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pved_cls_elobau_bjm2_p_unpack(
    struct pved_cls_elobau_bjm2_p_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_elobau_bjm2_p_elobau_neutral_p_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_elobau_bjm2_p_elobau_neutral_p_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_elobau_bjm2_p_elobau_neutral_p_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_elobau_bjm2_p_elobau_left_p_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_elobau_bjm2_p_elobau_left_p_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_elobau_bjm2_p_elobau_left_p_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_elobau_bjm2_p_elobau_right_p_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_elobau_bjm2_p_elobau_right_p_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_elobau_bjm2_p_elobau_right_p_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_elobau_bjm2_p_elobau_pos_p_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_elobau_bjm2_p_elobau_pos_p_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_elobau_bjm2_p_elobau_pos_p_is_in_range(uint16_t value);

/**
 * Pack message ELOBAU_BJM1_P.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pved_cls_elobau_bjm1_p_pack(
    uint8_t *dst_p,
    const struct pved_cls_elobau_bjm1_p_t *src_p,
    size_t size);

/**
 * Unpack message ELOBAU_BJM1_P.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pved_cls_elobau_bjm1_p_unpack(
    struct pved_cls_elobau_bjm1_p_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_elobau_bjm1_p_elobau_neutral_p_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_elobau_bjm1_p_elobau_neutral_p_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_elobau_bjm1_p_elobau_neutral_p_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_elobau_bjm1_p_elobau_left_p_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_elobau_bjm1_p_elobau_left_p_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_elobau_bjm1_p_elobau_left_p_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_elobau_bjm1_p_elobau_right_p_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_elobau_bjm1_p_elobau_right_p_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_elobau_bjm1_p_elobau_right_p_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_elobau_bjm1_p_elobau_pos_p_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_elobau_bjm1_p_elobau_pos_p_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_elobau_bjm1_p_elobau_pos_p_is_in_range(uint16_t value);

/**
 * Pack message STAT_MSG_7_S.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pved_cls_stat_msg_7_s_pack(
    uint8_t *dst_p,
    const struct pved_cls_stat_msg_7_s_t *src_p,
    size_t size);

/**
 * Unpack message STAT_MSG_7_S.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pved_cls_stat_msg_7_s_unpack(
    struct pved_cls_stat_msg_7_s_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_stat_msg_7_s_joy1_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_7_s_joy1_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_7_s_joy1_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_stat_msg_7_s_joy2_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_7_s_joy2_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_7_s_joy2_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_stat_msg_7_s_joy_flw_req_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_7_s_joy_flw_req_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_7_s_joy_flw_req_s_is_in_range(uint16_t value);

/**
 * Pack message STAT_MSG_7_M.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pved_cls_stat_msg_7_m_pack(
    uint8_t *dst_p,
    const struct pved_cls_stat_msg_7_m_t *src_p,
    size_t size);

/**
 * Unpack message STAT_MSG_7_M.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pved_cls_stat_msg_7_m_unpack(
    struct pved_cls_stat_msg_7_m_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_stat_msg_7_m_joy1_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_7_m_joy1_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_7_m_joy1_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_stat_msg_7_m_joy2_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_7_m_joy2_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_7_m_joy2_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_stat_msg_7_m_joy_flw_req_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_7_m_joy_flw_req_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_7_m_joy_flw_req_m_is_in_range(uint16_t value);

/**
 * Pack message GPS2_GMS.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pved_cls_gps2_gms_pack(
    uint8_t *dst_p,
    const struct pved_cls_gps2_gms_t *src_p,
    size_t size);

/**
 * Unpack message GPS2_GMS.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pved_cls_gps2_gms_unpack(
    struct pved_cls_gps2_gms_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_gps2_gms_gps2_estimated_curvature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_gps2_gms_gps2_estimated_curvature_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_gps2_gms_gps2_estimated_curvature_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_gps2_gms_gps2_system_lockout_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_gps2_gms_gps2_system_lockout_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_gps2_gms_gps2_system_lockout_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_gps2_gms_gps2_system_ready_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_gps2_gms_gps2_system_ready_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_gps2_gms_gps2_system_ready_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_gps2_gms_gps2_str_input_pos_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_gps2_gms_gps2_str_input_pos_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_gps2_gms_gps2_str_input_pos_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_gps2_gms_gps2_req_reset_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_gps2_gms_gps2_req_reset_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_gps2_gms_gps2_req_reset_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_gps2_gms_gps2_limit_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_gps2_gms_gps2_limit_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_gps2_gms_gps2_limit_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_gps2_gms_gps2_exit_reason_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_gps2_gms_gps2_exit_reason_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_gps2_gms_gps2_exit_reason_is_in_range(uint8_t value);

/**
 * Pack message GPS2_GMC.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pved_cls_gps2_gmc_pack(
    uint8_t *dst_p,
    const struct pved_cls_gps2_gmc_t *src_p,
    size_t size);

/**
 * Unpack message GPS2_GMC.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pved_cls_gps2_gmc_unpack(
    struct pved_cls_gps2_gmc_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_gps2_gmc_gps2_curvature_cmd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_gps2_gmc_gps2_curvature_cmd_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_gps2_gmc_gps2_curvature_cmd_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_gps2_gmc_gps2_str_cmd_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_gps2_gmc_gps2_str_cmd_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_gps2_gmc_gps2_str_cmd_status_is_in_range(uint8_t value);

/**
 * Pack message J1939_ACK_S.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pved_cls_j1939_ack_s_pack(
    uint8_t *dst_p,
    const struct pved_cls_j1939_ack_s_t *src_p,
    size_t size);

/**
 * Unpack message J1939_ACK_S.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pved_cls_j1939_ack_s_unpack(
    struct pved_cls_j1939_ack_s_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_j1939_ack_s_control_byte_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_j1939_ack_s_control_byte_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_j1939_ack_s_control_byte_s_is_in_range(uint8_t value);

/**
 * Pack message J1939_ACK_M.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pved_cls_j1939_ack_m_pack(
    uint8_t *dst_p,
    const struct pved_cls_j1939_ack_m_t *src_p,
    size_t size);

/**
 * Unpack message J1939_ACK_M.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pved_cls_j1939_ack_m_unpack(
    struct pved_cls_j1939_ack_m_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_j1939_ack_m_control_byte_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_j1939_ack_m_control_byte_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_j1939_ack_m_control_byte_m_is_in_range(uint8_t value);

/**
 * Pack message REQ_PGN_S.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pved_cls_req_pgn_s_pack(
    uint8_t *dst_p,
    const struct pved_cls_req_pgn_s_t *src_p,
    size_t size);

/**
 * Unpack message REQ_PGN_S.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pved_cls_req_pgn_s_unpack(
    struct pved_cls_req_pgn_s_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_req_pgn_s_req_pgn_msb_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_req_pgn_s_req_pgn_msb_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_req_pgn_s_req_pgn_msb_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_req_pgn_s_req_pgn_lsb_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_req_pgn_s_req_pgn_lsb_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_req_pgn_s_req_pgn_lsb_s_is_in_range(uint8_t value);

/**
 * Pack message REQ_PGN_M.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pved_cls_req_pgn_m_pack(
    uint8_t *dst_p,
    const struct pved_cls_req_pgn_m_t *src_p,
    size_t size);

/**
 * Unpack message REQ_PGN_M.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pved_cls_req_pgn_m_unpack(
    struct pved_cls_req_pgn_m_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_req_pgn_m_req_pgn_msb_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_req_pgn_m_req_pgn_msb_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_req_pgn_m_req_pgn_msb_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_req_pgn_m_req_pgn_lsb_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_req_pgn_m_req_pgn_lsb_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_req_pgn_m_req_pgn_lsb_m_is_in_range(uint8_t value);

/**
 * Pack message DM1_S.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pved_cls_dm1_s_pack(
    uint8_t *dst_p,
    const struct pved_cls_dm1_s_t *src_p,
    size_t size);

/**
 * Unpack message DM1_S.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pved_cls_dm1_s_unpack(
    struct pved_cls_dm1_s_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Pack message DM1_M.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pved_cls_dm1_m_pack(
    uint8_t *dst_p,
    const struct pved_cls_dm1_m_t *src_p,
    size_t size);

/**
 * Unpack message DM1_M.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pved_cls_dm1_m_unpack(
    struct pved_cls_dm1_m_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Pack message SER_TOOL_REPLY_S.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pved_cls_ser_tool_reply_s_pack(
    uint8_t *dst_p,
    const struct pved_cls_ser_tool_reply_s_t *src_p,
    size_t size);

/**
 * Unpack message SER_TOOL_REPLY_S.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pved_cls_ser_tool_reply_s_unpack(
    struct pved_cls_ser_tool_reply_s_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_ser_tool_reply_xid_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_ser_tool_reply_xid_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_ser_tool_reply_xid_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_reply_param_data_length_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_reply_param_data_length_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_reply_param_data_length_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_reply_calib_err_code_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_reply_calib_err_code_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_reply_calib_err_code_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_reply_consistency_chk_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_reply_consistency_chk_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_reply_consistency_chk_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_reply_input_status_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_reply_input_status_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_reply_input_status_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_reply_result_from_ecu_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_reply_result_from_ecu_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_reply_result_from_ecu_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_reply_sensor5_v_state_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_reply_sensor5_v_state_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_reply_sensor5_v_state_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_reply_pos_captured_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_reply_pos_captured_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_reply_pos_captured_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_reply_was_captured_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_reply_was_captured_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_reply_was_captured_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_reply_css_state_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_reply_css_state_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_reply_css_state_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_reply_param_address_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_reply_param_address_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_reply_param_address_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_reply_ad1_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_reply_ad1_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_reply_ad1_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_reply_req_spool_pos_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_reply_req_spool_pos_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_reply_req_spool_pos_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_reply_wa_mov_status_r_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_reply_wa_mov_status_r_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_reply_wa_mov_status_r_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_reply_wa_mov_status_l_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_reply_wa_mov_status_l_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_reply_wa_mov_status_l_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_reply_calibration_progress_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_reply_calibration_progress_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_reply_calibration_progress_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3822_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3822_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3822_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3814_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3814_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3814_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3812_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3812_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3812_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3811_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3811_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3811_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3810_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3810_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3810_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3808_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3808_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3808_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3806_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3806_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3806_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3804_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3804_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3804_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3802_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3802_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3802_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3801_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3801_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3801_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3799_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3799_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3799_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3797_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3797_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3797_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3795_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3795_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3795_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3793_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3793_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3793_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3791_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3791_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3791_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3789_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3789_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3789_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3776_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3776_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3776_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3775_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3775_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3775_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3774_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3774_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3774_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3773_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3773_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3773_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3772_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3772_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3772_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3771_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3771_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3771_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3769_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3769_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3769_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3719_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3719_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3719_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3718_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3718_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3718_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3716_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3716_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3716_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3714_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3714_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3714_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3712_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3712_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3712_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3710_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3710_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3710_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3708_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3708_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3708_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3706_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3706_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3706_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3705_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3705_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3705_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3703_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3703_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3703_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3701_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3701_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3701_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3700_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3700_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3700_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3699_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3699_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3699_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3698_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3698_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3698_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3697_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3697_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3697_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3696_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3696_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3696_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3694_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3694_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3694_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3692_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3692_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3692_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3690_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3690_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3690_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3689_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3689_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3689_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3688_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3688_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3688_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3686_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3686_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3686_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3684_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3684_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3684_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3682_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3682_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3682_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3681_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3681_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3681_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3680_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3680_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3680_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3678_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3678_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3678_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3676_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3676_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3676_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3674_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3674_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3674_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3673_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3673_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3673_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3672_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3672_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3672_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3670_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3670_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3670_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3668_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3668_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3668_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3666_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3666_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3666_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3665_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3665_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3665_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3664_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3664_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3664_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3662_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3662_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3662_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3660_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3660_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3660_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3658_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3658_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3658_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3657_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3657_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3657_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3656_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3656_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3656_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3654_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3654_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3654_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3652_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3652_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3652_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3650_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3650_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3650_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3649_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3649_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3649_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3648_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3648_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3648_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3647_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3647_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3647_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3646_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3646_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3646_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3644_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3644_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3644_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3584_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3584_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3584_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3583_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3583_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3583_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3582_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3582_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3582_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3580_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3580_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3580_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3578_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3578_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3578_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3576_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3576_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3576_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3574_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3574_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3574_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3573_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3573_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3573_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3572_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3572_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3572_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3571_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3571_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3571_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3570_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3570_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3570_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3569_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3569_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3569_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3568_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3568_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3568_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3566_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3566_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3566_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3564_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3564_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3564_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3562_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3562_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3562_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3561_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3561_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3561_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3560_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3560_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3560_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3558_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3558_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3558_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3556_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3556_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3556_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3554_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3554_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3554_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3553_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3553_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3553_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3552_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3552_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3552_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3550_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3550_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3550_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3548_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3548_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3548_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3546_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3546_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3546_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3545_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3545_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3545_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3544_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3544_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3544_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3542_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3542_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3542_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3540_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3540_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3540_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3538_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3538_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3538_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3537_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3537_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3537_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3536_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3536_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3536_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3534_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3534_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3534_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3532_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3532_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3532_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3530_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3530_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3530_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3529_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3529_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3529_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3528_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3528_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3528_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3526_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3526_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3526_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3524_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3524_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3524_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3522_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3522_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3522_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3521_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3521_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3521_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3519_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3519_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3519_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3484_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3484_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3484_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3483_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3483_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3483_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3482_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3482_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3482_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3481_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3481_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3481_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3480_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3480_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3480_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3479_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3479_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3479_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3478_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3478_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3478_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3477_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3477_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3477_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3476_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3476_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3476_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3475_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3475_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3475_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3474_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3474_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3474_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3473_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3473_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3473_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3469_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3469_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3469_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3467_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3467_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3467_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3465_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3465_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3465_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3463_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3463_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3463_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3461_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3461_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3461_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3459_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3459_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3459_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3457_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3457_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3457_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3455_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3455_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3455_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3453_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3453_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3453_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3451_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3451_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3451_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3449_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3449_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3449_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3428_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3428_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3428_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3426_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3426_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3426_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3424_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3424_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3424_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3422_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3422_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3422_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3421_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3421_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3421_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3419_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3419_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3419_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3383_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3383_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3383_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3381_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3381_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3381_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3379_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3379_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3379_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3378_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3378_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3378_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3377_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3377_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3377_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3375_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3375_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3375_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3374_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3374_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3374_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3372_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3372_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3372_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3371_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3371_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3371_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3369_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3369_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3369_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3368_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3368_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3368_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3366_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3366_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3366_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3365_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3365_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3365_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3364_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3364_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3364_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3363_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3363_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3363_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3361_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3361_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3361_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3360_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3360_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3360_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3358_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3358_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3358_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3357_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3357_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3357_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3355_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3355_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3355_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3354_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3354_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3354_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3352_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3352_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3352_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3351_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3351_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3351_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3349_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3349_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3349_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3323_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3323_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3323_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3322_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3322_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3322_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3321_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3321_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3321_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3320_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3320_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3320_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3319_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3319_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3319_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3318_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3318_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3318_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3317_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3317_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3317_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3316_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3316_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3316_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3315_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3315_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3315_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3314_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3314_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3314_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3313_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3313_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3313_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3312_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3312_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3312_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3311_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3311_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3311_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3310_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3310_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3310_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3309_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3309_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3309_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3308_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3308_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3308_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3307_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3307_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3307_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3306_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3306_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3306_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3305_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3305_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3305_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3304_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3304_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3304_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3303_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3303_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3303_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3302_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3302_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3302_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3301_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3301_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3301_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3300_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3300_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3300_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3299_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3299_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3299_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3298_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3298_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3298_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3297_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3297_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3297_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3296_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3296_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3296_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3295_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3295_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3295_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3294_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3294_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3294_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3293_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3293_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3293_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3292_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3292_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3292_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3291_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3291_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3291_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3290_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3290_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3290_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3289_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3289_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3289_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3288_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3288_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3288_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3287_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3287_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3287_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3285_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3285_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3285_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3253_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3253_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3253_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3252_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3252_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3252_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3251_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3251_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3251_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3250_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3250_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3250_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3249_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3249_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3249_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3248_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3248_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3248_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3247_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3247_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3247_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3246_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3246_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3246_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3245_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3245_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3245_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3244_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3244_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3244_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3243_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3243_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3243_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3242_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3242_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3242_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3241_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3241_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3241_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3240_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3240_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3240_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3239_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3239_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3239_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3238_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3238_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3238_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3237_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3237_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3237_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3235_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3235_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3235_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3219_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3219_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3219_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3217_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3217_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3217_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3215_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3215_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3215_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3213_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3213_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3213_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3211_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3211_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3211_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3209_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3209_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3209_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3207_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3207_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3207_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3205_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3205_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3205_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3203_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3203_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3203_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3189_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3189_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3189_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3187_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3187_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3187_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3185_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3185_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3185_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3183_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3183_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3183_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t pved_cls_ser_tool_reply_s_p3170_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3170_s_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3170_s_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t pved_cls_ser_tool_reply_s_p3168_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3168_s_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3168_s_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t pved_cls_ser_tool_reply_s_p3166_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3166_s_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3166_s_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t pved_cls_ser_tool_reply_s_p3164_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3164_s_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3164_s_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t pved_cls_ser_tool_reply_s_p3162_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3162_s_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3162_s_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3160_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3160_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3160_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3134_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3134_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3134_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3133_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3133_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3133_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3132_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3132_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3132_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t pved_cls_ser_tool_reply_s_p3130_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3130_s_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3130_s_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t pved_cls_ser_tool_reply_s_p3128_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3128_s_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3128_s_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3126_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3126_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3126_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3125_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3125_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3125_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3124_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3124_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3124_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3123_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3123_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3123_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3122_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3122_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3122_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3120_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3120_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3120_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3097_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3097_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3097_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t pved_cls_ser_tool_reply_s_p3095_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3095_s_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3095_s_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t pved_cls_ser_tool_reply_s_p3093_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3093_s_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3093_s_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t pved_cls_ser_tool_reply_s_p3091_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3091_s_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3091_s_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3090_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3090_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3090_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3089_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3089_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3089_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3088_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3088_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3088_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3086_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3086_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3086_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3084_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3084_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3084_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3082_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3082_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3082_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3081_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3081_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3081_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3080_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3080_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3080_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3078_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3078_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3078_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3076_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3076_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3076_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_p3074_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3074_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3074_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3073_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3073_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3073_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_p3072_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_p3072_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_p3072_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_reply_spl_set_last_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_reply_spl_set_last_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_reply_spl_set_last_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_reply_ad2_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_reply_ad2_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_reply_ad2_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_s_reply_req_cov_pwm_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_reply_req_cov_pwm_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_reply_req_cov_pwm_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_reply_sensor_voltage_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_reply_sensor_voltage_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_reply_sensor_voltage_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_s_reply_t_last_move_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_s_reply_t_last_move_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_s_reply_t_last_move_s_is_in_range(uint16_t value);

/**
 * Pack message SER_TOOL_REPLY_M.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pved_cls_ser_tool_reply_m_pack(
    uint8_t *dst_p,
    const struct pved_cls_ser_tool_reply_m_t *src_p,
    size_t size);

/**
 * Unpack message SER_TOOL_REPLY_M.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pved_cls_ser_tool_reply_m_unpack(
    struct pved_cls_ser_tool_reply_m_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_ser_tool_reply_xid_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_ser_tool_reply_xid_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_ser_tool_reply_xid_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_reply_param_data_length_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_reply_param_data_length_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_reply_param_data_length_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_reply_calib_err_code_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_reply_calib_err_code_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_reply_calib_err_code_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_reply_consistency_chk_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_reply_consistency_chk_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_reply_consistency_chk_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_reply_input_status_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_reply_input_status_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_reply_input_status_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_reply_result_from_ecu_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_reply_result_from_ecu_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_reply_result_from_ecu_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_reply_sensor5_v_state_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_reply_sensor5_v_state_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_reply_sensor5_v_state_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_reply_pos_captured_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_reply_pos_captured_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_reply_pos_captured_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_reply_was_captured_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_reply_was_captured_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_reply_was_captured_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_reply_css_state_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_reply_css_state_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_reply_css_state_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_reply_param_address_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_reply_param_address_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_reply_param_address_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_reply_ad1_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_reply_ad1_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_reply_ad1_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_reply_req_spool_pos_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_reply_req_spool_pos_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_reply_req_spool_pos_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_reply_wa_mov_status_r_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_reply_wa_mov_status_r_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_reply_wa_mov_status_r_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_reply_wa_mov_status_l_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_reply_wa_mov_status_l_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_reply_wa_mov_status_l_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_reply_calibration_progress_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_reply_calibration_progress_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_reply_calibration_progress_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3822_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3822_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3822_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3814_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3814_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3814_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3812_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3812_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3812_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3811_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3811_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3811_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3810_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3810_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3810_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3808_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3808_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3808_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3806_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3806_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3806_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3804_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3804_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3804_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3802_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3802_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3802_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3801_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3801_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3801_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3799_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3799_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3799_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3797_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3797_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3797_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3795_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3795_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3795_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3793_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3793_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3793_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3791_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3791_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3791_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3789_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3789_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3789_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3776_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3776_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3776_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3775_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3775_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3775_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3774_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3774_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3774_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3773_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3773_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3773_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3772_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3772_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3772_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3771_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3771_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3771_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3769_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3769_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3769_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3719_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3719_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3719_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3718_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3718_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3718_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3716_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3716_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3716_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3714_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3714_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3714_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3712_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3712_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3712_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3710_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3710_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3710_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3708_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3708_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3708_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3706_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3706_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3706_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3705_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3705_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3705_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3703_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3703_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3703_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3701_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3701_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3701_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3700_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3700_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3700_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3699_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3699_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3699_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3698_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3698_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3698_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3697_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3697_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3697_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3696_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3696_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3696_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3694_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3694_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3694_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3692_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3692_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3692_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3690_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3690_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3690_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3689_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3689_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3689_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3688_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3688_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3688_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3686_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3686_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3686_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3684_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3684_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3684_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3682_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3682_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3682_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3681_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3681_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3681_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3680_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3680_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3680_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3678_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3678_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3678_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3676_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3676_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3676_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3674_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3674_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3674_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3673_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3673_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3673_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3672_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3672_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3672_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3670_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3670_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3670_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3668_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3668_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3668_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3666_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3666_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3666_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3665_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3665_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3665_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3664_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3664_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3664_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3662_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3662_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3662_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3660_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3660_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3660_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3658_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3658_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3658_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3657_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3657_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3657_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3656_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3656_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3656_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3654_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3654_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3654_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3652_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3652_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3652_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3650_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3650_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3650_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3649_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3649_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3649_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3648_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3648_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3648_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3647_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3647_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3647_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3646_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3646_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3646_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3644_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3644_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3644_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3584_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3584_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3584_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3583_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3583_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3583_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3582_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3582_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3582_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3580_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3580_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3580_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3578_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3578_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3578_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3576_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3576_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3576_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3574_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3574_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3574_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3573_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3573_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3573_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3572_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3572_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3572_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3571_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3571_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3571_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3570_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3570_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3570_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3569_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3569_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3569_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3568_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3568_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3568_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3566_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3566_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3566_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3564_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3564_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3564_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3562_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3562_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3562_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3561_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3561_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3561_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3560_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3560_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3560_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3558_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3558_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3558_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3556_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3556_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3556_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3554_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3554_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3554_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3553_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3553_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3553_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3552_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3552_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3552_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3550_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3550_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3550_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3548_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3548_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3548_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3546_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3546_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3546_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3545_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3545_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3545_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3544_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3544_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3544_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3542_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3542_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3542_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3540_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3540_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3540_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3538_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3538_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3538_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3537_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3537_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3537_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3536_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3536_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3536_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3534_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3534_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3534_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3532_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3532_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3532_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3530_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3530_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3530_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3529_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3529_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3529_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3528_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3528_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3528_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3526_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3526_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3526_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3524_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3524_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3524_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3522_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3522_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3522_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3521_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3521_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3521_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3519_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3519_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3519_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3484_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3484_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3484_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3483_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3483_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3483_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3482_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3482_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3482_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3481_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3481_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3481_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3480_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3480_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3480_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3479_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3479_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3479_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3478_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3478_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3478_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3477_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3477_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3477_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3476_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3476_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3476_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3475_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3475_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3475_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3474_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3474_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3474_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3473_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3473_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3473_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3469_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3469_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3469_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3467_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3467_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3467_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3465_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3465_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3465_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3463_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3463_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3463_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3461_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3461_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3461_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3459_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3459_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3459_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3457_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3457_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3457_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3455_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3455_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3455_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3453_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3453_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3453_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3451_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3451_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3451_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3449_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3449_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3449_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3428_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3428_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3428_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3426_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3426_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3426_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3424_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3424_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3424_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3422_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3422_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3422_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3421_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3421_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3421_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3419_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3419_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3419_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3383_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3383_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3383_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3381_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3381_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3381_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3379_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3379_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3379_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3378_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3378_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3378_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3377_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3377_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3377_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3375_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3375_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3375_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3374_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3374_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3374_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3372_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3372_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3372_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3371_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3371_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3371_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3369_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3369_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3369_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3368_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3368_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3368_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3366_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3366_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3366_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3365_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3365_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3365_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3364_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3364_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3364_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3363_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3363_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3363_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3361_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3361_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3361_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3360_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3360_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3360_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3358_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3358_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3358_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3357_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3357_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3357_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3355_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3355_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3355_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3354_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3354_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3354_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3352_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3352_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3352_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3351_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3351_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3351_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3349_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3349_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3349_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3323_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3323_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3323_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3322_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3322_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3322_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3321_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3321_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3321_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3320_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3320_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3320_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3319_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3319_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3319_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3318_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3318_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3318_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3317_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3317_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3317_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3316_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3316_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3316_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3315_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3315_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3315_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3314_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3314_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3314_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3313_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3313_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3313_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3312_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3312_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3312_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3311_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3311_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3311_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3310_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3310_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3310_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3309_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3309_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3309_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3308_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3308_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3308_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3307_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3307_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3307_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3306_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3306_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3306_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3305_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3305_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3305_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3304_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3304_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3304_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3303_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3303_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3303_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3302_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3302_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3302_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3301_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3301_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3301_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3300_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3300_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3300_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3299_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3299_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3299_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3298_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3298_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3298_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3297_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3297_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3297_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3296_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3296_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3296_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3295_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3295_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3295_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3294_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3294_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3294_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3293_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3293_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3293_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3292_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3292_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3292_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3291_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3291_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3291_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3290_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3290_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3290_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3289_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3289_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3289_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3288_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3288_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3288_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3287_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3287_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3287_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3285_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3285_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3285_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3253_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3253_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3253_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3252_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3252_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3252_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3251_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3251_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3251_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3250_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3250_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3250_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3249_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3249_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3249_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3248_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3248_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3248_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3247_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3247_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3247_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3246_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3246_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3246_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3245_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3245_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3245_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3244_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3244_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3244_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3243_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3243_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3243_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3242_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3242_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3242_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3241_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3241_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3241_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3240_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3240_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3240_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3239_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3239_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3239_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3238_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3238_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3238_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3237_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3237_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3237_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3235_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3235_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3235_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3219_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3219_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3219_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3217_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3217_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3217_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3215_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3215_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3215_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3213_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3213_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3213_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3211_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3211_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3211_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3209_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3209_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3209_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3207_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3207_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3207_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3205_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3205_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3205_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3203_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3203_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3203_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3189_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3189_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3189_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3187_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3187_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3187_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3185_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3185_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3185_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3183_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3183_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3183_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t pved_cls_ser_tool_reply_m_p3170_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3170_m_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3170_m_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t pved_cls_ser_tool_reply_m_p3168_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3168_m_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3168_m_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t pved_cls_ser_tool_reply_m_p3166_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3166_m_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3166_m_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t pved_cls_ser_tool_reply_m_p3164_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3164_m_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3164_m_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t pved_cls_ser_tool_reply_m_p3162_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3162_m_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3162_m_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3160_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3160_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3160_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3134_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3134_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3134_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3133_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3133_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3133_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3132_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3132_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3132_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t pved_cls_ser_tool_reply_m_p3130_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3130_m_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3130_m_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t pved_cls_ser_tool_reply_m_p3128_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3128_m_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3128_m_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3126_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3126_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3126_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3125_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3125_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3125_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3124_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3124_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3124_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3123_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3123_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3123_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3122_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3122_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3122_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3120_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3120_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3120_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3097_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3097_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3097_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t pved_cls_ser_tool_reply_m_p3095_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3095_m_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3095_m_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t pved_cls_ser_tool_reply_m_p3093_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3093_m_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3093_m_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t pved_cls_ser_tool_reply_m_p3091_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3091_m_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3091_m_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3090_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3090_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3090_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3089_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3089_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3089_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3088_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3088_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3088_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3086_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3086_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3086_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3084_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3084_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3084_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3082_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3082_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3082_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3081_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3081_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3081_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3080_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3080_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3080_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3078_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3078_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3078_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3076_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3076_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3076_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_p3074_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3074_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3074_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3073_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3073_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3073_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_p3072_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_p3072_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_p3072_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_reply_spl_set_last_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_reply_spl_set_last_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_reply_spl_set_last_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_reply_ad2_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_reply_ad2_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_reply_ad2_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_reply_m_reply_req_cov_pwm_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_reply_req_cov_pwm_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_reply_req_cov_pwm_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_reply_sensor_voltage_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_reply_sensor_voltage_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_reply_sensor_voltage_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_reply_m_reply_t_last_move_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_reply_m_reply_t_last_move_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_reply_m_reply_t_last_move_m_is_in_range(uint16_t value);

/**
 * Pack message SER_TOOL_REQ_S.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pved_cls_ser_tool_req_s_pack(
    uint8_t *dst_p,
    const struct pved_cls_ser_tool_req_s_t *src_p,
    size_t size);

/**
 * Unpack message SER_TOOL_REQ_S.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pved_cls_ser_tool_req_s_unpack(
    struct pved_cls_ser_tool_req_s_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_req_s_ser_tool_req_xid_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_req_s_ser_tool_req_xid_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_req_s_ser_tool_req_xid_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_req_s_tx_rate_stat_msg_7_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_req_s_tx_rate_stat_msg_7_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_req_s_tx_rate_stat_msg_7_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_req_s_req_wa_sweep_angle_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_req_s_req_wa_sweep_angle_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_req_s_req_wa_sweep_angle_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_req_s_req_param_data_length_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_req_s_req_param_data_length_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_req_s_req_param_data_length_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_req_s_tx_rate_stat_msg_op_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_req_s_tx_rate_stat_msg_op_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_req_s_tx_rate_stat_msg_op_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_req_s_req_service_mode_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_req_s_req_service_mode_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_req_s_req_service_mode_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_req_s_req_sensor5_v_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_req_s_req_sensor5_v_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_req_s_req_sensor5_v_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_req_s_req_ans_capture_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_req_s_req_ans_capture_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_req_s_req_ans_capture_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_req_s_req_css_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_req_s_req_css_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_req_s_req_css_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_req_s_tx_rate_stat_msg_8_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_req_s_tx_rate_stat_msg_8_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_req_s_tx_rate_stat_msg_8_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_req_s_req_param_address_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_req_s_req_param_address_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_req_s_req_param_address_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_req_s_tx_rate_stat_msg_1_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_req_s_tx_rate_stat_msg_1_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_req_s_tx_rate_stat_msg_1_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_req_s_req_spl_init_sp_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_req_s_req_spl_init_sp_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_req_s_req_spl_init_sp_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_req_s_req_spool_pos_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_req_s_req_spool_pos_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_req_s_req_spool_pos_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_req_s_req_service_mode_chk_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_req_s_req_service_mode_chk_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_req_s_req_service_mode_chk_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_req_s_tx_rate_stat_msg_2_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_req_s_tx_rate_stat_msg_2_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_req_s_tx_rate_stat_msg_2_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_req_s_tx_rate_stat_msg_3_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_req_s_tx_rate_stat_msg_3_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_req_s_tx_rate_stat_msg_3_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_req_s_req_spl_calib_tmin_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_req_s_req_spl_calib_tmin_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_req_s_req_spl_calib_tmin_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_req_s_req_cov_pwm_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_req_s_req_cov_pwm_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_req_s_req_cov_pwm_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_req_s_tx_rate_stat_msg_4_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_req_s_tx_rate_stat_msg_4_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_req_s_tx_rate_stat_msg_4_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_req_s_req_spl_calib_tmax_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_req_s_req_spl_calib_tmax_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_req_s_req_spl_calib_tmax_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_req_s_tx_rate_stat_msg_5_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_req_s_tx_rate_stat_msg_5_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_req_s_tx_rate_stat_msg_5_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_req_s_tx_rate_stat_msg_6_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_req_s_tx_rate_stat_msg_6_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_req_s_tx_rate_stat_msg_6_s_is_in_range(uint8_t value);

/**
 * Pack message SER_TOOL_REQ_M.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pved_cls_ser_tool_req_m_pack(
    uint8_t *dst_p,
    const struct pved_cls_ser_tool_req_m_t *src_p,
    size_t size);

/**
 * Unpack message SER_TOOL_REQ_M.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pved_cls_ser_tool_req_m_unpack(
    struct pved_cls_ser_tool_req_m_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_req_m_ser_tool_req_xid_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_req_m_ser_tool_req_xid_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_req_m_ser_tool_req_xid_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_req_m_tx_rate_stat_msg_7_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_req_m_tx_rate_stat_msg_7_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_req_m_tx_rate_stat_msg_7_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_req_m_req_param_data_length_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_req_m_req_param_data_length_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_req_m_req_param_data_length_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_req_m_tx_rate_stat_msg_op_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_req_m_tx_rate_stat_msg_op_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_req_m_tx_rate_stat_msg_op_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_req_m_req_wa_sweep_angle_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_req_m_req_wa_sweep_angle_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_req_m_req_wa_sweep_angle_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_req_m_req_service_mode_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_req_m_req_service_mode_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_req_m_req_service_mode_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_req_m_req_sensor5_v_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_req_m_req_sensor5_v_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_req_m_req_sensor5_v_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_req_m_req_ans_capture_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_req_m_req_ans_capture_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_req_m_req_ans_capture_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_req_m_req_css_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_req_m_req_css_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_req_m_req_css_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_req_m_tx_rate_stat_msg_8_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_req_m_tx_rate_stat_msg_8_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_req_m_tx_rate_stat_msg_8_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_req_m_req_param_address_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_req_m_req_param_address_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_req_m_req_param_address_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_req_m_tx_rate_stat_msg_1_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_req_m_tx_rate_stat_msg_1_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_req_m_tx_rate_stat_msg_1_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_req_m_req_spl_init_sp_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_req_m_req_spl_init_sp_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_req_m_req_spl_init_sp_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_req_m_req_spool_pos_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_req_m_req_spool_pos_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_req_m_req_spool_pos_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_ser_tool_req_m_req_service_mode_chk_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_req_m_req_service_mode_chk_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_req_m_req_service_mode_chk_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_req_m_tx_rate_stat_msg_2_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_req_m_tx_rate_stat_msg_2_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_req_m_tx_rate_stat_msg_2_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_req_m_tx_rate_stat_msg_3_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_req_m_tx_rate_stat_msg_3_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_req_m_tx_rate_stat_msg_3_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_req_m_req_spl_calib_tmin_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_req_m_req_spl_calib_tmin_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_req_m_req_spl_calib_tmin_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_req_m_req_cov_pwm_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_req_m_req_cov_pwm_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_req_m_req_cov_pwm_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_req_m_tx_rate_stat_msg_4_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_req_m_tx_rate_stat_msg_4_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_req_m_tx_rate_stat_msg_4_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_req_m_req_spl_calib_tmax_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_req_m_req_spl_calib_tmax_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_req_m_req_spl_calib_tmax_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_req_m_tx_rate_stat_msg_5_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_req_m_tx_rate_stat_msg_5_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_req_m_tx_rate_stat_msg_5_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_ser_tool_req_m_tx_rate_stat_msg_6_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_ser_tool_req_m_tx_rate_stat_msg_6_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_ser_tool_req_m_tx_rate_stat_msg_6_m_is_in_range(uint8_t value);

/**
 * Pack message STR_FB_MSG_S.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pved_cls_str_fb_msg_s_pack(
    uint8_t *dst_p,
    const struct pved_cls_str_fb_msg_s_t *src_p,
    size_t size);

/**
 * Unpack message STR_FB_MSG_S.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pved_cls_str_fb_msg_s_unpack(
    struct pved_cls_str_fb_msg_s_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_str_fb_msg_s_str_fb_est_flow_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_str_fb_msg_s_str_fb_est_flow_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_str_fb_msg_s_str_fb_est_flow_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_str_fb_msg_s_str_fb_est_wa_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_str_fb_msg_s_str_fb_est_wa_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_str_fb_msg_s_str_fb_est_wa_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_str_fb_msg_s_str_fb_stw_l2_l_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_str_fb_msg_s_str_fb_stw_l2_l_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_str_fb_msg_s_str_fb_stw_l2_l_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_str_fb_msg_s_str_fb_seq_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_str_fb_msg_s_str_fb_seq_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_str_fb_msg_s_str_fb_seq_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_str_fb_msg_s_imd_stw_status_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_str_fb_msg_s_imd_stw_status_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_str_fb_msg_s_imd_stw_status_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_str_fb_msg_s_str_fb_crc_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_str_fb_msg_s_str_fb_crc_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_str_fb_msg_s_str_fb_crc_s_is_in_range(uint16_t value);

/**
 * Pack message STR_FB_MSG_M.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pved_cls_str_fb_msg_m_pack(
    uint8_t *dst_p,
    const struct pved_cls_str_fb_msg_m_t *src_p,
    size_t size);

/**
 * Unpack message STR_FB_MSG_M.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pved_cls_str_fb_msg_m_unpack(
    struct pved_cls_str_fb_msg_m_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_str_fb_msg_m_str_fb_est_flow_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_str_fb_msg_m_str_fb_est_flow_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_str_fb_msg_m_str_fb_est_flow_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_str_fb_msg_m_str_fb_est_wa_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_str_fb_msg_m_str_fb_est_wa_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_str_fb_msg_m_str_fb_est_wa_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_str_fb_msg_m_str_fb_stw_l2_l_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_str_fb_msg_m_str_fb_stw_l2_l_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_str_fb_msg_m_str_fb_stw_l2_l_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_str_fb_msg_m_str_fb_seq_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_str_fb_msg_m_str_fb_seq_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_str_fb_msg_m_str_fb_seq_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_str_fb_msg_m_imd_stw_status_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_str_fb_msg_m_imd_stw_status_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_str_fb_msg_m_imd_stw_status_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_str_fb_msg_m_str_fb_crc_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_str_fb_msg_m_str_fb_crc_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_str_fb_msg_m_str_fb_crc_m_is_in_range(uint16_t value);

/**
 * Pack message AUX_JOY_P.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pved_cls_aux_joy_p_pack(
    uint8_t *dst_p,
    const struct pved_cls_aux_joy_p_t *src_p,
    size_t size);

/**
 * Unpack message AUX_JOY_P.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pved_cls_aux_joy_p_unpack(
    struct pved_cls_aux_joy_p_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_aux_joy_p_aux_joy_pos_p_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_aux_joy_p_aux_joy_pos_p_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_aux_joy_p_aux_joy_pos_p_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_aux_joy_p_aux_joy_cl_trim_p_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_aux_joy_p_aux_joy_cl_trim_p_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_aux_joy_p_aux_joy_cl_trim_p_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_aux_joy_p_aux_joy_cl_enable_p_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_aux_joy_p_aux_joy_cl_enable_p_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_aux_joy_p_aux_joy_cl_enable_p_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_aux_joy_p_aux_joy_seq_p_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_aux_joy_p_aux_joy_seq_p_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_aux_joy_p_aux_joy_seq_p_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_aux_joy_p_aux_joy_cl_error_code_p_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_aux_joy_p_aux_joy_cl_error_code_p_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_aux_joy_p_aux_joy_cl_error_code_p_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_aux_joy_p_aux_joy_crc_p_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_aux_joy_p_aux_joy_crc_p_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_aux_joy_p_aux_joy_crc_p_is_in_range(uint16_t value);

/**
 * Pack message AUX_JOY_R.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pved_cls_aux_joy_r_pack(
    uint8_t *dst_p,
    const struct pved_cls_aux_joy_r_t *src_p,
    size_t size);

/**
 * Unpack message AUX_JOY_R.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pved_cls_aux_joy_r_unpack(
    struct pved_cls_aux_joy_r_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_aux_joy_r_aux_joy_pos_r_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_aux_joy_r_aux_joy_pos_r_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_aux_joy_r_aux_joy_pos_r_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_aux_joy_r_aux_joy_cl_trim_r_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_aux_joy_r_aux_joy_cl_trim_r_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_aux_joy_r_aux_joy_cl_trim_r_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_aux_joy_r_aux_joy_cl_enable_r_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_aux_joy_r_aux_joy_cl_enable_r_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_aux_joy_r_aux_joy_cl_enable_r_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_aux_joy_r_aux_joy_seq_r_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_aux_joy_r_aux_joy_seq_r_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_aux_joy_r_aux_joy_seq_r_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_aux_joy_r_aux_joy_cl_error_code_r_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_aux_joy_r_aux_joy_cl_error_code_r_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_aux_joy_r_aux_joy_cl_error_code_r_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_aux_joy_r_aux_joy_crc_r_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_aux_joy_r_aux_joy_crc_r_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_aux_joy_r_aux_joy_crc_r_is_in_range(uint16_t value);

/**
 * Pack message AUX_STW_R.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pved_cls_aux_stw_r_pack(
    uint8_t *dst_p,
    const struct pved_cls_aux_stw_r_t *src_p,
    size_t size);

/**
 * Unpack message AUX_STW_R.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pved_cls_aux_stw_r_unpack(
    struct pved_cls_aux_stw_r_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_aux_stw_r_aux_stw_pos_r_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_aux_stw_r_aux_stw_pos_r_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_aux_stw_r_aux_stw_pos_r_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_aux_stw_r_aux_stw_velocity_r_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_aux_stw_r_aux_stw_velocity_r_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_aux_stw_r_aux_stw_velocity_r_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_aux_stw_r_aux_stw_seq_r_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_aux_stw_r_aux_stw_seq_r_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_aux_stw_r_aux_stw_seq_r_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_aux_stw_r_aux_stw_error_code_r_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_aux_stw_r_aux_stw_error_code_r_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_aux_stw_r_aux_stw_error_code_r_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_aux_stw_r_aux_stw_crc_r_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_aux_stw_r_aux_stw_crc_r_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_aux_stw_r_aux_stw_crc_r_is_in_range(uint16_t value);

/**
 * Pack message AUX_STW_P.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pved_cls_aux_stw_p_pack(
    uint8_t *dst_p,
    const struct pved_cls_aux_stw_p_t *src_p,
    size_t size);

/**
 * Unpack message AUX_STW_P.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pved_cls_aux_stw_p_unpack(
    struct pved_cls_aux_stw_p_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_aux_stw_p_aux_stw_pos_p_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_aux_stw_p_aux_stw_pos_p_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_aux_stw_p_aux_stw_pos_p_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_aux_stw_p_aux_stw_velocity_p_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_aux_stw_p_aux_stw_velocity_p_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_aux_stw_p_aux_stw_velocity_p_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_aux_stw_p_aux_stw_seq_p_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_aux_stw_p_aux_stw_seq_p_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_aux_stw_p_aux_stw_seq_p_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_aux_stw_p_aux_stw_error_code_p_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_aux_stw_p_aux_stw_error_code_p_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_aux_stw_p_aux_stw_error_code_p_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_aux_stw_p_aux_stw_crc_p_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_aux_stw_p_aux_stw_crc_p_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_aux_stw_p_aux_stw_crc_p_is_in_range(uint16_t value);

/**
 * Pack message WAS_P.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pved_cls_was_p_pack(
    uint8_t *dst_p,
    const struct pved_cls_was_p_t *src_p,
    size_t size);

/**
 * Unpack message WAS_P.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pved_cls_was_p_unpack(
    struct pved_cls_was_p_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_was_p_was_wa_p_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_was_p_was_wa_p_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_was_p_was_wa_p_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_was_p_was_seq_p_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_was_p_was_seq_p_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_was_p_was_seq_p_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_was_p_was_crc_p_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_was_p_was_crc_p_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_was_p_was_crc_p_is_in_range(uint16_t value);

/**
 * Pack message WAS_R.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pved_cls_was_r_pack(
    uint8_t *dst_p,
    const struct pved_cls_was_r_t *src_p,
    size_t size);

/**
 * Unpack message WAS_R.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pved_cls_was_r_unpack(
    struct pved_cls_was_r_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_was_r_was_wa_r_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_was_r_was_wa_r_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_was_r_was_wa_r_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_was_r_was_seq_r_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_was_r_was_seq_r_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_was_r_was_seq_r_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_was_r_was_crc_r_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_was_r_was_crc_r_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_was_r_was_crc_r_is_in_range(uint16_t value);

/**
 * Pack message STW_R.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pved_cls_stw_r_pack(
    uint8_t *dst_p,
    const struct pved_cls_stw_r_t *src_p,
    size_t size);

/**
 * Unpack message STW_R.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pved_cls_stw_r_unpack(
    struct pved_cls_stw_r_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_stw_r_stw_pos_r_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stw_r_stw_pos_r_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stw_r_stw_pos_r_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_stw_r_stw_velocity_r_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stw_r_stw_velocity_r_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stw_r_stw_velocity_r_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_stw_r_stw_seq_r_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stw_r_stw_seq_r_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stw_r_stw_seq_r_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_stw_r_stw_error_code_r_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stw_r_stw_error_code_r_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stw_r_stw_error_code_r_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_stw_r_stw_crc_r_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stw_r_stw_crc_r_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stw_r_stw_crc_r_is_in_range(uint16_t value);

/**
 * Pack message STW_P.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pved_cls_stw_p_pack(
    uint8_t *dst_p,
    const struct pved_cls_stw_p_t *src_p,
    size_t size);

/**
 * Unpack message STW_P.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pved_cls_stw_p_unpack(
    struct pved_cls_stw_p_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_stw_p_stw_pos_p_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stw_p_stw_pos_p_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stw_p_stw_pos_p_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_stw_p_stw_velocity_p_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stw_p_stw_velocity_p_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stw_p_stw_velocity_p_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_stw_p_stw_seq_p_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stw_p_stw_seq_p_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stw_p_stw_seq_p_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_stw_p_stw_error_code_p_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stw_p_stw_error_code_p_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stw_p_stw_error_code_p_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_stw_p_stw_crc_p_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stw_p_stw_crc_p_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stw_p_stw_crc_p_is_in_range(uint16_t value);

/**
 * Pack message STAT_MSG_6_S.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pved_cls_stat_msg_6_s_pack(
    uint8_t *dst_p,
    const struct pved_cls_stat_msg_6_s_t *src_p,
    size_t size);

/**
 * Unpack message STAT_MSG_6_S.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pved_cls_stat_msg_6_s_unpack(
    struct pved_cls_stat_msg_6_s_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_stat_msg_6_s_avg_cpu_load_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_6_s_avg_cpu_load_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_6_s_avg_cpu_load_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_stat_msg_6_s_spi_flow_command_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_6_s_spi_flow_command_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_6_s_spi_flow_command_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_stat_msg_6_s_was2_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_6_s_was2_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_6_s_was2_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_stat_msg_6_s_spool_monitoring_timeout_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_6_s_spool_monitoring_timeout_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_6_s_spool_monitoring_timeout_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_stat_msg_6_s_spool_monitoring_time_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_6_s_spool_monitoring_time_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_6_s_spool_monitoring_time_s_is_in_range(uint8_t value);

/**
 * Pack message STAT_MSG_6_M.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pved_cls_stat_msg_6_m_pack(
    uint8_t *dst_p,
    const struct pved_cls_stat_msg_6_m_t *src_p,
    size_t size);

/**
 * Unpack message STAT_MSG_6_M.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pved_cls_stat_msg_6_m_unpack(
    struct pved_cls_stat_msg_6_m_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_stat_msg_6_m_avg_cpu_load_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_6_m_avg_cpu_load_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_6_m_avg_cpu_load_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_stat_msg_6_m_spi_flow_command_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_6_m_spi_flow_command_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_6_m_spi_flow_command_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_stat_msg_6_m_was2_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_6_m_was2_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_6_m_was2_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_stat_msg_6_m_spool_monitoring_timeout_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_6_m_spool_monitoring_timeout_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_6_m_spool_monitoring_timeout_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_stat_msg_6_m_spool_monitoring_time_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_6_m_spool_monitoring_time_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_6_m_spool_monitoring_time_m_is_in_range(uint8_t value);

/**
 * Pack message STAT_MSG_5_S.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pved_cls_stat_msg_5_s_pack(
    uint8_t *dst_p,
    const struct pved_cls_stat_msg_5_s_t *src_p,
    size_t size);

/**
 * Unpack message STAT_MSG_5_S.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pved_cls_stat_msg_5_s_unpack(
    struct pved_cls_stat_msg_5_s_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_stat_msg_5_s_fda_err_condition_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_5_s_fda_err_condition_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_5_s_fda_err_condition_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_stat_msg_5_s_fda_spl_indication_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_5_s_fda_spl_indication_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_5_s_fda_spl_indication_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_stat_msg_5_s_fda_was_indication_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_5_s_fda_was_indication_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_5_s_fda_was_indication_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_stat_msg_5_s_fda_stw_indication_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_5_s_fda_stw_indication_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_5_s_fda_stw_indication_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_stat_msg_5_s_fda_fault_condition_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_5_s_fda_fault_condition_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_5_s_fda_fault_condition_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_stat_msg_5_s_was_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_5_s_was_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_5_s_was_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_stat_msg_5_s_fda_spool_position_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_5_s_fda_spool_position_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_5_s_fda_spool_position_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_stat_msg_5_s_fda_confidence_counter_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_5_s_fda_confidence_counter_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_5_s_fda_confidence_counter_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_stat_msg_5_s_fda_stw_velocity_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_5_s_fda_stw_velocity_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_5_s_fda_stw_velocity_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_stat_msg_5_s_spl_diag_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_5_s_spl_diag_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_5_s_spl_diag_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_stat_msg_5_s_spl_ctrl_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_5_s_spl_ctrl_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_5_s_spl_ctrl_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_stat_msg_5_s_fda_muted_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_5_s_fda_muted_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_5_s_fda_muted_s_is_in_range(uint8_t value);

/**
 * Pack message STAT_MSG_4_S.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pved_cls_stat_msg_4_s_pack(
    uint8_t *dst_p,
    const struct pved_cls_stat_msg_4_s_t *src_p,
    size_t size);

/**
 * Unpack message STAT_MSG_4_S.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pved_cls_stat_msg_4_s_unpack(
    struct pved_cls_stat_msg_4_s_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_stat_msg_4_s_flow_cmd_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_4_s_flow_cmd_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_4_s_flow_cmd_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_stat_msg_4_s_ideal_oil_vol_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_4_s_ideal_oil_vol_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_4_s_ideal_oil_vol_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_stat_msg_4_s_flow_setpoint_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_4_s_flow_setpoint_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_4_s_flow_setpoint_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_stat_msg_4_s_efu_stw_difference_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_4_s_efu_stw_difference_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_4_s_efu_stw_difference_s_is_in_range(uint16_t value);

/**
 * Pack message STAT_MSG_4_M.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pved_cls_stat_msg_4_m_pack(
    uint8_t *dst_p,
    const struct pved_cls_stat_msg_4_m_t *src_p,
    size_t size);

/**
 * Unpack message STAT_MSG_4_M.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pved_cls_stat_msg_4_m_unpack(
    struct pved_cls_stat_msg_4_m_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_stat_msg_4_m_flow_cmd_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_4_m_flow_cmd_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_4_m_flow_cmd_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_stat_msg_4_m_ideal_oil_vol_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_4_m_ideal_oil_vol_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_4_m_ideal_oil_vol_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_stat_msg_4_m_flow_setpoint_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_4_m_flow_setpoint_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_4_m_flow_setpoint_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_stat_msg_4_m_efu_stw_difference_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_4_m_efu_stw_difference_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_4_m_efu_stw_difference_m_is_in_range(uint16_t value);

/**
 * Pack message ADR_CLAIMED_S.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pved_cls_adr_claimed_s_pack(
    uint8_t *dst_p,
    const struct pved_cls_adr_claimed_s_t *src_p,
    size_t size);

/**
 * Unpack message ADR_CLAIMED_S.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pved_cls_adr_claimed_s_unpack(
    struct pved_cls_adr_claimed_s_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Pack message ADR_CLAIMED_M.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pved_cls_adr_claimed_m_pack(
    uint8_t *dst_p,
    const struct pved_cls_adr_claimed_m_t *src_p,
    size_t size);

/**
 * Unpack message ADR_CLAIMED_M.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pved_cls_adr_claimed_m_unpack(
    struct pved_cls_adr_claimed_m_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Pack message STAT_MSG_5_M.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pved_cls_stat_msg_5_m_pack(
    uint8_t *dst_p,
    const struct pved_cls_stat_msg_5_m_t *src_p,
    size_t size);

/**
 * Unpack message STAT_MSG_5_M.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pved_cls_stat_msg_5_m_unpack(
    struct pved_cls_stat_msg_5_m_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_stat_msg_5_m_fda_err_condition_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_5_m_fda_err_condition_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_5_m_fda_err_condition_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_stat_msg_5_m_fda_spl_indication_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_5_m_fda_spl_indication_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_5_m_fda_spl_indication_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_stat_msg_5_m_fda_was_indication_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_5_m_fda_was_indication_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_5_m_fda_was_indication_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_stat_msg_5_m_fda_stw_indication_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_5_m_fda_stw_indication_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_5_m_fda_stw_indication_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_stat_msg_5_m_fda_fault_condition_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_5_m_fda_fault_condition_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_5_m_fda_fault_condition_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_stat_msg_5_m_was_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_5_m_was_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_5_m_was_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_stat_msg_5_m_fda_spool_position_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_5_m_fda_spool_position_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_5_m_fda_spool_position_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_stat_msg_5_m_fda_confidence_counter_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_5_m_fda_confidence_counter_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_5_m_fda_confidence_counter_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_stat_msg_5_m_fda_stw_velocity_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_5_m_fda_stw_velocity_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_5_m_fda_stw_velocity_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_stat_msg_5_m_spl_diag_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_5_m_spl_diag_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_5_m_spl_diag_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_stat_msg_5_m_spl_ctrl_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_5_m_spl_ctrl_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_5_m_spl_ctrl_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_stat_msg_5_m_fda_muted_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_5_m_fda_muted_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_5_m_fda_muted_m_is_in_range(uint8_t value);

/**
 * Pack message GPS1_GMS.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pved_cls_gps1_gms_pack(
    uint8_t *dst_p,
    const struct pved_cls_gps1_gms_t *src_p,
    size_t size);

/**
 * Unpack message GPS1_GMS.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pved_cls_gps1_gms_unpack(
    struct pved_cls_gps1_gms_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_gps1_gms_gps1_estimated_curvature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_gps1_gms_gps1_estimated_curvature_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_gps1_gms_gps1_estimated_curvature_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_gps1_gms_gps1_system_lockout_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_gps1_gms_gps1_system_lockout_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_gps1_gms_gps1_system_lockout_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_gps1_gms_gps1_system_ready_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_gps1_gms_gps1_system_ready_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_gps1_gms_gps1_system_ready_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_gps1_gms_gps1_str_input_pos_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_gps1_gms_gps1_str_input_pos_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_gps1_gms_gps1_str_input_pos_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_gps1_gms_gps1_req_reset_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_gps1_gms_gps1_req_reset_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_gps1_gms_gps1_req_reset_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_gps1_gms_gps1_limit_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_gps1_gms_gps1_limit_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_gps1_gms_gps1_limit_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_gps1_gms_gps1_exit_reason_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_gps1_gms_gps1_exit_reason_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_gps1_gms_gps1_exit_reason_is_in_range(uint8_t value);

/**
 * Pack message GPS1_GMC.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pved_cls_gps1_gmc_pack(
    uint8_t *dst_p,
    const struct pved_cls_gps1_gmc_t *src_p,
    size_t size);

/**
 * Unpack message GPS1_GMC.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pved_cls_gps1_gmc_unpack(
    struct pved_cls_gps1_gmc_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_gps1_gmc_gps1_curvature_cmd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_gps1_gmc_gps1_curvature_cmd_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_gps1_gmc_gps1_curvature_cmd_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_gps1_gmc_gps1_str_cmd_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_gps1_gmc_gps1_str_cmd_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_gps1_gmc_gps1_str_cmd_status_is_in_range(uint8_t value);

/**
 * Pack message MMI_R.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pved_cls_mmi_r_pack(
    uint8_t *dst_p,
    const struct pved_cls_mmi_r_t *src_p,
    size_t size);

/**
 * Unpack message MMI_R.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pved_cls_mmi_r_unpack(
    struct pved_cls_mmi_r_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_mmi_r_mmi_xid_res_r_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_mmi_r_mmi_xid_res_r_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_mmi_r_mmi_xid_res_r_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_mmi_r_mmi_str_mode_req_r_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_mmi_r_mmi_str_mode_req_r_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_mmi_r_mmi_str_mode_req_r_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_mmi_r_mmi_lockout_aux_r_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_mmi_r_mmi_lockout_aux_r_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_mmi_r_mmi_lockout_aux_r_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_mmi_r_mmi_lockout_gps_r_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_mmi_r_mmi_lockout_gps_r_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_mmi_r_mmi_lockout_gps_r_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_mmi_r_mmi_aux_mode_req_r_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_mmi_r_mmi_aux_mode_req_r_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_mmi_r_mmi_aux_mode_req_r_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_mmi_r_mmi_seq_r_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_mmi_r_mmi_seq_r_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_mmi_r_mmi_seq_r_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_mmi_r_mmi_crc_r_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_mmi_r_mmi_crc_r_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_mmi_r_mmi_crc_r_is_in_range(uint16_t value);

/**
 * Pack message MMI_P.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pved_cls_mmi_p_pack(
    uint8_t *dst_p,
    const struct pved_cls_mmi_p_t *src_p,
    size_t size);

/**
 * Unpack message MMI_P.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pved_cls_mmi_p_unpack(
    struct pved_cls_mmi_p_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_mmi_p_mmi_xid_res_p_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_mmi_p_mmi_xid_res_p_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_mmi_p_mmi_xid_res_p_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_mmi_p_mmi_str_mode_req_p_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_mmi_p_mmi_str_mode_req_p_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_mmi_p_mmi_str_mode_req_p_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_mmi_p_mmi_lockout_aux_p_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_mmi_p_mmi_lockout_aux_p_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_mmi_p_mmi_lockout_aux_p_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_mmi_p_mmi_lockout_gps_p_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_mmi_p_mmi_lockout_gps_p_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_mmi_p_mmi_lockout_gps_p_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_mmi_p_mmi_aux_mode_req_p_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_mmi_p_mmi_aux_mode_req_p_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_mmi_p_mmi_aux_mode_req_p_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_mmi_p_mmi_seq_p_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_mmi_p_mmi_seq_p_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_mmi_p_mmi_seq_p_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_mmi_p_mmi_crc_p_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_mmi_p_mmi_crc_p_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_mmi_p_mmi_crc_p_is_in_range(uint16_t value);

/**
 * Pack message VSP_R.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pved_cls_vsp_r_pack(
    uint8_t *dst_p,
    const struct pved_cls_vsp_r_t *src_p,
    size_t size);

/**
 * Unpack message VSP_R.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pved_cls_vsp_r_unpack(
    struct pved_cls_vsp_r_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_vsp_r_vsp_dir_r_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_vsp_r_vsp_dir_r_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_vsp_r_vsp_dir_r_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_vsp_r_vsp_speed_r_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_vsp_r_vsp_speed_r_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_vsp_r_vsp_speed_r_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_vsp_r_vsp_seq_r_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_vsp_r_vsp_seq_r_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_vsp_r_vsp_seq_r_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_vsp_r_vsp_crc_r_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_vsp_r_vsp_crc_r_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_vsp_r_vsp_crc_r_is_in_range(uint16_t value);

/**
 * Pack message VSP_P.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pved_cls_vsp_p_pack(
    uint8_t *dst_p,
    const struct pved_cls_vsp_p_t *src_p,
    size_t size);

/**
 * Unpack message VSP_P.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pved_cls_vsp_p_unpack(
    struct pved_cls_vsp_p_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_vsp_p_vsp_dir_p_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_vsp_p_vsp_dir_p_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_vsp_p_vsp_dir_p_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_vsp_p_vsp_speed_p_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_vsp_p_vsp_speed_p_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_vsp_p_vsp_speed_p_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_vsp_p_vsp_seq_p_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_vsp_p_vsp_seq_p_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_vsp_p_vsp_seq_p_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_vsp_p_vsp_crc_p_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_vsp_p_vsp_crc_p_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_vsp_p_vsp_crc_p_is_in_range(uint16_t value);

/**
 * Pack message STAT_MSG_3_S.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pved_cls_stat_msg_3_s_pack(
    uint8_t *dst_p,
    const struct pved_cls_stat_msg_3_s_t *src_p,
    size_t size);

/**
 * Unpack message STAT_MSG_3_S.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pved_cls_stat_msg_3_s_unpack(
    struct pved_cls_stat_msg_3_s_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_stat_msg_3_s_pcb_temp_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_3_s_pcb_temp_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_3_s_pcb_temp_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_stat_msg_3_s_batt_volt_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_3_s_batt_volt_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_3_s_batt_volt_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_stat_msg_3_s_sensor5_v_volt_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_3_s_sensor5_v_volt_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_3_s_sensor5_v_volt_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_stat_msg_3_s_lvdt_neut_comp_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_3_s_lvdt_neut_comp_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_3_s_lvdt_neut_comp_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_stat_msg_3_s_lvdt_comp_count_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_3_s_lvdt_comp_count_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_3_s_lvdt_comp_count_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_stat_msg_3_s_spl_ctrl_status_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_3_s_spl_ctrl_status_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_3_s_spl_ctrl_status_s_is_in_range(uint8_t value);

/**
 * Pack message STAT_MSG_3_M.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pved_cls_stat_msg_3_m_pack(
    uint8_t *dst_p,
    const struct pved_cls_stat_msg_3_m_t *src_p,
    size_t size);

/**
 * Unpack message STAT_MSG_3_M.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pved_cls_stat_msg_3_m_unpack(
    struct pved_cls_stat_msg_3_m_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_stat_msg_3_m_pcb_temp_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_3_m_pcb_temp_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_3_m_pcb_temp_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_stat_msg_3_m_batt_volt_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_3_m_batt_volt_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_3_m_batt_volt_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_stat_msg_3_m_sensor5_v_volt_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_3_m_sensor5_v_volt_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_3_m_sensor5_v_volt_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_stat_msg_3_m_lvdt_neut_comp_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_3_m_lvdt_neut_comp_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_3_m_lvdt_neut_comp_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_stat_msg_3_m_lvdt_comp_count_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_3_m_lvdt_comp_count_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_3_m_lvdt_comp_count_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_stat_msg_3_m_spl_ctrl_status_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_3_m_spl_ctrl_status_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_3_m_spl_ctrl_status_m_is_in_range(uint8_t value);

/**
 * Pack message STAT_MSG_2_S.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pved_cls_stat_msg_2_s_pack(
    uint8_t *dst_p,
    const struct pved_cls_stat_msg_2_s_t *src_p,
    size_t size);

/**
 * Unpack message STAT_MSG_2_S.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pved_cls_stat_msg_2_s_unpack(
    struct pved_cls_stat_msg_2_s_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_stat_msg_2_s_src_cl_wa_setpoint_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_2_s_src_cl_wa_setpoint_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_2_s_src_cl_wa_setpoint_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_stat_msg_2_s_dout_state_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_2_s_dout_state_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_2_s_dout_state_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_stat_msg_2_s_state_css_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_2_s_state_css_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_2_s_state_css_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_stat_msg_2_s_ad3_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_2_s_ad3_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_2_s_ad3_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_stat_msg_2_s_dout_current_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_2_s_dout_current_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_2_s_dout_current_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_stat_msg_2_s_cl_wa_setpoint_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_2_s_cl_wa_setpoint_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_2_s_cl_wa_setpoint_s_is_in_range(uint16_t value);

/**
 * Pack message STAT_MSG_2_M.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pved_cls_stat_msg_2_m_pack(
    uint8_t *dst_p,
    const struct pved_cls_stat_msg_2_m_t *src_p,
    size_t size);

/**
 * Unpack message STAT_MSG_2_M.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pved_cls_stat_msg_2_m_unpack(
    struct pved_cls_stat_msg_2_m_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_stat_msg_2_m_src_cl_wa_setpoint_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_2_m_src_cl_wa_setpoint_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_2_m_src_cl_wa_setpoint_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_stat_msg_2_m_dout_state_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_2_m_dout_state_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_2_m_dout_state_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_stat_msg_2_m_state_css_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_2_m_state_css_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_2_m_state_css_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_stat_msg_2_m_ad3_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_2_m_ad3_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_2_m_ad3_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_stat_msg_2_m_dout_current_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_2_m_dout_current_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_2_m_dout_current_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_stat_msg_2_m_cl_wa_setpoint_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_2_m_cl_wa_setpoint_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_2_m_cl_wa_setpoint_m_is_in_range(uint16_t value);

/**
 * Pack message STAT_MSG_1_S.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pved_cls_stat_msg_1_s_pack(
    uint8_t *dst_p,
    const struct pved_cls_stat_msg_1_s_t *src_p,
    size_t size);

/**
 * Unpack message STAT_MSG_1_S.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pved_cls_stat_msg_1_s_unpack(
    struct pved_cls_stat_msg_1_s_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_stat_msg_1_s_spool_setpoint_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_1_s_spool_setpoint_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_1_s_spool_setpoint_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_stat_msg_1_s_spool_position_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_1_s_spool_position_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_1_s_spool_position_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_stat_msg_1_s_ad1_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_1_s_ad1_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_1_s_ad1_s_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_stat_msg_1_s_ad2_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_1_s_ad2_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_1_s_ad2_s_is_in_range(uint16_t value);

/**
 * Pack message STAT_MSG_1_M.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pved_cls_stat_msg_1_m_pack(
    uint8_t *dst_p,
    const struct pved_cls_stat_msg_1_m_t *src_p,
    size_t size);

/**
 * Unpack message STAT_MSG_1_M.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pved_cls_stat_msg_1_m_unpack(
    struct pved_cls_stat_msg_1_m_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_stat_msg_1_m_spool_setpoint_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_1_m_spool_setpoint_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_1_m_spool_setpoint_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_stat_msg_1_m_spool_position_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_1_m_spool_position_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_1_m_spool_position_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_stat_msg_1_m_ad1_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_1_m_ad1_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_1_m_ad1_m_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_stat_msg_1_m_ad2_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_1_m_ad2_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_1_m_ad2_m_is_in_range(uint16_t value);

/**
 * Pack message STAT_MSG_OP_S.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pved_cls_stat_msg_op_s_pack(
    uint8_t *dst_p,
    const struct pved_cls_stat_msg_op_s_t *src_p,
    size_t size);

/**
 * Unpack message STAT_MSG_OP_S.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pved_cls_stat_msg_op_s_unpack(
    struct pved_cls_stat_msg_op_s_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_stat_msg_op_s_operation_state_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_op_s_operation_state_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_op_s_operation_state_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_stat_msg_op_s_lockout_aux_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_op_s_lockout_aux_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_op_s_lockout_aux_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_stat_msg_op_s_lockout_eh_steering_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_op_s_lockout_eh_steering_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_op_s_lockout_eh_steering_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_stat_msg_op_s_lockout_program_change_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_op_s_lockout_program_change_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_op_s_lockout_program_change_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_stat_msg_op_s_lockout_device_change_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_op_s_lockout_device_change_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_op_s_lockout_device_change_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_stat_msg_op_s_lockout_gps_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_op_s_lockout_gps_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_op_s_lockout_gps_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_stat_msg_op_s_service_mode_state_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_op_s_service_mode_state_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_op_s_service_mode_state_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_stat_msg_op_s_operation_state_seq_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_op_s_operation_state_seq_s_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_op_s_operation_state_seq_s_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_stat_msg_op_s_operation_state_crc_s_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_op_s_operation_state_crc_s_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_op_s_operation_state_crc_s_is_in_range(uint16_t value);

/**
 * Pack message STAT_MSG_OP_M.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pved_cls_stat_msg_op_m_pack(
    uint8_t *dst_p,
    const struct pved_cls_stat_msg_op_m_t *src_p,
    size_t size);

/**
 * Unpack message STAT_MSG_OP_M.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pved_cls_stat_msg_op_m_unpack(
    struct pved_cls_stat_msg_op_m_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_stat_msg_op_m_operation_state_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_op_m_operation_state_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_op_m_operation_state_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_stat_msg_op_m_lockout_aux_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_op_m_lockout_aux_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_op_m_lockout_aux_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_stat_msg_op_m_lockout_eh_steering_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_op_m_lockout_eh_steering_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_op_m_lockout_eh_steering_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_stat_msg_op_m_lockout_program_change_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_op_m_lockout_program_change_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_op_m_lockout_program_change_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_stat_msg_op_m_lockout_device_change_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_op_m_lockout_device_change_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_op_m_lockout_device_change_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_stat_msg_op_m_lockout_gps_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_op_m_lockout_gps_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_op_m_lockout_gps_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_stat_msg_op_m_service_mode_state_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_op_m_service_mode_state_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_op_m_service_mode_state_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pved_cls_stat_msg_op_m_operation_state_seq_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_op_m_operation_state_seq_m_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_op_m_operation_state_seq_m_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pved_cls_stat_msg_op_m_operation_state_crc_m_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pved_cls_stat_msg_op_m_operation_state_crc_m_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pved_cls_stat_msg_op_m_operation_state_crc_m_is_in_range(uint16_t value);


#ifdef __cplusplus
}
#endif

#endif
