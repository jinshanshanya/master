/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 32.21.0 Sat Jan 18 21:09:09 2020.
 */

#ifndef HAI_LUO_EXTEV2_H
#define HAI_LUO_EXTEV2_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define HAI_LUO_EXTEV2_TCM_GEAR_FD_FRAME_ID (0x18f00503u)
#define HAI_LUO_EXTEV2_ENGINE_SPEDD_0X0_CF00400_FRAME_ID (0xcf00400u)
#define HAI_LUO_EXTEV2_VCU_FD_0X18_FD0821_FRAME_ID (0x18fd0821u)
#define HAI_LUO_EXTEV2_ADM_VCU_CONTROL_0X18_FD0721_FRAME_ID (0x18fd0721u)
#define HAI_LUO_EXTEV2_ADM_VCU_CONTROL_0X18_FD0621_FRAME_ID (0x18fd0621u)

/* Frame lengths in bytes. */
#define HAI_LUO_EXTEV2_TCM_GEAR_FD_LENGTH (8u)
#define HAI_LUO_EXTEV2_ENGINE_SPEDD_0X0_CF00400_LENGTH (8u)
#define HAI_LUO_EXTEV2_VCU_FD_0X18_FD0821_LENGTH (8u)
#define HAI_LUO_EXTEV2_ADM_VCU_CONTROL_0X18_FD0721_LENGTH (8u)
#define HAI_LUO_EXTEV2_ADM_VCU_CONTROL_0X18_FD0621_LENGTH (8u)

/* Extended or standard frame types. */
#define HAI_LUO_EXTEV2_TCM_GEAR_FD_IS_EXTENDED (1)
#define HAI_LUO_EXTEV2_ENGINE_SPEDD_0X0_CF00400_IS_EXTENDED (1)
#define HAI_LUO_EXTEV2_VCU_FD_0X18_FD0821_IS_EXTENDED (1)
#define HAI_LUO_EXTEV2_ADM_VCU_CONTROL_0X18_FD0721_IS_EXTENDED (1)
#define HAI_LUO_EXTEV2_ADM_VCU_CONTROL_0X18_FD0621_IS_EXTENDED (1)

/* Frame cycle times in milliseconds. */
#define HAI_LUO_EXTEV2_TCM_GEAR_FD_CYCLE_TIME_MS (0u)
#define HAI_LUO_EXTEV2_ENGINE_SPEDD_0X0_CF00400_CYCLE_TIME_MS (0u)
#define HAI_LUO_EXTEV2_VCU_FD_0X18_FD0821_CYCLE_TIME_MS (0u)
#define HAI_LUO_EXTEV2_ADM_VCU_CONTROL_0X18_FD0721_CYCLE_TIME_MS (0u)
#define HAI_LUO_EXTEV2_ADM_VCU_CONTROL_0X18_FD0621_CYCLE_TIME_MS (0u)

/* Signal choices. */


/**
 * Signals in message TCM_GearFd.
 *
 * All signal values are as on the CAN bus.
 */
struct hai_luo_extev2_tcm_gear_fd_t {
    /**
     * Range: 0..255 (-125..130 -)
     * Scale: 1
     * Offset: -125
     */
    uint8_t tcm_gear_fd;
};

/**
 * Signals in message Engine_Spedd_0x0CF00400.
 *
 * All signal values are as on the CAN bus.
 */
struct hai_luo_extev2_engine_spedd_0x0_cf00400_t {
    /**
     * Range: 0..65535 (0..8191.875 -)
     * Scale: 0.125
     * Offset: 0
     */
    uint16_t engine_speed;
};

/**
 * Signals in message VCU_Fd_0x18FD0821.
 *
 * All signal values are as on the CAN bus.
 */
struct hai_luo_extev2_vcu_fd_0x18_fd0821_t {
    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t veh_mass;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t front_hydraulic_brake_fd;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rear_hydraulic_brake_fd;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t drive_mode_fd;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t load_brake_fd;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t compartment_fd;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t veh_spd;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fuel_signal;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vehicle_fault_level;
};

/**
 * Signals in message ADM_VCU_Control_0x18FD0721.
 *
 * All signal values are as on the CAN bus.
 */
struct hai_luo_extev2_adm_vcu_control_0x18_fd0721_t {
    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t amble_brake;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t compartment_control;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t emergency_brake;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t load_brake;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t engine_start;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t engine_stop;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t road_dryor_wet;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t switch_dynamicor_economical;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t slope;
};

/**
 * Signals in message ADM_VCU_Control_0x18FD0621.
 *
 * All signal values are as on the CAN bus.
 */
struct hai_luo_extev2_adm_vcu_control_0x18_fd0621_t {
    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_ped;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_ped_enable;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gear;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t adm_fault_level;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fog_light;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t horn;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t high_beam_ligh;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t low_beam_light;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t turn_signal;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hydraulic_brake;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t double_light;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t night_light;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t defroster_control;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t wiper_control;
};

/**
 * Pack message TCM_GearFd.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int hai_luo_extev2_tcm_gear_fd_pack(
    uint8_t *dst_p,
    const struct hai_luo_extev2_tcm_gear_fd_t *src_p,
    size_t size);

/**
 * Unpack message TCM_GearFd.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int hai_luo_extev2_tcm_gear_fd_unpack(
    struct hai_luo_extev2_tcm_gear_fd_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hai_luo_extev2_tcm_gear_fd_tcm_gear_fd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hai_luo_extev2_tcm_gear_fd_tcm_gear_fd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hai_luo_extev2_tcm_gear_fd_tcm_gear_fd_is_in_range(uint8_t value);

/**
 * Pack message Engine_Spedd_0x0CF00400.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int hai_luo_extev2_engine_spedd_0x0_cf00400_pack(
    uint8_t *dst_p,
    const struct hai_luo_extev2_engine_spedd_0x0_cf00400_t *src_p,
    size_t size);

/**
 * Unpack message Engine_Spedd_0x0CF00400.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int hai_luo_extev2_engine_spedd_0x0_cf00400_unpack(
    struct hai_luo_extev2_engine_spedd_0x0_cf00400_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hai_luo_extev2_engine_spedd_0x0_cf00400_engine_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hai_luo_extev2_engine_spedd_0x0_cf00400_engine_speed_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hai_luo_extev2_engine_spedd_0x0_cf00400_engine_speed_is_in_range(uint16_t value);

/**
 * Pack message VCU_Fd_0x18FD0821.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int hai_luo_extev2_vcu_fd_0x18_fd0821_pack(
    uint8_t *dst_p,
    const struct hai_luo_extev2_vcu_fd_0x18_fd0821_t *src_p,
    size_t size);

/**
 * Unpack message VCU_Fd_0x18FD0821.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int hai_luo_extev2_vcu_fd_0x18_fd0821_unpack(
    struct hai_luo_extev2_vcu_fd_0x18_fd0821_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hai_luo_extev2_vcu_fd_0x18_fd0821_veh_mass_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hai_luo_extev2_vcu_fd_0x18_fd0821_veh_mass_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hai_luo_extev2_vcu_fd_0x18_fd0821_veh_mass_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hai_luo_extev2_vcu_fd_0x18_fd0821_front_hydraulic_brake_fd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hai_luo_extev2_vcu_fd_0x18_fd0821_front_hydraulic_brake_fd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hai_luo_extev2_vcu_fd_0x18_fd0821_front_hydraulic_brake_fd_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hai_luo_extev2_vcu_fd_0x18_fd0821_rear_hydraulic_brake_fd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hai_luo_extev2_vcu_fd_0x18_fd0821_rear_hydraulic_brake_fd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hai_luo_extev2_vcu_fd_0x18_fd0821_rear_hydraulic_brake_fd_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hai_luo_extev2_vcu_fd_0x18_fd0821_drive_mode_fd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hai_luo_extev2_vcu_fd_0x18_fd0821_drive_mode_fd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hai_luo_extev2_vcu_fd_0x18_fd0821_drive_mode_fd_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hai_luo_extev2_vcu_fd_0x18_fd0821_load_brake_fd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hai_luo_extev2_vcu_fd_0x18_fd0821_load_brake_fd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hai_luo_extev2_vcu_fd_0x18_fd0821_load_brake_fd_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hai_luo_extev2_vcu_fd_0x18_fd0821_compartment_fd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hai_luo_extev2_vcu_fd_0x18_fd0821_compartment_fd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hai_luo_extev2_vcu_fd_0x18_fd0821_compartment_fd_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t hai_luo_extev2_vcu_fd_0x18_fd0821_veh_spd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hai_luo_extev2_vcu_fd_0x18_fd0821_veh_spd_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hai_luo_extev2_vcu_fd_0x18_fd0821_veh_spd_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hai_luo_extev2_vcu_fd_0x18_fd0821_fuel_signal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hai_luo_extev2_vcu_fd_0x18_fd0821_fuel_signal_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hai_luo_extev2_vcu_fd_0x18_fd0821_fuel_signal_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hai_luo_extev2_vcu_fd_0x18_fd0821_vehicle_fault_level_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hai_luo_extev2_vcu_fd_0x18_fd0821_vehicle_fault_level_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hai_luo_extev2_vcu_fd_0x18_fd0821_vehicle_fault_level_is_in_range(uint8_t value);

/**
 * Pack message ADM_VCU_Control_0x18FD0721.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int hai_luo_extev2_adm_vcu_control_0x18_fd0721_pack(
    uint8_t *dst_p,
    const struct hai_luo_extev2_adm_vcu_control_0x18_fd0721_t *src_p,
    size_t size);

/**
 * Unpack message ADM_VCU_Control_0x18FD0721.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int hai_luo_extev2_adm_vcu_control_0x18_fd0721_unpack(
    struct hai_luo_extev2_adm_vcu_control_0x18_fd0721_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hai_luo_extev2_adm_vcu_control_0x18_fd0721_amble_brake_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hai_luo_extev2_adm_vcu_control_0x18_fd0721_amble_brake_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hai_luo_extev2_adm_vcu_control_0x18_fd0721_amble_brake_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hai_luo_extev2_adm_vcu_control_0x18_fd0721_compartment_control_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hai_luo_extev2_adm_vcu_control_0x18_fd0721_compartment_control_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hai_luo_extev2_adm_vcu_control_0x18_fd0721_compartment_control_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hai_luo_extev2_adm_vcu_control_0x18_fd0721_emergency_brake_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hai_luo_extev2_adm_vcu_control_0x18_fd0721_emergency_brake_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hai_luo_extev2_adm_vcu_control_0x18_fd0721_emergency_brake_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hai_luo_extev2_adm_vcu_control_0x18_fd0721_load_brake_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hai_luo_extev2_adm_vcu_control_0x18_fd0721_load_brake_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hai_luo_extev2_adm_vcu_control_0x18_fd0721_load_brake_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hai_luo_extev2_adm_vcu_control_0x18_fd0721_engine_start_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hai_luo_extev2_adm_vcu_control_0x18_fd0721_engine_start_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hai_luo_extev2_adm_vcu_control_0x18_fd0721_engine_start_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hai_luo_extev2_adm_vcu_control_0x18_fd0721_engine_stop_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hai_luo_extev2_adm_vcu_control_0x18_fd0721_engine_stop_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hai_luo_extev2_adm_vcu_control_0x18_fd0721_engine_stop_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hai_luo_extev2_adm_vcu_control_0x18_fd0721_road_dryor_wet_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hai_luo_extev2_adm_vcu_control_0x18_fd0721_road_dryor_wet_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hai_luo_extev2_adm_vcu_control_0x18_fd0721_road_dryor_wet_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hai_luo_extev2_adm_vcu_control_0x18_fd0721_switch_dynamicor_economical_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hai_luo_extev2_adm_vcu_control_0x18_fd0721_switch_dynamicor_economical_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hai_luo_extev2_adm_vcu_control_0x18_fd0721_switch_dynamicor_economical_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hai_luo_extev2_adm_vcu_control_0x18_fd0721_slope_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hai_luo_extev2_adm_vcu_control_0x18_fd0721_slope_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hai_luo_extev2_adm_vcu_control_0x18_fd0721_slope_is_in_range(uint8_t value);

/**
 * Pack message ADM_VCU_Control_0x18FD0621.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int hai_luo_extev2_adm_vcu_control_0x18_fd0621_pack(
    uint8_t *dst_p,
    const struct hai_luo_extev2_adm_vcu_control_0x18_fd0621_t *src_p,
    size_t size);

/**
 * Unpack message ADM_VCU_Control_0x18FD0621.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int hai_luo_extev2_adm_vcu_control_0x18_fd0621_unpack(
    struct hai_luo_extev2_adm_vcu_control_0x18_fd0621_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hai_luo_extev2_adm_vcu_control_0x18_fd0621_acc_ped_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hai_luo_extev2_adm_vcu_control_0x18_fd0621_acc_ped_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hai_luo_extev2_adm_vcu_control_0x18_fd0621_acc_ped_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hai_luo_extev2_adm_vcu_control_0x18_fd0621_acc_ped_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hai_luo_extev2_adm_vcu_control_0x18_fd0621_acc_ped_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hai_luo_extev2_adm_vcu_control_0x18_fd0621_acc_ped_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hai_luo_extev2_adm_vcu_control_0x18_fd0621_gear_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hai_luo_extev2_adm_vcu_control_0x18_fd0621_gear_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hai_luo_extev2_adm_vcu_control_0x18_fd0621_gear_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hai_luo_extev2_adm_vcu_control_0x18_fd0621_adm_fault_level_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hai_luo_extev2_adm_vcu_control_0x18_fd0621_adm_fault_level_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hai_luo_extev2_adm_vcu_control_0x18_fd0621_adm_fault_level_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hai_luo_extev2_adm_vcu_control_0x18_fd0621_fog_light_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hai_luo_extev2_adm_vcu_control_0x18_fd0621_fog_light_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hai_luo_extev2_adm_vcu_control_0x18_fd0621_fog_light_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hai_luo_extev2_adm_vcu_control_0x18_fd0621_horn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hai_luo_extev2_adm_vcu_control_0x18_fd0621_horn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hai_luo_extev2_adm_vcu_control_0x18_fd0621_horn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hai_luo_extev2_adm_vcu_control_0x18_fd0621_high_beam_ligh_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hai_luo_extev2_adm_vcu_control_0x18_fd0621_high_beam_ligh_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hai_luo_extev2_adm_vcu_control_0x18_fd0621_high_beam_ligh_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hai_luo_extev2_adm_vcu_control_0x18_fd0621_low_beam_light_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hai_luo_extev2_adm_vcu_control_0x18_fd0621_low_beam_light_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hai_luo_extev2_adm_vcu_control_0x18_fd0621_low_beam_light_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hai_luo_extev2_adm_vcu_control_0x18_fd0621_turn_signal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hai_luo_extev2_adm_vcu_control_0x18_fd0621_turn_signal_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hai_luo_extev2_adm_vcu_control_0x18_fd0621_turn_signal_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hai_luo_extev2_adm_vcu_control_0x18_fd0621_hydraulic_brake_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hai_luo_extev2_adm_vcu_control_0x18_fd0621_hydraulic_brake_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hai_luo_extev2_adm_vcu_control_0x18_fd0621_hydraulic_brake_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hai_luo_extev2_adm_vcu_control_0x18_fd0621_double_light_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hai_luo_extev2_adm_vcu_control_0x18_fd0621_double_light_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hai_luo_extev2_adm_vcu_control_0x18_fd0621_double_light_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hai_luo_extev2_adm_vcu_control_0x18_fd0621_night_light_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hai_luo_extev2_adm_vcu_control_0x18_fd0621_night_light_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hai_luo_extev2_adm_vcu_control_0x18_fd0621_night_light_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hai_luo_extev2_adm_vcu_control_0x18_fd0621_defroster_control_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hai_luo_extev2_adm_vcu_control_0x18_fd0621_defroster_control_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hai_luo_extev2_adm_vcu_control_0x18_fd0621_defroster_control_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t hai_luo_extev2_adm_vcu_control_0x18_fd0621_wiper_control_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double hai_luo_extev2_adm_vcu_control_0x18_fd0621_wiper_control_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool hai_luo_extev2_adm_vcu_control_0x18_fd0621_wiper_control_is_in_range(uint8_t value);


#ifdef __cplusplus
}
#endif

#endif
