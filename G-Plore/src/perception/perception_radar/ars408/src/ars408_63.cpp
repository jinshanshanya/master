/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 33.1.1 Wed Feb 12 15:46:24 2020.
 */

#include <string.h>

#include "perception_radar/ars408/ars408_63.h"

static inline uint8_t pack_left_shift_u8(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint8_t)((uint8_t)(value << shift) & mask);
}

static inline uint8_t pack_left_shift_u16(
    uint16_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint8_t)((uint8_t)(value << shift) & mask);
}

static inline uint8_t pack_right_shift_u8(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint8_t)((uint8_t)(value >> shift) & mask);
}

static inline uint8_t pack_right_shift_u16(
    uint16_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint8_t)((uint8_t)(value >> shift) & mask);
}

static inline uint8_t unpack_left_shift_u8(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint8_t)((uint8_t)(value & mask) << shift);
}

static inline uint16_t unpack_left_shift_u16(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint16_t)((uint16_t)(value & mask) << shift);
}

static inline uint8_t unpack_right_shift_u8(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint8_t)((uint8_t)(value & mask) >> shift);
}

static inline uint16_t unpack_right_shift_u16(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint16_t)((uint16_t)(value & mask) >> shift);
}

int ars408_63_obj_2_quality_pack(
    uint8_t *dst_p,
    const struct ars408_63_obj_2_quality_t *src_p,
    size_t size)
{
    if (size < 7u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 7);

    dst_p[0] |= pack_left_shift_u8(src_p->obj_id, 0u, 0xffu);
    dst_p[1] |= pack_left_shift_u8(src_p->obj_dist_long_rms, 3u, 0xf8u);
    dst_p[1] |= pack_right_shift_u8(src_p->obj_dist_lat_rms, 2u, 0x07u);
    dst_p[2] |= pack_left_shift_u8(src_p->obj_dist_lat_rms, 6u, 0xc0u);
    dst_p[2] |= pack_left_shift_u8(src_p->obj_vrel_long_rms, 1u, 0x3eu);
    dst_p[2] |= pack_right_shift_u8(src_p->obj_vrel_lat_rms, 4u, 0x01u);
    dst_p[3] |= pack_left_shift_u8(src_p->obj_vrel_lat_rms, 4u, 0xf0u);
    dst_p[3] |= pack_right_shift_u8(src_p->obj_arel_long_rms, 1u, 0x0fu);
    dst_p[4] |= pack_left_shift_u8(src_p->obj_arel_long_rms, 7u, 0x80u);
    dst_p[4] |= pack_left_shift_u8(src_p->obj_arel_lat_rms, 2u, 0x7cu);
    dst_p[4] |= pack_right_shift_u8(src_p->obj_orientation_rms, 3u, 0x03u);
    dst_p[5] |= pack_left_shift_u8(src_p->obj_orientation_rms, 5u, 0xe0u);
    dst_p[6] |= pack_left_shift_u8(src_p->obj_prob_of_exist, 5u, 0xe0u);
    dst_p[6] |= pack_left_shift_u8(src_p->obj_meas_state, 2u, 0x1cu);

    return (7);
}

int ars408_63_obj_2_quality_unpack(
    struct ars408_63_obj_2_quality_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
    if (size < 7u) {
        return (-EINVAL);
    }

    memset(dst_p, 0, sizeof(*dst_p));

    dst_p->obj_id |= unpack_right_shift_u8(src_p[0], 0u, 0xffu);
    dst_p->obj_dist_long_rms |= unpack_right_shift_u8(src_p[1], 3u, 0xf8u);
    dst_p->obj_dist_lat_rms |= unpack_left_shift_u8(src_p[1], 2u, 0x07u);
    dst_p->obj_dist_lat_rms |= unpack_right_shift_u8(src_p[2], 6u, 0xc0u);
    dst_p->obj_vrel_long_rms |= unpack_right_shift_u8(src_p[2], 1u, 0x3eu);
    dst_p->obj_vrel_lat_rms |= unpack_left_shift_u8(src_p[2], 4u, 0x01u);
    dst_p->obj_vrel_lat_rms |= unpack_right_shift_u8(src_p[3], 4u, 0xf0u);
    dst_p->obj_arel_long_rms |= unpack_left_shift_u8(src_p[3], 1u, 0x0fu);
    dst_p->obj_arel_long_rms |= unpack_right_shift_u8(src_p[4], 7u, 0x80u);
    dst_p->obj_arel_lat_rms |= unpack_right_shift_u8(src_p[4], 2u, 0x7cu);
    dst_p->obj_orientation_rms |= unpack_left_shift_u8(src_p[4], 3u, 0x03u);
    dst_p->obj_orientation_rms |= unpack_right_shift_u8(src_p[5], 5u, 0xe0u);
    dst_p->obj_prob_of_exist |= unpack_right_shift_u8(src_p[6], 5u, 0xe0u);
    dst_p->obj_meas_state |= unpack_right_shift_u8(src_p[6], 2u, 0x1cu);

    return (0);
}

uint8_t ars408_63_obj_2_quality_obj_id_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_obj_2_quality_obj_id_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_obj_2_quality_obj_id_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t ars408_63_obj_2_quality_obj_dist_long_rms_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_obj_2_quality_obj_dist_long_rms_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_obj_2_quality_obj_dist_long_rms_is_in_range(uint8_t value)
{
    return (value <= 31u);
}

uint8_t ars408_63_obj_2_quality_obj_dist_lat_rms_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_obj_2_quality_obj_dist_lat_rms_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_obj_2_quality_obj_dist_lat_rms_is_in_range(uint8_t value)
{
    return (value <= 31u);
}

uint8_t ars408_63_obj_2_quality_obj_vrel_long_rms_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_obj_2_quality_obj_vrel_long_rms_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_obj_2_quality_obj_vrel_long_rms_is_in_range(uint8_t value)
{
    return (value <= 31u);
}

uint8_t ars408_63_obj_2_quality_obj_vrel_lat_rms_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_obj_2_quality_obj_vrel_lat_rms_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_obj_2_quality_obj_vrel_lat_rms_is_in_range(uint8_t value)
{
    return (value <= 31u);
}

uint8_t ars408_63_obj_2_quality_obj_arel_long_rms_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_obj_2_quality_obj_arel_long_rms_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_obj_2_quality_obj_arel_long_rms_is_in_range(uint8_t value)
{
    return (value <= 31u);
}

uint8_t ars408_63_obj_2_quality_obj_arel_lat_rms_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_obj_2_quality_obj_arel_lat_rms_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_obj_2_quality_obj_arel_lat_rms_is_in_range(uint8_t value)
{
    return (value <= 31u);
}

uint8_t ars408_63_obj_2_quality_obj_orientation_rms_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_obj_2_quality_obj_orientation_rms_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_obj_2_quality_obj_orientation_rms_is_in_range(uint8_t value)
{
    return (value <= 31u);
}

uint8_t ars408_63_obj_2_quality_obj_prob_of_exist_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_obj_2_quality_obj_prob_of_exist_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_obj_2_quality_obj_prob_of_exist_is_in_range(uint8_t value)
{
    return (value <= 7u);
}

uint8_t ars408_63_obj_2_quality_obj_meas_state_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_obj_2_quality_obj_meas_state_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_obj_2_quality_obj_meas_state_is_in_range(uint8_t value)
{
    return (value <= 7u);
}

int ars408_63_obj_3_extended_pack(
    uint8_t *dst_p,
    const struct ars408_63_obj_3_extended_t *src_p,
    size_t size)
{
    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    dst_p[0] |= pack_left_shift_u8(src_p->obj_id, 0u, 0xffu);
    dst_p[1] |= pack_right_shift_u16(src_p->obj_arel_long, 3u, 0xffu);
    dst_p[2] |= pack_left_shift_u16(src_p->obj_arel_long, 5u, 0xe0u);
    dst_p[2] |= pack_right_shift_u16(src_p->obj_arel_lat, 4u, 0x1fu);
    dst_p[3] |= pack_left_shift_u16(src_p->obj_arel_lat, 4u, 0xf0u);
    dst_p[3] |= pack_left_shift_u8(src_p->obj_class, 0u, 0x07u);
    dst_p[4] |= pack_right_shift_u16(src_p->obj_orientation_angle, 2u, 0xffu);
    dst_p[5] |= pack_left_shift_u16(src_p->obj_orientation_angle, 6u, 0xc0u);
    dst_p[6] |= pack_left_shift_u8(src_p->obj_length, 0u, 0xffu);
    dst_p[7] |= pack_left_shift_u8(src_p->obj_width, 0u, 0xffu);

    return (8);
}

int ars408_63_obj_3_extended_unpack(
    struct ars408_63_obj_3_extended_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
    if (size < 8u) {
        return (-EINVAL);
    }

    memset(dst_p, 0, sizeof(*dst_p));

    dst_p->obj_id |= unpack_right_shift_u8(src_p[0], 0u, 0xffu);
    dst_p->obj_arel_long |= unpack_left_shift_u16(src_p[1], 3u, 0xffu);
    dst_p->obj_arel_long |= unpack_right_shift_u16(src_p[2], 5u, 0xe0u);
    dst_p->obj_arel_lat |= unpack_left_shift_u16(src_p[2], 4u, 0x1fu);
    dst_p->obj_arel_lat |= unpack_right_shift_u16(src_p[3], 4u, 0xf0u);
    dst_p->obj_class |= unpack_right_shift_u8(src_p[3], 0u, 0x07u);
    dst_p->obj_orientation_angle |= unpack_left_shift_u16(src_p[4], 2u, 0xffu);
    dst_p->obj_orientation_angle |= unpack_right_shift_u16(src_p[5], 6u, 0xc0u);
    dst_p->obj_length |= unpack_right_shift_u8(src_p[6], 0u, 0xffu);
    dst_p->obj_width |= unpack_right_shift_u8(src_p[7], 0u, 0xffu);

    return (0);
}

uint8_t ars408_63_obj_3_extended_obj_id_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_obj_3_extended_obj_id_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_obj_3_extended_obj_id_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint16_t ars408_63_obj_3_extended_obj_arel_long_encode(double value)
{
    return (uint16_t)((value - -10.0) / 0.01);
}

double ars408_63_obj_3_extended_obj_arel_long_decode(uint16_t value)
{
    return (((double)value * 0.01) + -10.0);
}

bool ars408_63_obj_3_extended_obj_arel_long_is_in_range(uint16_t value)
{
    return (value <= 2047u);
}

uint16_t ars408_63_obj_3_extended_obj_arel_lat_encode(double value)
{
    return (uint16_t)((value - -2.5) / 0.01);
}

double ars408_63_obj_3_extended_obj_arel_lat_decode(uint16_t value)
{
    return (((double)value * 0.01) + -2.5);
}

bool ars408_63_obj_3_extended_obj_arel_lat_is_in_range(uint16_t value)
{
    return (value <= 511u);
}

uint8_t ars408_63_obj_3_extended_obj_class_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_obj_3_extended_obj_class_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_obj_3_extended_obj_class_is_in_range(uint8_t value)
{
    return (value <= 7u);
}

uint16_t ars408_63_obj_3_extended_obj_orientation_angle_encode(double value)
{
    return (uint16_t)((value - -180.0) / 0.4);
}

double ars408_63_obj_3_extended_obj_orientation_angle_decode(uint16_t value)
{
    return (((double)value * 0.4) + -180.0);
}

bool ars408_63_obj_3_extended_obj_orientation_angle_is_in_range(uint16_t value)
{
    return (value <= 1023u);
}

uint8_t ars408_63_obj_3_extended_obj_length_encode(double value)
{
    return (uint8_t)(value / 0.2);
}

double ars408_63_obj_3_extended_obj_length_decode(uint8_t value)
{
    return ((double)value * 0.2);
}

bool ars408_63_obj_3_extended_obj_length_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t ars408_63_obj_3_extended_obj_width_encode(double value)
{
    return (uint8_t)(value / 0.2);
}

double ars408_63_obj_3_extended_obj_width_decode(uint8_t value)
{
    return ((double)value * 0.2);
}

bool ars408_63_obj_3_extended_obj_width_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

int ars408_63_coll_det_region_state_pack(
    uint8_t *dst_p,
    const struct ars408_63_coll_det_region_state_t *src_p,
    size_t size)
{
    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    dst_p[0] |= pack_left_shift_u8(src_p->coll_det_reg_state_region_id, 5u, 0xe0u);
    dst_p[0] |= pack_left_shift_u8(src_p->coll_det_reg_state_warning_level, 3u, 0x18u);
    dst_p[1] |= pack_right_shift_u16(src_p->coll_det_reg_state_point1_x, 5u, 0xffu);
    dst_p[2] |= pack_left_shift_u16(src_p->coll_det_reg_state_point1_x, 3u, 0xf8u);
    dst_p[2] |= pack_right_shift_u16(src_p->coll_det_reg_state_point1_y, 8u, 0x07u);
    dst_p[3] |= pack_left_shift_u16(src_p->coll_det_reg_state_point1_y, 0u, 0xffu);
    dst_p[4] |= pack_right_shift_u16(src_p->coll_det_reg_state_point2_x, 5u, 0xffu);
    dst_p[5] |= pack_left_shift_u16(src_p->coll_det_reg_state_point2_x, 3u, 0xf8u);
    dst_p[5] |= pack_right_shift_u16(src_p->coll_det_reg_state_point2_y, 8u, 0x07u);
    dst_p[6] |= pack_left_shift_u16(src_p->coll_det_reg_state_point2_y, 0u, 0xffu);
    dst_p[7] |= pack_left_shift_u8(src_p->coll_det_reg_state_nof_objects, 0u, 0xffu);

    return (8);
}

int ars408_63_coll_det_region_state_unpack(
    struct ars408_63_coll_det_region_state_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
    if (size < 8u) {
        return (-EINVAL);
    }

    memset(dst_p, 0, sizeof(*dst_p));

    dst_p->coll_det_reg_state_region_id |= unpack_right_shift_u8(src_p[0], 5u, 0xe0u);
    dst_p->coll_det_reg_state_warning_level |= unpack_right_shift_u8(src_p[0], 3u, 0x18u);
    dst_p->coll_det_reg_state_point1_x |= unpack_left_shift_u16(src_p[1], 5u, 0xffu);
    dst_p->coll_det_reg_state_point1_x |= unpack_right_shift_u16(src_p[2], 3u, 0xf8u);
    dst_p->coll_det_reg_state_point1_y |= unpack_left_shift_u16(src_p[2], 8u, 0x07u);
    dst_p->coll_det_reg_state_point1_y |= unpack_right_shift_u16(src_p[3], 0u, 0xffu);
    dst_p->coll_det_reg_state_point2_x |= unpack_left_shift_u16(src_p[4], 5u, 0xffu);
    dst_p->coll_det_reg_state_point2_x |= unpack_right_shift_u16(src_p[5], 3u, 0xf8u);
    dst_p->coll_det_reg_state_point2_y |= unpack_left_shift_u16(src_p[5], 8u, 0x07u);
    dst_p->coll_det_reg_state_point2_y |= unpack_right_shift_u16(src_p[6], 0u, 0xffu);
    dst_p->coll_det_reg_state_nof_objects |= unpack_right_shift_u8(src_p[7], 0u, 0xffu);

    return (0);
}

uint8_t ars408_63_coll_det_region_state_coll_det_reg_state_region_id_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_coll_det_region_state_coll_det_reg_state_region_id_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_coll_det_region_state_coll_det_reg_state_region_id_is_in_range(uint8_t value)
{
    return (value <= 7u);
}

uint8_t ars408_63_coll_det_region_state_coll_det_reg_state_warning_level_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_coll_det_region_state_coll_det_reg_state_warning_level_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_coll_det_region_state_coll_det_reg_state_warning_level_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint16_t ars408_63_coll_det_region_state_coll_det_reg_state_point1_x_encode(double value)
{
    return (uint16_t)((value - -500.0) / 0.2);
}

double ars408_63_coll_det_region_state_coll_det_reg_state_point1_x_decode(uint16_t value)
{
    return (((double)value * 0.2) + -500.0);
}

bool ars408_63_coll_det_region_state_coll_det_reg_state_point1_x_is_in_range(uint16_t value)
{
    return (value <= 8191u);
}

uint16_t ars408_63_coll_det_region_state_coll_det_reg_state_point1_y_encode(double value)
{
    return (uint16_t)((value - -204.6) / 0.2);
}

double ars408_63_coll_det_region_state_coll_det_reg_state_point1_y_decode(uint16_t value)
{
    return (((double)value * 0.2) + -204.6);
}

bool ars408_63_coll_det_region_state_coll_det_reg_state_point1_y_is_in_range(uint16_t value)
{
    return (value <= 2047u);
}

uint16_t ars408_63_coll_det_region_state_coll_det_reg_state_point2_x_encode(double value)
{
    return (uint16_t)((value - -500.0) / 0.2);
}

double ars408_63_coll_det_region_state_coll_det_reg_state_point2_x_decode(uint16_t value)
{
    return (((double)value * 0.2) + -500.0);
}

bool ars408_63_coll_det_region_state_coll_det_reg_state_point2_x_is_in_range(uint16_t value)
{
    return (value <= 8191u);
}

uint16_t ars408_63_coll_det_region_state_coll_det_reg_state_point2_y_encode(double value)
{
    return (uint16_t)((value - -204.6) / 0.2);
}

double ars408_63_coll_det_region_state_coll_det_reg_state_point2_y_decode(uint16_t value)
{
    return (((double)value * 0.2) + -204.6);
}

bool ars408_63_coll_det_region_state_coll_det_reg_state_point2_y_is_in_range(uint16_t value)
{
    return (value <= 2047u);
}

uint8_t ars408_63_coll_det_region_state_coll_det_reg_state_nof_objects_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_coll_det_region_state_coll_det_reg_state_nof_objects_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_coll_det_region_state_coll_det_reg_state_nof_objects_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

int ars408_63_obj_4_warning_pack(
    uint8_t *dst_p,
    const struct ars408_63_obj_4_warning_t *src_p,
    size_t size)
{
    if (size < 4u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 4);

    dst_p[0] |= pack_left_shift_u8(src_p->obj_id, 0u, 0xffu);
    dst_p[1] |= pack_left_shift_u8(src_p->obj_coll_det_region_bitfield, 0u, 0xffu);

    return (4);
}

int ars408_63_obj_4_warning_unpack(
    struct ars408_63_obj_4_warning_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
    if (size < 4u) {
        return (-EINVAL);
    }

    memset(dst_p, 0, sizeof(*dst_p));

    dst_p->obj_id |= unpack_right_shift_u8(src_p[0], 0u, 0xffu);
    dst_p->obj_coll_det_region_bitfield |= unpack_right_shift_u8(src_p[1], 0u, 0xffu);

    return (0);
}

uint8_t ars408_63_obj_4_warning_obj_id_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_obj_4_warning_obj_id_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_obj_4_warning_obj_id_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t ars408_63_obj_4_warning_obj_coll_det_region_bitfield_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_obj_4_warning_obj_coll_det_region_bitfield_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_obj_4_warning_obj_coll_det_region_bitfield_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

int ars408_63_coll_det_relay_ctrl_pack(
    uint8_t *dst_p,
    const struct ars408_63_coll_det_relay_ctrl_t *src_p,
    size_t size)
{
    if (size < 1u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 1);

    dst_p[0] |= pack_left_shift_u8(src_p->coll_det_relay_ctrl_param, 0u, 0xffu);

    return (1);
}

int ars408_63_coll_det_relay_ctrl_unpack(
    struct ars408_63_coll_det_relay_ctrl_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
    if (size < 1u) {
        return (-EINVAL);
    }

    memset(dst_p, 0, sizeof(*dst_p));

    dst_p->coll_det_relay_ctrl_param |= unpack_right_shift_u8(src_p[0], 0u, 0xffu);

    return (0);
}

uint8_t ars408_63_coll_det_relay_ctrl_coll_det_relay_ctrl_param_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_coll_det_relay_ctrl_coll_det_relay_ctrl_param_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_coll_det_relay_ctrl_coll_det_relay_ctrl_param_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

int ars408_63_filter_state_cfg_pack(
    uint8_t *dst_p,
    const struct ars408_63_filter_state_cfg_t *src_p,
    size_t size)
{
    if (size < 5u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 5);

    dst_p[0] |= pack_left_shift_u8(src_p->filter_state_type, 7u, 0x80u);
    dst_p[0] |= pack_left_shift_u8(src_p->filter_state_index, 3u, 0x78u);
    dst_p[0] |= pack_left_shift_u8(src_p->filter_state_active, 2u, 0x04u);

    switch (src_p->filter_state_index) {

    case 0:
        dst_p[1] |= pack_right_shift_u16(src_p->filter_state_min_nof_obj, 8u, 0x0fu);
        dst_p[2] |= pack_left_shift_u16(src_p->filter_state_min_nof_obj, 0u, 0xffu);
        dst_p[3] |= pack_right_shift_u16(src_p->filter_state_max_nof_obj, 8u, 0x0fu);
        dst_p[4] |= pack_left_shift_u16(src_p->filter_state_max_nof_obj, 0u, 0xffu);
        break;

    case 1:
        dst_p[1] |= pack_right_shift_u16(src_p->filter_state_min_distance, 8u, 0x0fu);
        dst_p[2] |= pack_left_shift_u16(src_p->filter_state_min_distance, 0u, 0xffu);
        dst_p[3] |= pack_right_shift_u16(src_p->filter_state_max_distance, 8u, 0x0fu);
        dst_p[4] |= pack_left_shift_u16(src_p->filter_state_max_distance, 0u, 0xffu);
        break;

    case 2:
        dst_p[1] |= pack_right_shift_u16(src_p->filter_state_min_azimuth, 8u, 0x0fu);
        dst_p[2] |= pack_left_shift_u16(src_p->filter_state_min_azimuth, 0u, 0xffu);
        dst_p[3] |= pack_right_shift_u16(src_p->filter_state_max_azimuth, 8u, 0x0fu);
        dst_p[4] |= pack_left_shift_u16(src_p->filter_state_max_azimuth, 0u, 0xffu);
        break;

    case 3:
        dst_p[1] |= pack_right_shift_u16(src_p->filter_state_min_vrel_oncome, 8u, 0x0fu);
        dst_p[2] |= pack_left_shift_u16(src_p->filter_state_min_vrel_oncome, 0u, 0xffu);
        dst_p[3] |= pack_right_shift_u16(src_p->filter_state_max_vrel_oncome, 8u, 0x0fu);
        dst_p[4] |= pack_left_shift_u16(src_p->filter_state_max_vrel_oncome, 0u, 0xffu);
        break;

    case 4:
        dst_p[1] |= pack_right_shift_u16(src_p->filter_state_min_vrel_depart, 8u, 0x0fu);
        dst_p[2] |= pack_left_shift_u16(src_p->filter_state_min_vrel_depart, 0u, 0xffu);
        dst_p[3] |= pack_right_shift_u16(src_p->filter_state_max_vrel_depart, 8u, 0x0fu);
        dst_p[4] |= pack_left_shift_u16(src_p->filter_state_max_vrel_depart, 0u, 0xffu);
        break;

    case 5:
        dst_p[1] |= pack_right_shift_u16(src_p->filter_state_min_rcs, 8u, 0x0fu);
        dst_p[2] |= pack_left_shift_u16(src_p->filter_state_min_rcs, 0u, 0xffu);
        dst_p[3] |= pack_right_shift_u16(src_p->filter_state_max_rcs, 8u, 0x0fu);
        dst_p[4] |= pack_left_shift_u16(src_p->filter_state_max_rcs, 0u, 0xffu);
        break;

    case 6:
        dst_p[1] |= pack_right_shift_u16(src_p->filter_state_min_lifetime, 8u, 0x0fu);
        dst_p[2] |= pack_left_shift_u16(src_p->filter_state_min_lifetime, 0u, 0xffu);
        dst_p[3] |= pack_right_shift_u16(src_p->filter_state_max_lifetime, 8u, 0x0fu);
        dst_p[4] |= pack_left_shift_u16(src_p->filter_state_max_lifetime, 0u, 0xffu);
        break;

    case 7:
        dst_p[1] |= pack_right_shift_u16(src_p->filter_state_min_size, 8u, 0x0fu);
        dst_p[2] |= pack_left_shift_u16(src_p->filter_state_min_size, 0u, 0xffu);
        dst_p[3] |= pack_right_shift_u16(src_p->filter_state_max_size, 8u, 0x0fu);
        dst_p[4] |= pack_left_shift_u16(src_p->filter_state_max_size, 0u, 0xffu);
        break;

    case 8:
        dst_p[1] |= pack_right_shift_u16(src_p->filter_state_min_prob_exists, 8u, 0x0fu);
        dst_p[2] |= pack_left_shift_u16(src_p->filter_state_min_prob_exists, 0u, 0xffu);
        dst_p[3] |= pack_right_shift_u16(src_p->filter_state_max_prob_exists, 8u, 0x0fu);
        dst_p[4] |= pack_left_shift_u16(src_p->filter_state_max_prob_exists, 0u, 0xffu);
        break;

    case 9:
        dst_p[1] |= pack_right_shift_u16(src_p->filter_state_min_y, 8u, 0x0fu);
        dst_p[2] |= pack_left_shift_u16(src_p->filter_state_min_y, 0u, 0xffu);
        dst_p[3] |= pack_right_shift_u16(src_p->filter_state_max_y, 8u, 0x0fu);
        dst_p[4] |= pack_left_shift_u16(src_p->filter_state_max_y, 0u, 0xffu);
        break;

    case 10:
        dst_p[1] |= pack_right_shift_u16(src_p->filter_state_min_x, 8u, 0x1fu);
        dst_p[2] |= pack_left_shift_u16(src_p->filter_state_min_x, 0u, 0xffu);
        dst_p[3] |= pack_right_shift_u16(src_p->filter_state_max_x, 8u, 0x1fu);
        dst_p[4] |= pack_left_shift_u16(src_p->filter_state_max_x, 0u, 0xffu);
        break;

    case 11:
        dst_p[1] |= pack_right_shift_u16(src_p->filter_state_min_vy_left_right, 8u, 0x0fu);
        dst_p[2] |= pack_left_shift_u16(src_p->filter_state_min_vy_left_right, 0u, 0xffu);
        dst_p[3] |= pack_right_shift_u16(src_p->filter_state_max_vy_left_right, 8u, 0x0fu);
        dst_p[4] |= pack_left_shift_u16(src_p->filter_state_max_vy_left_right, 0u, 0xffu);
        break;

    case 12:
        dst_p[1] |= pack_right_shift_u16(src_p->filter_state_min_vx_oncome, 8u, 0x0fu);
        dst_p[2] |= pack_left_shift_u16(src_p->filter_state_min_vx_oncome, 0u, 0xffu);
        dst_p[3] |= pack_right_shift_u16(src_p->filter_state_max_vx_oncome, 8u, 0x0fu);
        dst_p[4] |= pack_left_shift_u16(src_p->filter_state_max_vx_oncome, 0u, 0xffu);
        break;

    case 13:
        dst_p[1] |= pack_right_shift_u16(src_p->filter_state_min_vy_right_left, 8u, 0x0fu);
        dst_p[2] |= pack_left_shift_u16(src_p->filter_state_min_vy_right_left, 0u, 0xffu);
        dst_p[3] |= pack_right_shift_u16(src_p->filter_state_max_vy_right_left, 8u, 0x0fu);
        dst_p[4] |= pack_left_shift_u16(src_p->filter_state_max_vy_right_left, 0u, 0xffu);
        break;

    case 14:
        dst_p[1] |= pack_right_shift_u16(src_p->filter_state_min_vx_depart, 8u, 0x0fu);
        dst_p[2] |= pack_left_shift_u16(src_p->filter_state_min_vx_depart, 0u, 0xffu);
        dst_p[3] |= pack_right_shift_u16(src_p->filter_state_max_vx_depart, 8u, 0x0fu);
        dst_p[4] |= pack_left_shift_u16(src_p->filter_state_max_vx_depart, 0u, 0xffu);
        break;

    case 15:
        break;

    default:
        break;
    }

    return (5);
}

int ars408_63_filter_state_cfg_unpack(
    struct ars408_63_filter_state_cfg_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
    if (size < 5u) {
        return (-EINVAL);
    }

    memset(dst_p, 0, sizeof(*dst_p));

    dst_p->filter_state_type |= unpack_right_shift_u8(src_p[0], 7u, 0x80u);
    dst_p->filter_state_index |= unpack_right_shift_u8(src_p[0], 3u, 0x78u);
    dst_p->filter_state_active |= unpack_right_shift_u8(src_p[0], 2u, 0x04u);

    switch (dst_p->filter_state_index) {

    case 0:
        dst_p->filter_state_min_nof_obj |= unpack_left_shift_u16(src_p[1], 8u, 0x0fu);
        dst_p->filter_state_min_nof_obj |= unpack_right_shift_u16(src_p[2], 0u, 0xffu);
        dst_p->filter_state_max_nof_obj |= unpack_left_shift_u16(src_p[3], 8u, 0x0fu);
        dst_p->filter_state_max_nof_obj |= unpack_right_shift_u16(src_p[4], 0u, 0xffu);
        break;

    case 1:
        dst_p->filter_state_min_distance |= unpack_left_shift_u16(src_p[1], 8u, 0x0fu);
        dst_p->filter_state_min_distance |= unpack_right_shift_u16(src_p[2], 0u, 0xffu);
        dst_p->filter_state_max_distance |= unpack_left_shift_u16(src_p[3], 8u, 0x0fu);
        dst_p->filter_state_max_distance |= unpack_right_shift_u16(src_p[4], 0u, 0xffu);
        break;

    case 2:
        dst_p->filter_state_min_azimuth |= unpack_left_shift_u16(src_p[1], 8u, 0x0fu);
        dst_p->filter_state_min_azimuth |= unpack_right_shift_u16(src_p[2], 0u, 0xffu);
        dst_p->filter_state_max_azimuth |= unpack_left_shift_u16(src_p[3], 8u, 0x0fu);
        dst_p->filter_state_max_azimuth |= unpack_right_shift_u16(src_p[4], 0u, 0xffu);
        break;

    case 3:
        dst_p->filter_state_min_vrel_oncome |= unpack_left_shift_u16(src_p[1], 8u, 0x0fu);
        dst_p->filter_state_min_vrel_oncome |= unpack_right_shift_u16(src_p[2], 0u, 0xffu);
        dst_p->filter_state_max_vrel_oncome |= unpack_left_shift_u16(src_p[3], 8u, 0x0fu);
        dst_p->filter_state_max_vrel_oncome |= unpack_right_shift_u16(src_p[4], 0u, 0xffu);
        break;

    case 4:
        dst_p->filter_state_min_vrel_depart |= unpack_left_shift_u16(src_p[1], 8u, 0x0fu);
        dst_p->filter_state_min_vrel_depart |= unpack_right_shift_u16(src_p[2], 0u, 0xffu);
        dst_p->filter_state_max_vrel_depart |= unpack_left_shift_u16(src_p[3], 8u, 0x0fu);
        dst_p->filter_state_max_vrel_depart |= unpack_right_shift_u16(src_p[4], 0u, 0xffu);
        break;

    case 5:
        dst_p->filter_state_min_rcs |= unpack_left_shift_u16(src_p[1], 8u, 0x0fu);
        dst_p->filter_state_min_rcs |= unpack_right_shift_u16(src_p[2], 0u, 0xffu);
        dst_p->filter_state_max_rcs |= unpack_left_shift_u16(src_p[3], 8u, 0x0fu);
        dst_p->filter_state_max_rcs |= unpack_right_shift_u16(src_p[4], 0u, 0xffu);
        break;

    case 6:
        dst_p->filter_state_min_lifetime |= unpack_left_shift_u16(src_p[1], 8u, 0x0fu);
        dst_p->filter_state_min_lifetime |= unpack_right_shift_u16(src_p[2], 0u, 0xffu);
        dst_p->filter_state_max_lifetime |= unpack_left_shift_u16(src_p[3], 8u, 0x0fu);
        dst_p->filter_state_max_lifetime |= unpack_right_shift_u16(src_p[4], 0u, 0xffu);
        break;

    case 7:
        dst_p->filter_state_min_size |= unpack_left_shift_u16(src_p[1], 8u, 0x0fu);
        dst_p->filter_state_min_size |= unpack_right_shift_u16(src_p[2], 0u, 0xffu);
        dst_p->filter_state_max_size |= unpack_left_shift_u16(src_p[3], 8u, 0x0fu);
        dst_p->filter_state_max_size |= unpack_right_shift_u16(src_p[4], 0u, 0xffu);
        break;

    case 8:
        dst_p->filter_state_min_prob_exists |= unpack_left_shift_u16(src_p[1], 8u, 0x0fu);
        dst_p->filter_state_min_prob_exists |= unpack_right_shift_u16(src_p[2], 0u, 0xffu);
        dst_p->filter_state_max_prob_exists |= unpack_left_shift_u16(src_p[3], 8u, 0x0fu);
        dst_p->filter_state_max_prob_exists |= unpack_right_shift_u16(src_p[4], 0u, 0xffu);
        break;

    case 9:
        dst_p->filter_state_min_y |= unpack_left_shift_u16(src_p[1], 8u, 0x0fu);
        dst_p->filter_state_min_y |= unpack_right_shift_u16(src_p[2], 0u, 0xffu);
        dst_p->filter_state_max_y |= unpack_left_shift_u16(src_p[3], 8u, 0x0fu);
        dst_p->filter_state_max_y |= unpack_right_shift_u16(src_p[4], 0u, 0xffu);
        break;

    case 10:
        dst_p->filter_state_min_x |= unpack_left_shift_u16(src_p[1], 8u, 0x1fu);
        dst_p->filter_state_min_x |= unpack_right_shift_u16(src_p[2], 0u, 0xffu);
        dst_p->filter_state_max_x |= unpack_left_shift_u16(src_p[3], 8u, 0x1fu);
        dst_p->filter_state_max_x |= unpack_right_shift_u16(src_p[4], 0u, 0xffu);
        break;

    case 11:
        dst_p->filter_state_min_vy_left_right |= unpack_left_shift_u16(src_p[1], 8u, 0x0fu);
        dst_p->filter_state_min_vy_left_right |= unpack_right_shift_u16(src_p[2], 0u, 0xffu);
        dst_p->filter_state_max_vy_left_right |= unpack_left_shift_u16(src_p[3], 8u, 0x0fu);
        dst_p->filter_state_max_vy_left_right |= unpack_right_shift_u16(src_p[4], 0u, 0xffu);
        break;

    case 12:
        dst_p->filter_state_min_vx_oncome |= unpack_left_shift_u16(src_p[1], 8u, 0x0fu);
        dst_p->filter_state_min_vx_oncome |= unpack_right_shift_u16(src_p[2], 0u, 0xffu);
        dst_p->filter_state_max_vx_oncome |= unpack_left_shift_u16(src_p[3], 8u, 0x0fu);
        dst_p->filter_state_max_vx_oncome |= unpack_right_shift_u16(src_p[4], 0u, 0xffu);
        break;

    case 13:
        dst_p->filter_state_min_vy_right_left |= unpack_left_shift_u16(src_p[1], 8u, 0x0fu);
        dst_p->filter_state_min_vy_right_left |= unpack_right_shift_u16(src_p[2], 0u, 0xffu);
        dst_p->filter_state_max_vy_right_left |= unpack_left_shift_u16(src_p[3], 8u, 0x0fu);
        dst_p->filter_state_max_vy_right_left |= unpack_right_shift_u16(src_p[4], 0u, 0xffu);
        break;

    case 14:
        dst_p->filter_state_min_vx_depart |= unpack_left_shift_u16(src_p[1], 8u, 0x0fu);
        dst_p->filter_state_min_vx_depart |= unpack_right_shift_u16(src_p[2], 0u, 0xffu);
        dst_p->filter_state_max_vx_depart |= unpack_left_shift_u16(src_p[3], 8u, 0x0fu);
        dst_p->filter_state_max_vx_depart |= unpack_right_shift_u16(src_p[4], 0u, 0xffu);
        break;

    case 15:
        break;

    default:
        break;
    }

    return (0);
}

uint8_t ars408_63_filter_state_cfg_filter_state_type_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_filter_state_cfg_filter_state_type_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_filter_state_cfg_filter_state_type_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t ars408_63_filter_state_cfg_filter_state_index_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_filter_state_cfg_filter_state_index_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_filter_state_cfg_filter_state_index_is_in_range(uint8_t value)
{
    return (value <= 15u);
}

uint8_t ars408_63_filter_state_cfg_filter_state_active_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_filter_state_cfg_filter_state_active_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_filter_state_cfg_filter_state_active_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint16_t ars408_63_filter_state_cfg_filter_state_min_x_encode(double value)
{
    return (uint16_t)((value - -500.0) / 0.2);
}

double ars408_63_filter_state_cfg_filter_state_min_x_decode(uint16_t value)
{
    return (((double)value * 0.2) + -500.0);
}

bool ars408_63_filter_state_cfg_filter_state_min_x_is_in_range(uint16_t value)
{
    return (value <= 8191u);
}

uint16_t ars408_63_filter_state_cfg_filter_state_min_y_encode(double value)
{
    return (uint16_t)((value - -409.5) / 0.2);
}

double ars408_63_filter_state_cfg_filter_state_min_y_decode(uint16_t value)
{
    return (((double)value * 0.2) + -409.5);
}

bool ars408_63_filter_state_cfg_filter_state_min_y_is_in_range(uint16_t value)
{
    return (value <= 4095u);
}

uint16_t ars408_63_filter_state_cfg_filter_state_min_vy_right_left_encode(double value)
{
    return (uint16_t)(value / 0.0315);
}

double ars408_63_filter_state_cfg_filter_state_min_vy_right_left_decode(uint16_t value)
{
    return ((double)value * 0.0315);
}

bool ars408_63_filter_state_cfg_filter_state_min_vy_right_left_is_in_range(uint16_t value)
{
    return (value <= 4095u);
}

uint16_t ars408_63_filter_state_cfg_filter_state_min_vy_left_right_encode(double value)
{
    return (uint16_t)(value / 0.0315);
}

double ars408_63_filter_state_cfg_filter_state_min_vy_left_right_decode(uint16_t value)
{
    return ((double)value * 0.0315);
}

bool ars408_63_filter_state_cfg_filter_state_min_vy_left_right_is_in_range(uint16_t value)
{
    return (value <= 4095u);
}

uint16_t ars408_63_filter_state_cfg_filter_state_min_vx_oncome_encode(double value)
{
    return (uint16_t)(value / 0.0315);
}

double ars408_63_filter_state_cfg_filter_state_min_vx_oncome_decode(uint16_t value)
{
    return ((double)value * 0.0315);
}

bool ars408_63_filter_state_cfg_filter_state_min_vx_oncome_is_in_range(uint16_t value)
{
    return (value <= 4095u);
}

uint16_t ars408_63_filter_state_cfg_filter_state_min_vx_depart_encode(double value)
{
    return (uint16_t)(value / 0.0315);
}

double ars408_63_filter_state_cfg_filter_state_min_vx_depart_decode(uint16_t value)
{
    return ((double)value * 0.0315);
}

bool ars408_63_filter_state_cfg_filter_state_min_vx_depart_is_in_range(uint16_t value)
{
    return (value <= 4095u);
}

uint16_t ars408_63_filter_state_cfg_filter_state_min_vrel_oncome_encode(double value)
{
    return (uint16_t)(value / 0.0315);
}

double ars408_63_filter_state_cfg_filter_state_min_vrel_oncome_decode(uint16_t value)
{
    return ((double)value * 0.0315);
}

bool ars408_63_filter_state_cfg_filter_state_min_vrel_oncome_is_in_range(uint16_t value)
{
    return (value <= 4095u);
}

uint16_t ars408_63_filter_state_cfg_filter_state_min_vrel_depart_encode(double value)
{
    return (uint16_t)(value / 0.0315);
}

double ars408_63_filter_state_cfg_filter_state_min_vrel_depart_decode(uint16_t value)
{
    return ((double)value * 0.0315);
}

bool ars408_63_filter_state_cfg_filter_state_min_vrel_depart_is_in_range(uint16_t value)
{
    return (value <= 4095u);
}

uint16_t ars408_63_filter_state_cfg_filter_state_min_size_encode(double value)
{
    return (uint16_t)(value / 0.025);
}

double ars408_63_filter_state_cfg_filter_state_min_size_decode(uint16_t value)
{
    return ((double)value * 0.025);
}

bool ars408_63_filter_state_cfg_filter_state_min_size_is_in_range(uint16_t value)
{
    return (value <= 4095u);
}

uint16_t ars408_63_filter_state_cfg_filter_state_min_rcs_encode(double value)
{
    return (uint16_t)((value - -50.0) / 0.025);
}

double ars408_63_filter_state_cfg_filter_state_min_rcs_decode(uint16_t value)
{
    return (((double)value * 0.025) + -50.0);
}

bool ars408_63_filter_state_cfg_filter_state_min_rcs_is_in_range(uint16_t value)
{
    return (value <= 4095u);
}

uint16_t ars408_63_filter_state_cfg_filter_state_min_prob_exists_encode(double value)
{
    return (uint16_t)(value);
}

double ars408_63_filter_state_cfg_filter_state_min_prob_exists_decode(uint16_t value)
{
    return ((double)value);
}

bool ars408_63_filter_state_cfg_filter_state_min_prob_exists_is_in_range(uint16_t value)
{
    return (value <= 7u);
}

uint16_t ars408_63_filter_state_cfg_filter_state_min_nof_obj_encode(double value)
{
    return (uint16_t)(value);
}

double ars408_63_filter_state_cfg_filter_state_min_nof_obj_decode(uint16_t value)
{
    return ((double)value);
}

bool ars408_63_filter_state_cfg_filter_state_min_nof_obj_is_in_range(uint16_t value)
{
    return (value <= 4095u);
}

uint16_t ars408_63_filter_state_cfg_filter_state_min_lifetime_encode(double value)
{
    return (uint16_t)(value / 0.1);
}

double ars408_63_filter_state_cfg_filter_state_min_lifetime_decode(uint16_t value)
{
    return ((double)value * 0.1);
}

bool ars408_63_filter_state_cfg_filter_state_min_lifetime_is_in_range(uint16_t value)
{
    return (value <= 4095u);
}

uint16_t ars408_63_filter_state_cfg_filter_state_min_distance_encode(double value)
{
    return (uint16_t)(value / 0.1);
}

double ars408_63_filter_state_cfg_filter_state_min_distance_decode(uint16_t value)
{
    return ((double)value * 0.1);
}

bool ars408_63_filter_state_cfg_filter_state_min_distance_is_in_range(uint16_t value)
{
    return (value <= 4095u);
}

uint16_t ars408_63_filter_state_cfg_filter_state_min_azimuth_encode(double value)
{
    return (uint16_t)((value - -50.0) / 0.025);
}

double ars408_63_filter_state_cfg_filter_state_min_azimuth_decode(uint16_t value)
{
    return (((double)value * 0.025) + -50.0);
}

bool ars408_63_filter_state_cfg_filter_state_min_azimuth_is_in_range(uint16_t value)
{
    return (value <= 4095u);
}

uint16_t ars408_63_filter_state_cfg_filter_state_max_x_encode(double value)
{
    return (uint16_t)((value - -500.0) / 0.2);
}

double ars408_63_filter_state_cfg_filter_state_max_x_decode(uint16_t value)
{
    return (((double)value * 0.2) + -500.0);
}

bool ars408_63_filter_state_cfg_filter_state_max_x_is_in_range(uint16_t value)
{
    return (value <= 8191u);
}

uint16_t ars408_63_filter_state_cfg_filter_state_max_y_encode(double value)
{
    return (uint16_t)((value - -409.5) / 0.2);
}

double ars408_63_filter_state_cfg_filter_state_max_y_decode(uint16_t value)
{
    return (((double)value * 0.2) + -409.5);
}

bool ars408_63_filter_state_cfg_filter_state_max_y_is_in_range(uint16_t value)
{
    return (value <= 4095u);
}

uint16_t ars408_63_filter_state_cfg_filter_state_max_vy_right_left_encode(double value)
{
    return (uint16_t)(value / 0.0315);
}

double ars408_63_filter_state_cfg_filter_state_max_vy_right_left_decode(uint16_t value)
{
    return ((double)value * 0.0315);
}

bool ars408_63_filter_state_cfg_filter_state_max_vy_right_left_is_in_range(uint16_t value)
{
    return (value <= 4095u);
}

uint16_t ars408_63_filter_state_cfg_filter_state_max_vy_left_right_encode(double value)
{
    return (uint16_t)(value / 0.0315);
}

double ars408_63_filter_state_cfg_filter_state_max_vy_left_right_decode(uint16_t value)
{
    return ((double)value * 0.0315);
}

bool ars408_63_filter_state_cfg_filter_state_max_vy_left_right_is_in_range(uint16_t value)
{
    return (value <= 4095u);
}

uint16_t ars408_63_filter_state_cfg_filter_state_max_vx_oncome_encode(double value)
{
    return (uint16_t)(value / 0.0315);
}

double ars408_63_filter_state_cfg_filter_state_max_vx_oncome_decode(uint16_t value)
{
    return ((double)value * 0.0315);
}

bool ars408_63_filter_state_cfg_filter_state_max_vx_oncome_is_in_range(uint16_t value)
{
    return (value <= 4095u);
}

uint16_t ars408_63_filter_state_cfg_filter_state_max_vx_depart_encode(double value)
{
    return (uint16_t)(value / 0.0315);
}

double ars408_63_filter_state_cfg_filter_state_max_vx_depart_decode(uint16_t value)
{
    return ((double)value * 0.0315);
}

bool ars408_63_filter_state_cfg_filter_state_max_vx_depart_is_in_range(uint16_t value)
{
    return (value <= 4095u);
}

uint16_t ars408_63_filter_state_cfg_filter_state_max_vrel_oncome_encode(double value)
{
    return (uint16_t)(value / 0.0315);
}

double ars408_63_filter_state_cfg_filter_state_max_vrel_oncome_decode(uint16_t value)
{
    return ((double)value * 0.0315);
}

bool ars408_63_filter_state_cfg_filter_state_max_vrel_oncome_is_in_range(uint16_t value)
{
    return (value <= 4095u);
}

uint16_t ars408_63_filter_state_cfg_filter_state_max_vrel_depart_encode(double value)
{
    return (uint16_t)(value / 0.0315);
}

double ars408_63_filter_state_cfg_filter_state_max_vrel_depart_decode(uint16_t value)
{
    return ((double)value * 0.0315);
}

bool ars408_63_filter_state_cfg_filter_state_max_vrel_depart_is_in_range(uint16_t value)
{
    return (value <= 4095u);
}

uint16_t ars408_63_filter_state_cfg_filter_state_max_size_encode(double value)
{
    return (uint16_t)(value / 0.025);
}

double ars408_63_filter_state_cfg_filter_state_max_size_decode(uint16_t value)
{
    return ((double)value * 0.025);
}

bool ars408_63_filter_state_cfg_filter_state_max_size_is_in_range(uint16_t value)
{
    return (value <= 4095u);
}

uint16_t ars408_63_filter_state_cfg_filter_state_max_rcs_encode(double value)
{
    return (uint16_t)((value - -50.0) / 0.025);
}

double ars408_63_filter_state_cfg_filter_state_max_rcs_decode(uint16_t value)
{
    return (((double)value * 0.025) + -50.0);
}

bool ars408_63_filter_state_cfg_filter_state_max_rcs_is_in_range(uint16_t value)
{
    return (value <= 4095u);
}

uint16_t ars408_63_filter_state_cfg_filter_state_max_prob_exists_encode(double value)
{
    return (uint16_t)(value);
}

double ars408_63_filter_state_cfg_filter_state_max_prob_exists_decode(uint16_t value)
{
    return ((double)value);
}

bool ars408_63_filter_state_cfg_filter_state_max_prob_exists_is_in_range(uint16_t value)
{
    return (value <= 4095u);
}

uint16_t ars408_63_filter_state_cfg_filter_state_max_nof_obj_encode(double value)
{
    return (uint16_t)(value);
}

double ars408_63_filter_state_cfg_filter_state_max_nof_obj_decode(uint16_t value)
{
    return ((double)value);
}

bool ars408_63_filter_state_cfg_filter_state_max_nof_obj_is_in_range(uint16_t value)
{
    return (value <= 4095u);
}

uint16_t ars408_63_filter_state_cfg_filter_state_max_lifetime_encode(double value)
{
    return (uint16_t)(value / 0.1);
}

double ars408_63_filter_state_cfg_filter_state_max_lifetime_decode(uint16_t value)
{
    return ((double)value * 0.1);
}

bool ars408_63_filter_state_cfg_filter_state_max_lifetime_is_in_range(uint16_t value)
{
    return (value <= 4095u);
}

uint16_t ars408_63_filter_state_cfg_filter_state_max_distance_encode(double value)
{
    return (uint16_t)(value / 0.1);
}

double ars408_63_filter_state_cfg_filter_state_max_distance_decode(uint16_t value)
{
    return ((double)value * 0.1);
}

bool ars408_63_filter_state_cfg_filter_state_max_distance_is_in_range(uint16_t value)
{
    return (value <= 4095u);
}

uint16_t ars408_63_filter_state_cfg_filter_state_max_azimuth_encode(double value)
{
    return (uint16_t)((value - -50.0) / 0.025);
}

double ars408_63_filter_state_cfg_filter_state_max_azimuth_decode(uint16_t value)
{
    return (((double)value * 0.025) + -50.0);
}

bool ars408_63_filter_state_cfg_filter_state_max_azimuth_is_in_range(uint16_t value)
{
    return (value <= 4095u);
}

int ars408_63_filter_state_header_pack(
    uint8_t *dst_p,
    const struct ars408_63_filter_state_header_t *src_p,
    size_t size)
{
    if (size < 2u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 2);

    dst_p[0] |= pack_left_shift_u8(src_p->filter_state_nof_cluster_filter_cfg, 3u, 0xf8u);
    dst_p[1] |= pack_left_shift_u8(src_p->filter_state_nof_object_filter_cfg, 3u, 0xf8u);

    return (2);
}

int ars408_63_filter_state_header_unpack(
    struct ars408_63_filter_state_header_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
    if (size < 2u) {
        return (-EINVAL);
    }

    memset(dst_p, 0, sizeof(*dst_p));

    dst_p->filter_state_nof_cluster_filter_cfg |= unpack_right_shift_u8(src_p[0], 3u, 0xf8u);
    dst_p->filter_state_nof_object_filter_cfg |= unpack_right_shift_u8(src_p[1], 3u, 0xf8u);

    return (0);
}

uint8_t ars408_63_filter_state_header_filter_state_nof_cluster_filter_cfg_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_filter_state_header_filter_state_nof_cluster_filter_cfg_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_filter_state_header_filter_state_nof_cluster_filter_cfg_is_in_range(uint8_t value)
{
    return (value <= 31u);
}

uint8_t ars408_63_filter_state_header_filter_state_nof_object_filter_cfg_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_filter_state_header_filter_state_nof_object_filter_cfg_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_filter_state_header_filter_state_nof_object_filter_cfg_is_in_range(uint8_t value)
{
    return (value <= 31u);
}

int ars408_63_filter_cfg_pack(
    uint8_t *dst_p,
    const struct ars408_63_filter_cfg_t *src_p,
    size_t size)
{
    if (size < 5u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 5);

    dst_p[0] |= pack_left_shift_u8(src_p->filter_cfg_type, 7u, 0x80u);
    dst_p[0] |= pack_left_shift_u8(src_p->filter_cfg_index, 3u, 0x78u);
    dst_p[0] |= pack_left_shift_u8(src_p->filter_cfg_active, 2u, 0x04u);
    dst_p[0] |= pack_left_shift_u8(src_p->filter_cfg_valid, 1u, 0x02u);

    switch (src_p->filter_cfg_index) {

    case 0:
        dst_p[1] |= pack_right_shift_u16(src_p->filter_cfg_min_nof_obj, 8u, 0x0fu);
        dst_p[2] |= pack_left_shift_u16(src_p->filter_cfg_min_nof_obj, 0u, 0xffu);
        dst_p[3] |= pack_right_shift_u16(src_p->filter_cfg_max_nof_obj, 8u, 0x0fu);
        dst_p[4] |= pack_left_shift_u16(src_p->filter_cfg_max_nof_obj, 0u, 0xffu);
        break;

    case 1:
        dst_p[1] |= pack_right_shift_u16(src_p->filter_cfg_min_distance, 8u, 0x0fu);
        dst_p[2] |= pack_left_shift_u16(src_p->filter_cfg_min_distance, 0u, 0xffu);
        dst_p[3] |= pack_right_shift_u16(src_p->filter_cfg_max_distance, 8u, 0x0fu);
        dst_p[4] |= pack_left_shift_u16(src_p->filter_cfg_max_distance, 0u, 0xffu);
        break;

    case 2:
        dst_p[1] |= pack_right_shift_u16(src_p->filter_cfg_min_azimuth, 8u, 0x0fu);
        dst_p[2] |= pack_left_shift_u16(src_p->filter_cfg_min_azimuth, 0u, 0xffu);
        dst_p[3] |= pack_right_shift_u16(src_p->filter_cfg_max_azimuth, 8u, 0x0fu);
        dst_p[4] |= pack_left_shift_u16(src_p->filter_cfg_max_azimuth, 0u, 0xffu);
        break;

    case 3:
        dst_p[1] |= pack_right_shift_u16(src_p->filter_cfg_min_vrel_oncome, 8u, 0x0fu);
        dst_p[2] |= pack_left_shift_u16(src_p->filter_cfg_min_vrel_oncome, 0u, 0xffu);
        dst_p[3] |= pack_right_shift_u16(src_p->filter_cfg_max_vrel_oncome, 8u, 0x0fu);
        dst_p[4] |= pack_left_shift_u16(src_p->filter_cfg_max_vrel_oncome, 0u, 0xffu);
        break;

    case 4:
        dst_p[1] |= pack_right_shift_u16(src_p->filter_cfg_min_vrel_depart, 8u, 0x0fu);
        dst_p[2] |= pack_left_shift_u16(src_p->filter_cfg_min_vrel_depart, 0u, 0xffu);
        dst_p[3] |= pack_right_shift_u16(src_p->filter_cfg_max_vrel_depart, 8u, 0x0fu);
        dst_p[4] |= pack_left_shift_u16(src_p->filter_cfg_max_vrel_depart, 0u, 0xffu);
        break;

    case 5:
        dst_p[1] |= pack_right_shift_u16(src_p->filter_cfg_min_rcs, 8u, 0x0fu);
        dst_p[2] |= pack_left_shift_u16(src_p->filter_cfg_min_rcs, 0u, 0xffu);
        dst_p[3] |= pack_right_shift_u16(src_p->filter_cfg_max_rcs, 8u, 0x0fu);
        dst_p[4] |= pack_left_shift_u16(src_p->filter_cfg_max_rcs, 0u, 0xffu);
        break;

    case 6:
        dst_p[1] |= pack_right_shift_u16(src_p->filter_cfg_min_lifetime, 8u, 0x0fu);
        dst_p[2] |= pack_left_shift_u16(src_p->filter_cfg_min_lifetime, 0u, 0xffu);
        dst_p[3] |= pack_right_shift_u16(src_p->filter_cfg_max_lifetime, 8u, 0x0fu);
        dst_p[4] |= pack_left_shift_u16(src_p->filter_cfg_max_lifetime, 0u, 0xffu);
        break;

    case 7:
        dst_p[1] |= pack_right_shift_u16(src_p->filter_cfg_min_size, 8u, 0x0fu);
        dst_p[2] |= pack_left_shift_u16(src_p->filter_cfg_min_size, 0u, 0xffu);
        dst_p[3] |= pack_right_shift_u16(src_p->filter_cfg_max_size, 8u, 0x0fu);
        dst_p[4] |= pack_left_shift_u16(src_p->filter_cfg_max_size, 0u, 0xffu);
        break;

    case 8:
        dst_p[1] |= pack_right_shift_u16(src_p->filter_cfg_min_prob_exists, 8u, 0x0fu);
        dst_p[2] |= pack_left_shift_u16(src_p->filter_cfg_min_prob_exists, 0u, 0xffu);
        dst_p[3] |= pack_right_shift_u16(src_p->filter_cfg_max_prob_exists, 8u, 0x0fu);
        dst_p[4] |= pack_left_shift_u16(src_p->filter_cfg_max_prob_exists, 0u, 0xffu);
        break;

    case 9:
        dst_p[1] |= pack_right_shift_u16(src_p->filter_cfg_min_y, 8u, 0x0fu);
        dst_p[2] |= pack_left_shift_u16(src_p->filter_cfg_min_y, 0u, 0xffu);
        dst_p[3] |= pack_right_shift_u16(src_p->filter_cfg_max_y, 8u, 0x0fu);
        dst_p[4] |= pack_left_shift_u16(src_p->filter_cfg_max_y, 0u, 0xffu);
        break;

    case 10:
        dst_p[1] |= pack_right_shift_u16(src_p->filter_cfg_min_x, 8u, 0x1fu);
        dst_p[2] |= pack_left_shift_u16(src_p->filter_cfg_min_x, 0u, 0xffu);
        dst_p[3] |= pack_right_shift_u16(src_p->filter_cfg_max_x, 8u, 0x1fu);
        dst_p[4] |= pack_left_shift_u16(src_p->filter_cfg_max_x, 0u, 0xffu);
        break;

    case 11:
        dst_p[1] |= pack_right_shift_u16(src_p->filter_cfg_min_vy_left_right, 8u, 0x0fu);
        dst_p[2] |= pack_left_shift_u16(src_p->filter_cfg_min_vy_left_right, 0u, 0xffu);
        dst_p[3] |= pack_right_shift_u16(src_p->filter_cfg_max_vy_left_right, 8u, 0x0fu);
        dst_p[4] |= pack_left_shift_u16(src_p->filter_cfg_max_vy_left_right, 0u, 0xffu);
        break;

    case 12:
        dst_p[1] |= pack_right_shift_u16(src_p->filter_cfg_min_vx_oncome, 8u, 0x0fu);
        dst_p[2] |= pack_left_shift_u16(src_p->filter_cfg_min_vx_oncome, 0u, 0xffu);
        dst_p[3] |= pack_right_shift_u16(src_p->filter_cfg_max_vx_oncome, 8u, 0x0fu);
        dst_p[4] |= pack_left_shift_u16(src_p->filter_cfg_max_vx_oncome, 0u, 0xffu);
        break;

    case 13:
        dst_p[1] |= pack_right_shift_u16(src_p->filter_cfg_min_vy_right_left, 8u, 0x0fu);
        dst_p[2] |= pack_left_shift_u16(src_p->filter_cfg_min_vy_right_left, 0u, 0xffu);
        dst_p[3] |= pack_right_shift_u16(src_p->filter_cfg_max_vy_right_left, 8u, 0x0fu);
        dst_p[4] |= pack_left_shift_u16(src_p->filter_cfg_max_vy_right_left, 0u, 0xffu);
        break;

    case 14:
        dst_p[1] |= pack_right_shift_u16(src_p->filter_cfg_min_vx_depart, 8u, 0x0fu);
        dst_p[2] |= pack_left_shift_u16(src_p->filter_cfg_min_vx_depart, 0u, 0xffu);
        dst_p[3] |= pack_right_shift_u16(src_p->filter_cfg_max_vx_depart, 8u, 0x0fu);
        dst_p[4] |= pack_left_shift_u16(src_p->filter_cfg_max_vx_depart, 0u, 0xffu);
        break;

    case 15:
        break;

    default:
        break;
    }

    return (5);
}

int ars408_63_filter_cfg_unpack(
    struct ars408_63_filter_cfg_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
    if (size < 5u) {
        return (-EINVAL);
    }

    memset(dst_p, 0, sizeof(*dst_p));

    dst_p->filter_cfg_type |= unpack_right_shift_u8(src_p[0], 7u, 0x80u);
    dst_p->filter_cfg_index |= unpack_right_shift_u8(src_p[0], 3u, 0x78u);
    dst_p->filter_cfg_active |= unpack_right_shift_u8(src_p[0], 2u, 0x04u);
    dst_p->filter_cfg_valid |= unpack_right_shift_u8(src_p[0], 1u, 0x02u);

    switch (dst_p->filter_cfg_index) {

    case 0:
        dst_p->filter_cfg_min_nof_obj |= unpack_left_shift_u16(src_p[1], 8u, 0x0fu);
        dst_p->filter_cfg_min_nof_obj |= unpack_right_shift_u16(src_p[2], 0u, 0xffu);
        dst_p->filter_cfg_max_nof_obj |= unpack_left_shift_u16(src_p[3], 8u, 0x0fu);
        dst_p->filter_cfg_max_nof_obj |= unpack_right_shift_u16(src_p[4], 0u, 0xffu);
        break;

    case 1:
        dst_p->filter_cfg_min_distance |= unpack_left_shift_u16(src_p[1], 8u, 0x0fu);
        dst_p->filter_cfg_min_distance |= unpack_right_shift_u16(src_p[2], 0u, 0xffu);
        dst_p->filter_cfg_max_distance |= unpack_left_shift_u16(src_p[3], 8u, 0x0fu);
        dst_p->filter_cfg_max_distance |= unpack_right_shift_u16(src_p[4], 0u, 0xffu);
        break;

    case 2:
        dst_p->filter_cfg_min_azimuth |= unpack_left_shift_u16(src_p[1], 8u, 0x0fu);
        dst_p->filter_cfg_min_azimuth |= unpack_right_shift_u16(src_p[2], 0u, 0xffu);
        dst_p->filter_cfg_max_azimuth |= unpack_left_shift_u16(src_p[3], 8u, 0x0fu);
        dst_p->filter_cfg_max_azimuth |= unpack_right_shift_u16(src_p[4], 0u, 0xffu);
        break;

    case 3:
        dst_p->filter_cfg_min_vrel_oncome |= unpack_left_shift_u16(src_p[1], 8u, 0x0fu);
        dst_p->filter_cfg_min_vrel_oncome |= unpack_right_shift_u16(src_p[2], 0u, 0xffu);
        dst_p->filter_cfg_max_vrel_oncome |= unpack_left_shift_u16(src_p[3], 8u, 0x0fu);
        dst_p->filter_cfg_max_vrel_oncome |= unpack_right_shift_u16(src_p[4], 0u, 0xffu);
        break;

    case 4:
        dst_p->filter_cfg_min_vrel_depart |= unpack_left_shift_u16(src_p[1], 8u, 0x0fu);
        dst_p->filter_cfg_min_vrel_depart |= unpack_right_shift_u16(src_p[2], 0u, 0xffu);
        dst_p->filter_cfg_max_vrel_depart |= unpack_left_shift_u16(src_p[3], 8u, 0x0fu);
        dst_p->filter_cfg_max_vrel_depart |= unpack_right_shift_u16(src_p[4], 0u, 0xffu);
        break;

    case 5:
        dst_p->filter_cfg_min_rcs |= unpack_left_shift_u16(src_p[1], 8u, 0x0fu);
        dst_p->filter_cfg_min_rcs |= unpack_right_shift_u16(src_p[2], 0u, 0xffu);
        dst_p->filter_cfg_max_rcs |= unpack_left_shift_u16(src_p[3], 8u, 0x0fu);
        dst_p->filter_cfg_max_rcs |= unpack_right_shift_u16(src_p[4], 0u, 0xffu);
        break;

    case 6:
        dst_p->filter_cfg_min_lifetime |= unpack_left_shift_u16(src_p[1], 8u, 0x0fu);
        dst_p->filter_cfg_min_lifetime |= unpack_right_shift_u16(src_p[2], 0u, 0xffu);
        dst_p->filter_cfg_max_lifetime |= unpack_left_shift_u16(src_p[3], 8u, 0x0fu);
        dst_p->filter_cfg_max_lifetime |= unpack_right_shift_u16(src_p[4], 0u, 0xffu);
        break;

    case 7:
        dst_p->filter_cfg_min_size |= unpack_left_shift_u16(src_p[1], 8u, 0x0fu);
        dst_p->filter_cfg_min_size |= unpack_right_shift_u16(src_p[2], 0u, 0xffu);
        dst_p->filter_cfg_max_size |= unpack_left_shift_u16(src_p[3], 8u, 0x0fu);
        dst_p->filter_cfg_max_size |= unpack_right_shift_u16(src_p[4], 0u, 0xffu);
        break;

    case 8:
        dst_p->filter_cfg_min_prob_exists |= unpack_left_shift_u16(src_p[1], 8u, 0x0fu);
        dst_p->filter_cfg_min_prob_exists |= unpack_right_shift_u16(src_p[2], 0u, 0xffu);
        dst_p->filter_cfg_max_prob_exists |= unpack_left_shift_u16(src_p[3], 8u, 0x0fu);
        dst_p->filter_cfg_max_prob_exists |= unpack_right_shift_u16(src_p[4], 0u, 0xffu);
        break;

    case 9:
        dst_p->filter_cfg_min_y |= unpack_left_shift_u16(src_p[1], 8u, 0x0fu);
        dst_p->filter_cfg_min_y |= unpack_right_shift_u16(src_p[2], 0u, 0xffu);
        dst_p->filter_cfg_max_y |= unpack_left_shift_u16(src_p[3], 8u, 0x0fu);
        dst_p->filter_cfg_max_y |= unpack_right_shift_u16(src_p[4], 0u, 0xffu);
        break;

    case 10:
        dst_p->filter_cfg_min_x |= unpack_left_shift_u16(src_p[1], 8u, 0x1fu);
        dst_p->filter_cfg_min_x |= unpack_right_shift_u16(src_p[2], 0u, 0xffu);
        dst_p->filter_cfg_max_x |= unpack_left_shift_u16(src_p[3], 8u, 0x1fu);
        dst_p->filter_cfg_max_x |= unpack_right_shift_u16(src_p[4], 0u, 0xffu);
        break;

    case 11:
        dst_p->filter_cfg_min_vy_left_right |= unpack_left_shift_u16(src_p[1], 8u, 0x0fu);
        dst_p->filter_cfg_min_vy_left_right |= unpack_right_shift_u16(src_p[2], 0u, 0xffu);
        dst_p->filter_cfg_max_vy_left_right |= unpack_left_shift_u16(src_p[3], 8u, 0x0fu);
        dst_p->filter_cfg_max_vy_left_right |= unpack_right_shift_u16(src_p[4], 0u, 0xffu);
        break;

    case 12:
        dst_p->filter_cfg_min_vx_oncome |= unpack_left_shift_u16(src_p[1], 8u, 0x0fu);
        dst_p->filter_cfg_min_vx_oncome |= unpack_right_shift_u16(src_p[2], 0u, 0xffu);
        dst_p->filter_cfg_max_vx_oncome |= unpack_left_shift_u16(src_p[3], 8u, 0x0fu);
        dst_p->filter_cfg_max_vx_oncome |= unpack_right_shift_u16(src_p[4], 0u, 0xffu);
        break;

    case 13:
        dst_p->filter_cfg_min_vy_right_left |= unpack_left_shift_u16(src_p[1], 8u, 0x0fu);
        dst_p->filter_cfg_min_vy_right_left |= unpack_right_shift_u16(src_p[2], 0u, 0xffu);
        dst_p->filter_cfg_max_vy_right_left |= unpack_left_shift_u16(src_p[3], 8u, 0x0fu);
        dst_p->filter_cfg_max_vy_right_left |= unpack_right_shift_u16(src_p[4], 0u, 0xffu);
        break;

    case 14:
        dst_p->filter_cfg_min_vx_depart |= unpack_left_shift_u16(src_p[1], 8u, 0x0fu);
        dst_p->filter_cfg_min_vx_depart |= unpack_right_shift_u16(src_p[2], 0u, 0xffu);
        dst_p->filter_cfg_max_vx_depart |= unpack_left_shift_u16(src_p[3], 8u, 0x0fu);
        dst_p->filter_cfg_max_vx_depart |= unpack_right_shift_u16(src_p[4], 0u, 0xffu);
        break;

    case 15:
        break;

    default:
        break;
    }

    return (0);
}

uint8_t ars408_63_filter_cfg_filter_cfg_type_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_filter_cfg_filter_cfg_type_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_filter_cfg_filter_cfg_type_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t ars408_63_filter_cfg_filter_cfg_index_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_filter_cfg_filter_cfg_index_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_filter_cfg_filter_cfg_index_is_in_range(uint8_t value)
{
    return (value <= 15u);
}

uint8_t ars408_63_filter_cfg_filter_cfg_active_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_filter_cfg_filter_cfg_active_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_filter_cfg_filter_cfg_active_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t ars408_63_filter_cfg_filter_cfg_valid_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_filter_cfg_filter_cfg_valid_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_filter_cfg_filter_cfg_valid_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint16_t ars408_63_filter_cfg_filter_cfg_min_x_encode(double value)
{
    return (uint16_t)((value - -500.0) / 0.2);
}

double ars408_63_filter_cfg_filter_cfg_min_x_decode(uint16_t value)
{
    return (((double)value * 0.2) + -500.0);
}

bool ars408_63_filter_cfg_filter_cfg_min_x_is_in_range(uint16_t value)
{
    return (value <= 8191u);
}

uint16_t ars408_63_filter_cfg_filter_cfg_min_y_encode(double value)
{
    return (uint16_t)((value - -409.5) / 0.2);
}

double ars408_63_filter_cfg_filter_cfg_min_y_decode(uint16_t value)
{
    return (((double)value * 0.2) + -409.5);
}

bool ars408_63_filter_cfg_filter_cfg_min_y_is_in_range(uint16_t value)
{
    return (value <= 4095u);
}

uint16_t ars408_63_filter_cfg_filter_cfg_min_vy_right_left_encode(double value)
{
    return (uint16_t)(value / 0.0315);
}

double ars408_63_filter_cfg_filter_cfg_min_vy_right_left_decode(uint16_t value)
{
    return ((double)value * 0.0315);
}

bool ars408_63_filter_cfg_filter_cfg_min_vy_right_left_is_in_range(uint16_t value)
{
    return (value <= 4095u);
}

uint16_t ars408_63_filter_cfg_filter_cfg_min_vy_left_right_encode(double value)
{
    return (uint16_t)(value / 0.0315);
}

double ars408_63_filter_cfg_filter_cfg_min_vy_left_right_decode(uint16_t value)
{
    return ((double)value * 0.0315);
}

bool ars408_63_filter_cfg_filter_cfg_min_vy_left_right_is_in_range(uint16_t value)
{
    return (value <= 4095u);
}

uint16_t ars408_63_filter_cfg_filter_cfg_min_vx_oncome_encode(double value)
{
    return (uint16_t)(value / 0.0315);
}

double ars408_63_filter_cfg_filter_cfg_min_vx_oncome_decode(uint16_t value)
{
    return ((double)value * 0.0315);
}

bool ars408_63_filter_cfg_filter_cfg_min_vx_oncome_is_in_range(uint16_t value)
{
    return (value <= 4095u);
}

uint16_t ars408_63_filter_cfg_filter_cfg_min_vx_depart_encode(double value)
{
    return (uint16_t)(value / 0.0315);
}

double ars408_63_filter_cfg_filter_cfg_min_vx_depart_decode(uint16_t value)
{
    return ((double)value * 0.0315);
}

bool ars408_63_filter_cfg_filter_cfg_min_vx_depart_is_in_range(uint16_t value)
{
    return (value <= 4095u);
}

uint16_t ars408_63_filter_cfg_filter_cfg_min_vrel_oncome_encode(double value)
{
    return (uint16_t)(value / 0.0315);
}

double ars408_63_filter_cfg_filter_cfg_min_vrel_oncome_decode(uint16_t value)
{
    return ((double)value * 0.0315);
}

bool ars408_63_filter_cfg_filter_cfg_min_vrel_oncome_is_in_range(uint16_t value)
{
    return (value <= 4095u);
}

uint16_t ars408_63_filter_cfg_filter_cfg_min_vrel_depart_encode(double value)
{
    return (uint16_t)(value / 0.0315);
}

double ars408_63_filter_cfg_filter_cfg_min_vrel_depart_decode(uint16_t value)
{
    return ((double)value * 0.0315);
}

bool ars408_63_filter_cfg_filter_cfg_min_vrel_depart_is_in_range(uint16_t value)
{
    return (value <= 4095u);
}

uint16_t ars408_63_filter_cfg_filter_cfg_min_size_encode(double value)
{
    return (uint16_t)(value / 0.025);
}

double ars408_63_filter_cfg_filter_cfg_min_size_decode(uint16_t value)
{
    return ((double)value * 0.025);
}

bool ars408_63_filter_cfg_filter_cfg_min_size_is_in_range(uint16_t value)
{
    return (value <= 4095u);
}

uint16_t ars408_63_filter_cfg_filter_cfg_min_rcs_encode(double value)
{
    return (uint16_t)((value - -50.0) / 0.025);
}

double ars408_63_filter_cfg_filter_cfg_min_rcs_decode(uint16_t value)
{
    return (((double)value * 0.025) + -50.0);
}

bool ars408_63_filter_cfg_filter_cfg_min_rcs_is_in_range(uint16_t value)
{
    return (value <= 4095u);
}

uint16_t ars408_63_filter_cfg_filter_cfg_min_prob_exists_encode(double value)
{
    return (uint16_t)(value);
}

double ars408_63_filter_cfg_filter_cfg_min_prob_exists_decode(uint16_t value)
{
    return ((double)value);
}

bool ars408_63_filter_cfg_filter_cfg_min_prob_exists_is_in_range(uint16_t value)
{
    return (value <= 4095u);
}

uint16_t ars408_63_filter_cfg_filter_cfg_min_lifetime_encode(double value)
{
    return (uint16_t)(value / 0.1);
}

double ars408_63_filter_cfg_filter_cfg_min_lifetime_decode(uint16_t value)
{
    return ((double)value * 0.1);
}

bool ars408_63_filter_cfg_filter_cfg_min_lifetime_is_in_range(uint16_t value)
{
    return (value <= 4095u);
}

uint16_t ars408_63_filter_cfg_filter_cfg_min_azimuth_encode(double value)
{
    return (uint16_t)((value - -50.0) / 0.025);
}

double ars408_63_filter_cfg_filter_cfg_min_azimuth_decode(uint16_t value)
{
    return (((double)value * 0.025) + -50.0);
}

bool ars408_63_filter_cfg_filter_cfg_min_azimuth_is_in_range(uint16_t value)
{
    return (value <= 4095u);
}

uint16_t ars408_63_filter_cfg_filter_cfg_min_nof_obj_encode(double value)
{
    return (uint16_t)(value);
}

double ars408_63_filter_cfg_filter_cfg_min_nof_obj_decode(uint16_t value)
{
    return ((double)value);
}

bool ars408_63_filter_cfg_filter_cfg_min_nof_obj_is_in_range(uint16_t value)
{
    return (value <= 4095u);
}

uint16_t ars408_63_filter_cfg_filter_cfg_min_distance_encode(double value)
{
    return (uint16_t)(value / 0.1);
}

double ars408_63_filter_cfg_filter_cfg_min_distance_decode(uint16_t value)
{
    return ((double)value * 0.1);
}

bool ars408_63_filter_cfg_filter_cfg_min_distance_is_in_range(uint16_t value)
{
    return (value <= 4095u);
}

uint16_t ars408_63_filter_cfg_filter_cfg_max_x_encode(double value)
{
    return (uint16_t)((value - -500.0) / 0.2);
}

double ars408_63_filter_cfg_filter_cfg_max_x_decode(uint16_t value)
{
    return (((double)value * 0.2) + -500.0);
}

bool ars408_63_filter_cfg_filter_cfg_max_x_is_in_range(uint16_t value)
{
    return (value <= 8191u);
}

uint16_t ars408_63_filter_cfg_filter_cfg_max_y_encode(double value)
{
    return (uint16_t)((value - -409.5) / 0.2);
}

double ars408_63_filter_cfg_filter_cfg_max_y_decode(uint16_t value)
{
    return (((double)value * 0.2) + -409.5);
}

bool ars408_63_filter_cfg_filter_cfg_max_y_is_in_range(uint16_t value)
{
    return (value <= 4095u);
}

uint16_t ars408_63_filter_cfg_filter_cfg_max_vy_right_left_encode(double value)
{
    return (uint16_t)(value / 0.0315);
}

double ars408_63_filter_cfg_filter_cfg_max_vy_right_left_decode(uint16_t value)
{
    return ((double)value * 0.0315);
}

bool ars408_63_filter_cfg_filter_cfg_max_vy_right_left_is_in_range(uint16_t value)
{
    return (value <= 4095u);
}

uint16_t ars408_63_filter_cfg_filter_cfg_max_vx_oncome_encode(double value)
{
    return (uint16_t)(value / 0.0315);
}

double ars408_63_filter_cfg_filter_cfg_max_vx_oncome_decode(uint16_t value)
{
    return ((double)value * 0.0315);
}

bool ars408_63_filter_cfg_filter_cfg_max_vx_oncome_is_in_range(uint16_t value)
{
    return (value <= 4095u);
}

uint16_t ars408_63_filter_cfg_filter_cfg_max_vy_left_right_encode(double value)
{
    return (uint16_t)(value / 0.0315);
}

double ars408_63_filter_cfg_filter_cfg_max_vy_left_right_decode(uint16_t value)
{
    return ((double)value * 0.0315);
}

bool ars408_63_filter_cfg_filter_cfg_max_vy_left_right_is_in_range(uint16_t value)
{
    return (value <= 4095u);
}

uint16_t ars408_63_filter_cfg_filter_cfg_max_vx_depart_encode(double value)
{
    return (uint16_t)(value / 0.0315);
}

double ars408_63_filter_cfg_filter_cfg_max_vx_depart_decode(uint16_t value)
{
    return ((double)value * 0.0315);
}

bool ars408_63_filter_cfg_filter_cfg_max_vx_depart_is_in_range(uint16_t value)
{
    return (value <= 4095u);
}

uint16_t ars408_63_filter_cfg_filter_cfg_max_vrel_oncome_encode(double value)
{
    return (uint16_t)(value / 0.0315);
}

double ars408_63_filter_cfg_filter_cfg_max_vrel_oncome_decode(uint16_t value)
{
    return ((double)value * 0.0315);
}

bool ars408_63_filter_cfg_filter_cfg_max_vrel_oncome_is_in_range(uint16_t value)
{
    return (value <= 4095u);
}

uint16_t ars408_63_filter_cfg_filter_cfg_max_vrel_depart_encode(double value)
{
    return (uint16_t)(value / 0.0315);
}

double ars408_63_filter_cfg_filter_cfg_max_vrel_depart_decode(uint16_t value)
{
    return ((double)value * 0.0315);
}

bool ars408_63_filter_cfg_filter_cfg_max_vrel_depart_is_in_range(uint16_t value)
{
    return (value <= 4095u);
}

uint16_t ars408_63_filter_cfg_filter_cfg_max_size_encode(double value)
{
    return (uint16_t)(value / 0.025);
}

double ars408_63_filter_cfg_filter_cfg_max_size_decode(uint16_t value)
{
    return ((double)value * 0.025);
}

bool ars408_63_filter_cfg_filter_cfg_max_size_is_in_range(uint16_t value)
{
    return (value <= 4095u);
}

uint16_t ars408_63_filter_cfg_filter_cfg_max_rcs_encode(double value)
{
    return (uint16_t)((value - -50.0) / 0.025);
}

double ars408_63_filter_cfg_filter_cfg_max_rcs_decode(uint16_t value)
{
    return (((double)value * 0.025) + -50.0);
}

bool ars408_63_filter_cfg_filter_cfg_max_rcs_is_in_range(uint16_t value)
{
    return (value <= 4095u);
}

uint16_t ars408_63_filter_cfg_filter_cfg_max_prob_exists_encode(double value)
{
    return (uint16_t)(value);
}

double ars408_63_filter_cfg_filter_cfg_max_prob_exists_decode(uint16_t value)
{
    return ((double)value);
}

bool ars408_63_filter_cfg_filter_cfg_max_prob_exists_is_in_range(uint16_t value)
{
    return (value <= 7u);
}

uint16_t ars408_63_filter_cfg_filter_cfg_max_nof_obj_encode(double value)
{
    return (uint16_t)(value);
}

double ars408_63_filter_cfg_filter_cfg_max_nof_obj_decode(uint16_t value)
{
    return ((double)value);
}

bool ars408_63_filter_cfg_filter_cfg_max_nof_obj_is_in_range(uint16_t value)
{
    return (value <= 4095u);
}

uint16_t ars408_63_filter_cfg_filter_cfg_max_lifetime_encode(double value)
{
    return (uint16_t)(value / 0.1);
}

double ars408_63_filter_cfg_filter_cfg_max_lifetime_decode(uint16_t value)
{
    return ((double)value * 0.1);
}

bool ars408_63_filter_cfg_filter_cfg_max_lifetime_is_in_range(uint16_t value)
{
    return (value <= 4095u);
}

uint16_t ars408_63_filter_cfg_filter_cfg_max_distance_encode(double value)
{
    return (uint16_t)(value / 0.1);
}

double ars408_63_filter_cfg_filter_cfg_max_distance_decode(uint16_t value)
{
    return ((double)value * 0.1);
}

bool ars408_63_filter_cfg_filter_cfg_max_distance_is_in_range(uint16_t value)
{
    return (value <= 4095u);
}

uint16_t ars408_63_filter_cfg_filter_cfg_max_azimuth_encode(double value)
{
    return (uint16_t)((value - -50.0) / 0.025);
}

double ars408_63_filter_cfg_filter_cfg_max_azimuth_decode(uint16_t value)
{
    return (((double)value * 0.025) + -50.0);
}

bool ars408_63_filter_cfg_filter_cfg_max_azimuth_is_in_range(uint16_t value)
{
    return (value <= 4095u);
}

int ars408_63_radar_configuration_pack(
    uint8_t *dst_p,
    const struct ars408_63_radar_configuration_t *src_p,
    size_t size)
{
    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    dst_p[0] |= pack_left_shift_u8(src_p->radar_cfg_store_in_nvm_valid, 7u, 0x80u);
    dst_p[0] |= pack_left_shift_u8(src_p->radar_cfg_sort_index_valid, 6u, 0x40u);
    dst_p[0] |= pack_left_shift_u8(src_p->radar_cfg_send_ext_info_valid, 5u, 0x20u);
    dst_p[0] |= pack_left_shift_u8(src_p->radar_cfg_send_quality_valid, 4u, 0x10u);
    dst_p[0] |= pack_left_shift_u8(src_p->radar_cfg_output_type_valid, 3u, 0x08u);
    dst_p[0] |= pack_left_shift_u8(src_p->radar_cfg_radar_power_valid, 2u, 0x04u);
    dst_p[0] |= pack_left_shift_u8(src_p->radar_cfg_sensor_id_valid, 1u, 0x02u);
    dst_p[0] |= pack_left_shift_u8(src_p->radar_cfg_max_distance_valid, 0u, 0x01u);
    dst_p[1] |= pack_right_shift_u16(src_p->radar_cfg_max_distance, 2u, 0xffu);
    dst_p[2] |= pack_left_shift_u16(src_p->radar_cfg_max_distance, 6u, 0xc0u);
    dst_p[4] |= pack_left_shift_u8(src_p->radar_cfg_radar_power, 5u, 0xe0u);
    dst_p[4] |= pack_left_shift_u8(src_p->radar_cfg_output_type, 3u, 0x18u);
    dst_p[4] |= pack_left_shift_u8(src_p->radar_cfg_sensor_id, 0u, 0x07u);
    dst_p[5] |= pack_left_shift_u8(src_p->radar_cfg_store_in_nvm, 7u, 0x80u);
    dst_p[5] |= pack_left_shift_u8(src_p->radar_cfg_sort_index, 4u, 0x70u);
    dst_p[5] |= pack_left_shift_u8(src_p->radar_cfg_send_ext_info, 3u, 0x08u);
    dst_p[5] |= pack_left_shift_u8(src_p->radar_cfg_send_quality, 2u, 0x04u);
    dst_p[5] |= pack_left_shift_u8(src_p->radar_cfg_ctrl_relay, 1u, 0x02u);
    dst_p[5] |= pack_left_shift_u8(src_p->radar_cfg_ctrl_relay_valid, 0u, 0x01u);
    dst_p[6] |= pack_left_shift_u8(src_p->radar_cfg_rcs_threshold, 1u, 0x0eu);
    dst_p[6] |= pack_left_shift_u8(src_p->radar_cfg_rcs_threshold_valid, 0u, 0x01u);

    return (8);
}

int ars408_63_radar_configuration_unpack(
    struct ars408_63_radar_configuration_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
    if (size < 8u) {
        return (-EINVAL);
    }

    memset(dst_p, 0, sizeof(*dst_p));

    dst_p->radar_cfg_store_in_nvm_valid |= unpack_right_shift_u8(src_p[0], 7u, 0x80u);
    dst_p->radar_cfg_sort_index_valid |= unpack_right_shift_u8(src_p[0], 6u, 0x40u);
    dst_p->radar_cfg_send_ext_info_valid |= unpack_right_shift_u8(src_p[0], 5u, 0x20u);
    dst_p->radar_cfg_send_quality_valid |= unpack_right_shift_u8(src_p[0], 4u, 0x10u);
    dst_p->radar_cfg_output_type_valid |= unpack_right_shift_u8(src_p[0], 3u, 0x08u);
    dst_p->radar_cfg_radar_power_valid |= unpack_right_shift_u8(src_p[0], 2u, 0x04u);
    dst_p->radar_cfg_sensor_id_valid |= unpack_right_shift_u8(src_p[0], 1u, 0x02u);
    dst_p->radar_cfg_max_distance_valid |= unpack_right_shift_u8(src_p[0], 0u, 0x01u);
    dst_p->radar_cfg_max_distance |= unpack_left_shift_u16(src_p[1], 2u, 0xffu);
    dst_p->radar_cfg_max_distance |= unpack_right_shift_u16(src_p[2], 6u, 0xc0u);
    dst_p->radar_cfg_radar_power |= unpack_right_shift_u8(src_p[4], 5u, 0xe0u);
    dst_p->radar_cfg_output_type |= unpack_right_shift_u8(src_p[4], 3u, 0x18u);
    dst_p->radar_cfg_sensor_id |= unpack_right_shift_u8(src_p[4], 0u, 0x07u);
    dst_p->radar_cfg_store_in_nvm |= unpack_right_shift_u8(src_p[5], 7u, 0x80u);
    dst_p->radar_cfg_sort_index |= unpack_right_shift_u8(src_p[5], 4u, 0x70u);
    dst_p->radar_cfg_send_ext_info |= unpack_right_shift_u8(src_p[5], 3u, 0x08u);
    dst_p->radar_cfg_send_quality |= unpack_right_shift_u8(src_p[5], 2u, 0x04u);
    dst_p->radar_cfg_ctrl_relay |= unpack_right_shift_u8(src_p[5], 1u, 0x02u);
    dst_p->radar_cfg_ctrl_relay_valid |= unpack_right_shift_u8(src_p[5], 0u, 0x01u);
    dst_p->radar_cfg_rcs_threshold |= unpack_right_shift_u8(src_p[6], 1u, 0x0eu);
    dst_p->radar_cfg_rcs_threshold_valid |= unpack_right_shift_u8(src_p[6], 0u, 0x01u);

    return (0);
}

uint8_t ars408_63_radar_configuration_radar_cfg_store_in_nvm_valid_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_radar_configuration_radar_cfg_store_in_nvm_valid_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_radar_configuration_radar_cfg_store_in_nvm_valid_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t ars408_63_radar_configuration_radar_cfg_sort_index_valid_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_radar_configuration_radar_cfg_sort_index_valid_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_radar_configuration_radar_cfg_sort_index_valid_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t ars408_63_radar_configuration_radar_cfg_send_ext_info_valid_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_radar_configuration_radar_cfg_send_ext_info_valid_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_radar_configuration_radar_cfg_send_ext_info_valid_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t ars408_63_radar_configuration_radar_cfg_send_quality_valid_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_radar_configuration_radar_cfg_send_quality_valid_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_radar_configuration_radar_cfg_send_quality_valid_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t ars408_63_radar_configuration_radar_cfg_output_type_valid_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_radar_configuration_radar_cfg_output_type_valid_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_radar_configuration_radar_cfg_output_type_valid_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t ars408_63_radar_configuration_radar_cfg_radar_power_valid_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_radar_configuration_radar_cfg_radar_power_valid_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_radar_configuration_radar_cfg_radar_power_valid_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t ars408_63_radar_configuration_radar_cfg_sensor_id_valid_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_radar_configuration_radar_cfg_sensor_id_valid_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_radar_configuration_radar_cfg_sensor_id_valid_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t ars408_63_radar_configuration_radar_cfg_max_distance_valid_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_radar_configuration_radar_cfg_max_distance_valid_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_radar_configuration_radar_cfg_max_distance_valid_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint16_t ars408_63_radar_configuration_radar_cfg_max_distance_encode(double value)
{
    return (uint16_t)(value / 2.0);
}

double ars408_63_radar_configuration_radar_cfg_max_distance_decode(uint16_t value)
{
    return ((double)value * 2.0);
}

bool ars408_63_radar_configuration_radar_cfg_max_distance_is_in_range(uint16_t value)
{
    return (value <= 1023u);
}

uint8_t ars408_63_radar_configuration_radar_cfg_radar_power_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_radar_configuration_radar_cfg_radar_power_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_radar_configuration_radar_cfg_radar_power_is_in_range(uint8_t value)
{
    return (value <= 7u);
}

uint8_t ars408_63_radar_configuration_radar_cfg_output_type_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_radar_configuration_radar_cfg_output_type_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_radar_configuration_radar_cfg_output_type_is_in_range(uint8_t value)
{
    return (value <= 2u);
}

uint8_t ars408_63_radar_configuration_radar_cfg_sensor_id_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_radar_configuration_radar_cfg_sensor_id_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_radar_configuration_radar_cfg_sensor_id_is_in_range(uint8_t value)
{
    return (value <= 7u);
}

uint8_t ars408_63_radar_configuration_radar_cfg_store_in_nvm_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_radar_configuration_radar_cfg_store_in_nvm_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_radar_configuration_radar_cfg_store_in_nvm_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t ars408_63_radar_configuration_radar_cfg_sort_index_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_radar_configuration_radar_cfg_sort_index_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_radar_configuration_radar_cfg_sort_index_is_in_range(uint8_t value)
{
    return (value <= 7u);
}

uint8_t ars408_63_radar_configuration_radar_cfg_send_ext_info_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_radar_configuration_radar_cfg_send_ext_info_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_radar_configuration_radar_cfg_send_ext_info_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t ars408_63_radar_configuration_radar_cfg_send_quality_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_radar_configuration_radar_cfg_send_quality_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_radar_configuration_radar_cfg_send_quality_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t ars408_63_radar_configuration_radar_cfg_ctrl_relay_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_radar_configuration_radar_cfg_ctrl_relay_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_radar_configuration_radar_cfg_ctrl_relay_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t ars408_63_radar_configuration_radar_cfg_ctrl_relay_valid_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_radar_configuration_radar_cfg_ctrl_relay_valid_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_radar_configuration_radar_cfg_ctrl_relay_valid_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t ars408_63_radar_configuration_radar_cfg_rcs_threshold_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_radar_configuration_radar_cfg_rcs_threshold_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_radar_configuration_radar_cfg_rcs_threshold_is_in_range(uint8_t value)
{
    return (value <= 7u);
}

uint8_t ars408_63_radar_configuration_radar_cfg_rcs_threshold_valid_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_radar_configuration_radar_cfg_rcs_threshold_valid_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_radar_configuration_radar_cfg_rcs_threshold_valid_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

int ars408_63_radar_state_pack(
    uint8_t *dst_p,
    const struct ars408_63_radar_state_t *src_p,
    size_t size)
{
    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    dst_p[0] |= pack_left_shift_u8(src_p->radar_state_nv_mwrite_status, 7u, 0x80u);
    dst_p[0] |= pack_left_shift_u8(src_p->radar_state_nvm_read_status, 6u, 0x40u);
    dst_p[1] |= pack_right_shift_u16(src_p->radar_state_max_distance_cfg, 2u, 0xffu);
    dst_p[2] |= pack_left_shift_u16(src_p->radar_state_max_distance_cfg, 6u, 0xc0u);
    dst_p[2] |= pack_left_shift_u8(src_p->radar_state_persistent_error, 5u, 0x20u);
    dst_p[2] |= pack_left_shift_u8(src_p->radar_state_interference, 4u, 0x10u);
    dst_p[2] |= pack_left_shift_u8(src_p->radar_state_temperature_error, 3u, 0x08u);
    dst_p[2] |= pack_left_shift_u8(src_p->radar_state_temporary_error, 2u, 0x04u);
    dst_p[2] |= pack_left_shift_u8(src_p->radar_state_voltage_error, 1u, 0x02u);
    dst_p[3] |= pack_right_shift_u8(src_p->radar_state_radar_power_cfg, 1u, 0x03u);
    dst_p[4] |= pack_left_shift_u8(src_p->radar_state_radar_power_cfg, 7u, 0x80u);
    dst_p[4] |= pack_left_shift_u8(src_p->radar_state_sort_index, 4u, 0x70u);
    dst_p[4] |= pack_left_shift_u8(src_p->radar_state_sensor_id, 0u, 0x07u);
    dst_p[5] |= pack_left_shift_u8(src_p->radar_state_motion_rx_state, 6u, 0xc0u);
    dst_p[5] |= pack_left_shift_u8(src_p->radar_state_send_ext_info_cfg, 5u, 0x20u);
    dst_p[5] |= pack_left_shift_u8(src_p->radar_state_send_quality_cfg, 4u, 0x10u);
    dst_p[5] |= pack_left_shift_u8(src_p->radar_state_output_type_cfg, 2u, 0x0cu);
    dst_p[5] |= pack_left_shift_u8(src_p->radar_state_ctrl_relay_cfg, 1u, 0x02u);
    dst_p[7] |= pack_left_shift_u8(src_p->radar_state_rcs_threshold, 2u, 0x1cu);

    return (8);
}

int ars408_63_radar_state_unpack(
    struct ars408_63_radar_state_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
    if (size < 8u) {
        return (-EINVAL);
    }

    memset(dst_p, 0, sizeof(*dst_p));

    dst_p->radar_state_nv_mwrite_status |= unpack_right_shift_u8(src_p[0], 7u, 0x80u);
    dst_p->radar_state_nvm_read_status |= unpack_right_shift_u8(src_p[0], 6u, 0x40u);
    dst_p->radar_state_max_distance_cfg |= unpack_left_shift_u16(src_p[1], 2u, 0xffu);
    dst_p->radar_state_max_distance_cfg |= unpack_right_shift_u16(src_p[2], 6u, 0xc0u);
    dst_p->radar_state_persistent_error |= unpack_right_shift_u8(src_p[2], 5u, 0x20u);
    dst_p->radar_state_interference |= unpack_right_shift_u8(src_p[2], 4u, 0x10u);
    dst_p->radar_state_temperature_error |= unpack_right_shift_u8(src_p[2], 3u, 0x08u);
    dst_p->radar_state_temporary_error |= unpack_right_shift_u8(src_p[2], 2u, 0x04u);
    dst_p->radar_state_voltage_error |= unpack_right_shift_u8(src_p[2], 1u, 0x02u);
    dst_p->radar_state_radar_power_cfg |= unpack_left_shift_u8(src_p[3], 1u, 0x03u);
    dst_p->radar_state_radar_power_cfg |= unpack_right_shift_u8(src_p[4], 7u, 0x80u);
    dst_p->radar_state_sort_index |= unpack_right_shift_u8(src_p[4], 4u, 0x70u);
    dst_p->radar_state_sensor_id |= unpack_right_shift_u8(src_p[4], 0u, 0x07u);
    dst_p->radar_state_motion_rx_state |= unpack_right_shift_u8(src_p[5], 6u, 0xc0u);
    dst_p->radar_state_send_ext_info_cfg |= unpack_right_shift_u8(src_p[5], 5u, 0x20u);
    dst_p->radar_state_send_quality_cfg |= unpack_right_shift_u8(src_p[5], 4u, 0x10u);
    dst_p->radar_state_output_type_cfg |= unpack_right_shift_u8(src_p[5], 2u, 0x0cu);
    dst_p->radar_state_ctrl_relay_cfg |= unpack_right_shift_u8(src_p[5], 1u, 0x02u);
    dst_p->radar_state_rcs_threshold |= unpack_right_shift_u8(src_p[7], 2u, 0x1cu);

    return (0);
}

uint8_t ars408_63_radar_state_radar_state_nv_mwrite_status_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_radar_state_radar_state_nv_mwrite_status_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_radar_state_radar_state_nv_mwrite_status_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t ars408_63_radar_state_radar_state_nvm_read_status_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_radar_state_radar_state_nvm_read_status_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_radar_state_radar_state_nvm_read_status_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint16_t ars408_63_radar_state_radar_state_max_distance_cfg_encode(double value)
{
    return (uint16_t)(value / 2.0);
}

double ars408_63_radar_state_radar_state_max_distance_cfg_decode(uint16_t value)
{
    return ((double)value * 2.0);
}

bool ars408_63_radar_state_radar_state_max_distance_cfg_is_in_range(uint16_t value)
{
    return (value <= 1023u);
}

uint8_t ars408_63_radar_state_radar_state_persistent_error_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_radar_state_radar_state_persistent_error_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_radar_state_radar_state_persistent_error_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t ars408_63_radar_state_radar_state_interference_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_radar_state_radar_state_interference_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_radar_state_radar_state_interference_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t ars408_63_radar_state_radar_state_temperature_error_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_radar_state_radar_state_temperature_error_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_radar_state_radar_state_temperature_error_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t ars408_63_radar_state_radar_state_temporary_error_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_radar_state_radar_state_temporary_error_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_radar_state_radar_state_temporary_error_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t ars408_63_radar_state_radar_state_voltage_error_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_radar_state_radar_state_voltage_error_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_radar_state_radar_state_voltage_error_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t ars408_63_radar_state_radar_state_radar_power_cfg_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_radar_state_radar_state_radar_power_cfg_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_radar_state_radar_state_radar_power_cfg_is_in_range(uint8_t value)
{
    return (value <= 7u);
}

uint8_t ars408_63_radar_state_radar_state_sort_index_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_radar_state_radar_state_sort_index_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_radar_state_radar_state_sort_index_is_in_range(uint8_t value)
{
    return (value <= 7u);
}

uint8_t ars408_63_radar_state_radar_state_sensor_id_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_radar_state_radar_state_sensor_id_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_radar_state_radar_state_sensor_id_is_in_range(uint8_t value)
{
    return (value <= 7u);
}

uint8_t ars408_63_radar_state_radar_state_motion_rx_state_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_radar_state_radar_state_motion_rx_state_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_radar_state_radar_state_motion_rx_state_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t ars408_63_radar_state_radar_state_send_ext_info_cfg_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_radar_state_radar_state_send_ext_info_cfg_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_radar_state_radar_state_send_ext_info_cfg_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t ars408_63_radar_state_radar_state_send_quality_cfg_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_radar_state_radar_state_send_quality_cfg_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_radar_state_radar_state_send_quality_cfg_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t ars408_63_radar_state_radar_state_output_type_cfg_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_radar_state_radar_state_output_type_cfg_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_radar_state_radar_state_output_type_cfg_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t ars408_63_radar_state_radar_state_ctrl_relay_cfg_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_radar_state_radar_state_ctrl_relay_cfg_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_radar_state_radar_state_ctrl_relay_cfg_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t ars408_63_radar_state_radar_state_rcs_threshold_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_radar_state_radar_state_rcs_threshold_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_radar_state_radar_state_rcs_threshold_is_in_range(uint8_t value)
{
    return (value <= 7u);
}

int ars408_63_speed_information_pack(
    uint8_t *dst_p,
    const struct ars408_63_speed_information_t *src_p,
    size_t size)
{
    if (size < 2u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 2);

    dst_p[0] |= pack_left_shift_u8(src_p->radar_device_speed_direction, 6u, 0xc0u);
    dst_p[0] |= pack_right_shift_u16(src_p->radar_device_speed, 8u, 0x1fu);
    dst_p[1] |= pack_left_shift_u16(src_p->radar_device_speed, 0u, 0xffu);

    return (2);
}

int ars408_63_speed_information_unpack(
    struct ars408_63_speed_information_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
    if (size < 2u) {
        return (-EINVAL);
    }

    memset(dst_p, 0, sizeof(*dst_p));

    dst_p->radar_device_speed_direction |= unpack_right_shift_u8(src_p[0], 6u, 0xc0u);
    dst_p->radar_device_speed |= unpack_left_shift_u16(src_p[0], 8u, 0x1fu);
    dst_p->radar_device_speed |= unpack_right_shift_u16(src_p[1], 0u, 0xffu);

    return (0);
}

uint8_t ars408_63_speed_information_radar_device_speed_direction_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_speed_information_radar_device_speed_direction_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_speed_information_radar_device_speed_direction_is_in_range(uint8_t value)
{
    return (value <= 2u);
}

uint16_t ars408_63_speed_information_radar_device_speed_encode(double value)
{
    return (uint16_t)(value / 0.02);
}

double ars408_63_speed_information_radar_device_speed_decode(uint16_t value)
{
    return ((double)value * 0.02);
}

bool ars408_63_speed_information_radar_device_speed_is_in_range(uint16_t value)
{
    return (value <= 8190u);
}

int ars408_63_yaw_rate_information_pack(
    uint8_t *dst_p,
    const struct ars408_63_yaw_rate_information_t *src_p,
    size_t size)
{
    if (size < 2u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 2);

    dst_p[0] |= pack_right_shift_u16(src_p->radar_device_yaw_rate, 8u, 0xffu);
    dst_p[1] |= pack_left_shift_u16(src_p->radar_device_yaw_rate, 0u, 0xffu);

    return (2);
}

int ars408_63_yaw_rate_information_unpack(
    struct ars408_63_yaw_rate_information_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
    if (size < 2u) {
        return (-EINVAL);
    }

    memset(dst_p, 0, sizeof(*dst_p));

    dst_p->radar_device_yaw_rate |= unpack_left_shift_u16(src_p[0], 8u, 0xffu);
    dst_p->radar_device_yaw_rate |= unpack_right_shift_u16(src_p[1], 0u, 0xffu);

    return (0);
}

uint16_t ars408_63_yaw_rate_information_radar_device_yaw_rate_encode(double value)
{
    return (uint16_t)((value - -327.68) / 0.01);
}

double ars408_63_yaw_rate_information_radar_device_yaw_rate_decode(uint16_t value)
{
    return (((double)value * 0.01) + -327.68);
}

bool ars408_63_yaw_rate_information_radar_device_yaw_rate_is_in_range(uint16_t value)
{
    return (value <= 65534u);
}

int ars408_63_coll_det_cfg_pack(
    uint8_t *dst_p,
    const struct ars408_63_coll_det_cfg_t *src_p,
    size_t size)
{
    if (size < 2u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 2);

    dst_p[0] |= pack_left_shift_u8(src_p->coll_det_cfg_clear_regions, 7u, 0x80u);
    dst_p[0] |= pack_left_shift_u8(src_p->coll_det_cfg_min_time_valid, 3u, 0x08u);
    dst_p[0] |= pack_left_shift_u8(src_p->coll_det_cfg_activate, 1u, 0x02u);
    dst_p[0] |= pack_left_shift_u8(src_p->coll_det_cfg_warning_reset, 0u, 0x01u);
    dst_p[1] |= pack_left_shift_u8(src_p->coll_det_cfg_min_detect_time, 0u, 0xffu);

    return (2);
}

int ars408_63_coll_det_cfg_unpack(
    struct ars408_63_coll_det_cfg_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
    if (size < 2u) {
        return (-EINVAL);
    }

    memset(dst_p, 0, sizeof(*dst_p));

    dst_p->coll_det_cfg_clear_regions |= unpack_right_shift_u8(src_p[0], 7u, 0x80u);
    dst_p->coll_det_cfg_min_time_valid |= unpack_right_shift_u8(src_p[0], 3u, 0x08u);
    dst_p->coll_det_cfg_activate |= unpack_right_shift_u8(src_p[0], 1u, 0x02u);
    dst_p->coll_det_cfg_warning_reset |= unpack_right_shift_u8(src_p[0], 0u, 0x01u);
    dst_p->coll_det_cfg_min_detect_time |= unpack_right_shift_u8(src_p[1], 0u, 0xffu);

    return (0);
}

uint8_t ars408_63_coll_det_cfg_coll_det_cfg_clear_regions_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_coll_det_cfg_coll_det_cfg_clear_regions_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_coll_det_cfg_coll_det_cfg_clear_regions_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t ars408_63_coll_det_cfg_coll_det_cfg_min_time_valid_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_coll_det_cfg_coll_det_cfg_min_time_valid_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_coll_det_cfg_coll_det_cfg_min_time_valid_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t ars408_63_coll_det_cfg_coll_det_cfg_activate_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_coll_det_cfg_coll_det_cfg_activate_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_coll_det_cfg_coll_det_cfg_activate_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t ars408_63_coll_det_cfg_coll_det_cfg_warning_reset_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_coll_det_cfg_coll_det_cfg_warning_reset_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_coll_det_cfg_coll_det_cfg_warning_reset_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t ars408_63_coll_det_cfg_coll_det_cfg_min_detect_time_encode(double value)
{
    return (uint8_t)(value / 0.1);
}

double ars408_63_coll_det_cfg_coll_det_cfg_min_detect_time_decode(uint8_t value)
{
    return ((double)value * 0.1);
}

bool ars408_63_coll_det_cfg_coll_det_cfg_min_detect_time_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

int ars408_63_coll_det_region_cfg_pack(
    uint8_t *dst_p,
    const struct ars408_63_coll_det_region_cfg_t *src_p,
    size_t size)
{
    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    dst_p[0] |= pack_left_shift_u8(src_p->coll_det_reg_cfg_coordinates_valid, 2u, 0x04u);
    dst_p[0] |= pack_left_shift_u8(src_p->coll_det_reg_cfg_activate, 1u, 0x02u);
    dst_p[1] |= pack_left_shift_u8(src_p->coll_det_reg_cfg_region_id, 0u, 0x07u);
    dst_p[2] |= pack_right_shift_u16(src_p->coll_det_reg_cfg_point1_x, 5u, 0xffu);
    dst_p[3] |= pack_left_shift_u16(src_p->coll_det_reg_cfg_point1_x, 3u, 0xf8u);
    dst_p[3] |= pack_right_shift_u16(src_p->coll_det_reg_cfg_point1_y, 8u, 0x07u);
    dst_p[4] |= pack_left_shift_u16(src_p->coll_det_reg_cfg_point1_y, 0u, 0xffu);
    dst_p[5] |= pack_right_shift_u16(src_p->coll_det_reg_cfg_point2_x, 5u, 0xffu);
    dst_p[6] |= pack_left_shift_u16(src_p->coll_det_reg_cfg_point2_x, 3u, 0xf8u);
    dst_p[6] |= pack_right_shift_u16(src_p->coll_det_reg_cfg_point2_y, 8u, 0x07u);
    dst_p[7] |= pack_left_shift_u16(src_p->coll_det_reg_cfg_point2_y, 0u, 0xffu);

    return (8);
}

int ars408_63_coll_det_region_cfg_unpack(
    struct ars408_63_coll_det_region_cfg_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
    if (size < 8u) {
        return (-EINVAL);
    }

    memset(dst_p, 0, sizeof(*dst_p));

    dst_p->coll_det_reg_cfg_coordinates_valid |= unpack_right_shift_u8(src_p[0], 2u, 0x04u);
    dst_p->coll_det_reg_cfg_activate |= unpack_right_shift_u8(src_p[0], 1u, 0x02u);
    dst_p->coll_det_reg_cfg_region_id |= unpack_right_shift_u8(src_p[1], 0u, 0x07u);
    dst_p->coll_det_reg_cfg_point1_x |= unpack_left_shift_u16(src_p[2], 5u, 0xffu);
    dst_p->coll_det_reg_cfg_point1_x |= unpack_right_shift_u16(src_p[3], 3u, 0xf8u);
    dst_p->coll_det_reg_cfg_point1_y |= unpack_left_shift_u16(src_p[3], 8u, 0x07u);
    dst_p->coll_det_reg_cfg_point1_y |= unpack_right_shift_u16(src_p[4], 0u, 0xffu);
    dst_p->coll_det_reg_cfg_point2_x |= unpack_left_shift_u16(src_p[5], 5u, 0xffu);
    dst_p->coll_det_reg_cfg_point2_x |= unpack_right_shift_u16(src_p[6], 3u, 0xf8u);
    dst_p->coll_det_reg_cfg_point2_y |= unpack_left_shift_u16(src_p[6], 8u, 0x07u);
    dst_p->coll_det_reg_cfg_point2_y |= unpack_right_shift_u16(src_p[7], 0u, 0xffu);

    return (0);
}

uint8_t ars408_63_coll_det_region_cfg_coll_det_reg_cfg_coordinates_valid_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_coll_det_region_cfg_coll_det_reg_cfg_coordinates_valid_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_coll_det_region_cfg_coll_det_reg_cfg_coordinates_valid_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t ars408_63_coll_det_region_cfg_coll_det_reg_cfg_activate_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_coll_det_region_cfg_coll_det_reg_cfg_activate_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_coll_det_region_cfg_coll_det_reg_cfg_activate_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t ars408_63_coll_det_region_cfg_coll_det_reg_cfg_region_id_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_coll_det_region_cfg_coll_det_reg_cfg_region_id_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_coll_det_region_cfg_coll_det_reg_cfg_region_id_is_in_range(uint8_t value)
{
    return (value <= 7u);
}

uint16_t ars408_63_coll_det_region_cfg_coll_det_reg_cfg_point1_x_encode(double value)
{
    return (uint16_t)((value - -500.0) / 0.2);
}

double ars408_63_coll_det_region_cfg_coll_det_reg_cfg_point1_x_decode(uint16_t value)
{
    return (((double)value * 0.2) + -500.0);
}

bool ars408_63_coll_det_region_cfg_coll_det_reg_cfg_point1_x_is_in_range(uint16_t value)
{
    return (value <= 8191u);
}

uint16_t ars408_63_coll_det_region_cfg_coll_det_reg_cfg_point1_y_encode(double value)
{
    return (uint16_t)((value - -204.6) / 0.2);
}

double ars408_63_coll_det_region_cfg_coll_det_reg_cfg_point1_y_decode(uint16_t value)
{
    return (((double)value * 0.2) + -204.6);
}

bool ars408_63_coll_det_region_cfg_coll_det_reg_cfg_point1_y_is_in_range(uint16_t value)
{
    return (value <= 2047u);
}

uint16_t ars408_63_coll_det_region_cfg_coll_det_reg_cfg_point2_x_encode(double value)
{
    return (uint16_t)((value - -500.0) / 0.2);
}

double ars408_63_coll_det_region_cfg_coll_det_reg_cfg_point2_x_decode(uint16_t value)
{
    return (((double)value * 0.2) + -500.0);
}

bool ars408_63_coll_det_region_cfg_coll_det_reg_cfg_point2_x_is_in_range(uint16_t value)
{
    return (value <= 8191u);
}

uint16_t ars408_63_coll_det_region_cfg_coll_det_reg_cfg_point2_y_encode(double value)
{
    return (uint16_t)((value - -204.6) / 0.2);
}

double ars408_63_coll_det_region_cfg_coll_det_reg_cfg_point2_y_decode(uint16_t value)
{
    return (((double)value * 0.2) + -204.6);
}

bool ars408_63_coll_det_region_cfg_coll_det_reg_cfg_point2_y_is_in_range(uint16_t value)
{
    return (value <= 2047u);
}

int ars408_63_coll_det_state_pack(
    uint8_t *dst_p,
    const struct ars408_63_coll_det_state_t *src_p,
    size_t size)
{
    if (size < 4u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 4);

    dst_p[0] |= pack_left_shift_u8(src_p->coll_det_state_nof_regions, 4u, 0xf0u);
    dst_p[0] |= pack_left_shift_u8(src_p->coll_det_state_active, 1u, 0x02u);
    dst_p[1] |= pack_left_shift_u8(src_p->coll_det_state_min_detect_time, 0u, 0xffu);
    dst_p[2] |= pack_right_shift_u16(src_p->coll_det_state_meas_counter, 8u, 0xffu);
    dst_p[3] |= pack_left_shift_u16(src_p->coll_det_state_meas_counter, 0u, 0xffu);

    return (4);
}

int ars408_63_coll_det_state_unpack(
    struct ars408_63_coll_det_state_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
    if (size < 4u) {
        return (-EINVAL);
    }

    memset(dst_p, 0, sizeof(*dst_p));

    dst_p->coll_det_state_nof_regions |= unpack_right_shift_u8(src_p[0], 4u, 0xf0u);
    dst_p->coll_det_state_active |= unpack_right_shift_u8(src_p[0], 1u, 0x02u);
    dst_p->coll_det_state_min_detect_time |= unpack_right_shift_u8(src_p[1], 0u, 0xffu);
    dst_p->coll_det_state_meas_counter |= unpack_left_shift_u16(src_p[2], 8u, 0xffu);
    dst_p->coll_det_state_meas_counter |= unpack_right_shift_u16(src_p[3], 0u, 0xffu);

    return (0);
}

uint8_t ars408_63_coll_det_state_coll_det_state_nof_regions_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_coll_det_state_coll_det_state_nof_regions_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_coll_det_state_coll_det_state_nof_regions_is_in_range(uint8_t value)
{
    return (value <= 15u);
}

uint8_t ars408_63_coll_det_state_coll_det_state_active_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_coll_det_state_coll_det_state_active_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_coll_det_state_coll_det_state_active_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t ars408_63_coll_det_state_coll_det_state_min_detect_time_encode(double value)
{
    return (uint8_t)(value / 0.1);
}

double ars408_63_coll_det_state_coll_det_state_min_detect_time_decode(uint8_t value)
{
    return ((double)value * 0.1);
}

bool ars408_63_coll_det_state_coll_det_state_min_detect_time_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint16_t ars408_63_coll_det_state_coll_det_state_meas_counter_encode(double value)
{
    return (uint16_t)(value);
}

double ars408_63_coll_det_state_coll_det_state_meas_counter_decode(uint16_t value)
{
    return ((double)value);
}

bool ars408_63_coll_det_state_coll_det_state_meas_counter_is_in_range(uint16_t value)
{
    (void)value;

    return (true);
}

int ars408_63_cluster_0_status_pack(
    uint8_t *dst_p,
    const struct ars408_63_cluster_0_status_t *src_p,
    size_t size)
{
    if (size < 5u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 5);

    dst_p[0] |= pack_left_shift_u8(src_p->cluster_nof_clusters_near, 0u, 0xffu);
    dst_p[1] |= pack_left_shift_u8(src_p->cluster_nof_clusters_far, 0u, 0xffu);
    dst_p[2] |= pack_right_shift_u16(src_p->cluster_meas_counter, 8u, 0xffu);
    dst_p[3] |= pack_left_shift_u16(src_p->cluster_meas_counter, 0u, 0xffu);
    dst_p[4] |= pack_left_shift_u8(src_p->cluster_interface_version, 4u, 0xf0u);

    return (5);
}

int ars408_63_cluster_0_status_unpack(
    struct ars408_63_cluster_0_status_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
    if (size < 5u) {
        return (-EINVAL);
    }

    memset(dst_p, 0, sizeof(*dst_p));

    dst_p->cluster_nof_clusters_near |= unpack_right_shift_u8(src_p[0], 0u, 0xffu);
    dst_p->cluster_nof_clusters_far |= unpack_right_shift_u8(src_p[1], 0u, 0xffu);
    dst_p->cluster_meas_counter |= unpack_left_shift_u16(src_p[2], 8u, 0xffu);
    dst_p->cluster_meas_counter |= unpack_right_shift_u16(src_p[3], 0u, 0xffu);
    dst_p->cluster_interface_version |= unpack_right_shift_u8(src_p[4], 4u, 0xf0u);

    return (0);
}

uint8_t ars408_63_cluster_0_status_cluster_nof_clusters_near_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_cluster_0_status_cluster_nof_clusters_near_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_cluster_0_status_cluster_nof_clusters_near_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t ars408_63_cluster_0_status_cluster_nof_clusters_far_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_cluster_0_status_cluster_nof_clusters_far_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_cluster_0_status_cluster_nof_clusters_far_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint16_t ars408_63_cluster_0_status_cluster_meas_counter_encode(double value)
{
    return (uint16_t)(value);
}

double ars408_63_cluster_0_status_cluster_meas_counter_decode(uint16_t value)
{
    return ((double)value);
}

bool ars408_63_cluster_0_status_cluster_meas_counter_is_in_range(uint16_t value)
{
    (void)value;

    return (true);
}

uint8_t ars408_63_cluster_0_status_cluster_interface_version_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_cluster_0_status_cluster_interface_version_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_cluster_0_status_cluster_interface_version_is_in_range(uint8_t value)
{
    return (value <= 15u);
}

int ars408_63_obj_0_status_pack(
    uint8_t *dst_p,
    const struct ars408_63_obj_0_status_t *src_p,
    size_t size)
{
    if (size < 4u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 4);

    dst_p[0] |= pack_left_shift_u8(src_p->obj_nof_objects, 0u, 0xffu);
    dst_p[1] |= pack_right_shift_u16(src_p->obj_meas_counter, 8u, 0xffu);
    dst_p[2] |= pack_left_shift_u16(src_p->obj_meas_counter, 0u, 0xffu);
    dst_p[3] |= pack_left_shift_u8(src_p->obj_interface_version, 4u, 0xf0u);

    return (4);
}

int ars408_63_obj_0_status_unpack(
    struct ars408_63_obj_0_status_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
    if (size < 4u) {
        return (-EINVAL);
    }

    memset(dst_p, 0, sizeof(*dst_p));

    dst_p->obj_nof_objects |= unpack_right_shift_u8(src_p[0], 0u, 0xffu);
    dst_p->obj_meas_counter |= unpack_left_shift_u16(src_p[1], 8u, 0xffu);
    dst_p->obj_meas_counter |= unpack_right_shift_u16(src_p[2], 0u, 0xffu);
    dst_p->obj_interface_version |= unpack_right_shift_u8(src_p[3], 4u, 0xf0u);

    return (0);
}

uint8_t ars408_63_obj_0_status_obj_nof_objects_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_obj_0_status_obj_nof_objects_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_obj_0_status_obj_nof_objects_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint16_t ars408_63_obj_0_status_obj_meas_counter_encode(double value)
{
    return (uint16_t)(value);
}

double ars408_63_obj_0_status_obj_meas_counter_decode(uint16_t value)
{
    return ((double)value);
}

bool ars408_63_obj_0_status_obj_meas_counter_is_in_range(uint16_t value)
{
    (void)value;

    return (true);
}

uint8_t ars408_63_obj_0_status_obj_interface_version_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_obj_0_status_obj_interface_version_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_obj_0_status_obj_interface_version_is_in_range(uint8_t value)
{
    return (value <= 16u);
}

int ars408_63_obj_1_general_pack(
    uint8_t *dst_p,
    const struct ars408_63_obj_1_general_t *src_p,
    size_t size)
{
    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    dst_p[0] |= pack_left_shift_u8(src_p->obj_id, 0u, 0xffu);
    dst_p[1] |= pack_right_shift_u16(src_p->obj_dist_long, 5u, 0xffu);
    dst_p[2] |= pack_left_shift_u16(src_p->obj_dist_long, 3u, 0xf8u);
    dst_p[2] |= pack_right_shift_u16(src_p->obj_dist_lat, 8u, 0x07u);
    dst_p[3] |= pack_left_shift_u16(src_p->obj_dist_lat, 0u, 0xffu);
    dst_p[4] |= pack_right_shift_u16(src_p->obj_vrel_long, 2u, 0xffu);
    dst_p[5] |= pack_left_shift_u16(src_p->obj_vrel_long, 6u, 0xc0u);
    dst_p[5] |= pack_right_shift_u16(src_p->obj_vrel_lat, 3u, 0x3fu);
    dst_p[6] |= pack_left_shift_u16(src_p->obj_vrel_lat, 5u, 0xe0u);
    dst_p[6] |= pack_left_shift_u8(src_p->obj_dyn_prop, 0u, 0x07u);
    dst_p[7] |= pack_left_shift_u8(src_p->obj_rcs, 0u, 0xffu);

    return (8);
}

int ars408_63_obj_1_general_unpack(
    struct ars408_63_obj_1_general_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
    if (size < 8u) {
        return (-EINVAL);
    }

    memset(dst_p, 0, sizeof(*dst_p));

    dst_p->obj_id |= unpack_right_shift_u8(src_p[0], 0u, 0xffu);
    dst_p->obj_dist_long |= unpack_left_shift_u16(src_p[1], 5u, 0xffu);
    dst_p->obj_dist_long |= unpack_right_shift_u16(src_p[2], 3u, 0xf8u);
    dst_p->obj_dist_lat |= unpack_left_shift_u16(src_p[2], 8u, 0x07u);
    dst_p->obj_dist_lat |= unpack_right_shift_u16(src_p[3], 0u, 0xffu);
    dst_p->obj_vrel_long |= unpack_left_shift_u16(src_p[4], 2u, 0xffu);
    dst_p->obj_vrel_long |= unpack_right_shift_u16(src_p[5], 6u, 0xc0u);
    dst_p->obj_vrel_lat |= unpack_left_shift_u16(src_p[5], 3u, 0x3fu);
    dst_p->obj_vrel_lat |= unpack_right_shift_u16(src_p[6], 5u, 0xe0u);
    dst_p->obj_dyn_prop |= unpack_right_shift_u8(src_p[6], 0u, 0x07u);
    dst_p->obj_rcs |= unpack_right_shift_u8(src_p[7], 0u, 0xffu);

    return (0);
}

uint8_t ars408_63_obj_1_general_obj_id_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_obj_1_general_obj_id_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_obj_1_general_obj_id_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint16_t ars408_63_obj_1_general_obj_dist_long_encode(double value)
{
    return (uint16_t)((value - -500.0) / 0.2);
}

double ars408_63_obj_1_general_obj_dist_long_decode(uint16_t value)
{
    return (((double)value * 0.2) + -500.0);
}

bool ars408_63_obj_1_general_obj_dist_long_is_in_range(uint16_t value)
{
    return (value <= 8191u);
}

uint16_t ars408_63_obj_1_general_obj_dist_lat_encode(double value)
{
    return (uint16_t)((value - -204.6) / 0.2);
}

double ars408_63_obj_1_general_obj_dist_lat_decode(uint16_t value)
{
    return (((double)value * 0.2) + -204.6);
}

bool ars408_63_obj_1_general_obj_dist_lat_is_in_range(uint16_t value)
{
    return (value <= 2047u);
}

uint16_t ars408_63_obj_1_general_obj_vrel_long_encode(double value)
{
    return (uint16_t)((value - -128.0) / 0.25);
}

double ars408_63_obj_1_general_obj_vrel_long_decode(uint16_t value)
{
    return (((double)value * 0.25) + -128.0);
}

bool ars408_63_obj_1_general_obj_vrel_long_is_in_range(uint16_t value)
{
    return (value <= 1023u);
}

uint16_t ars408_63_obj_1_general_obj_vrel_lat_encode(double value)
{
    return (uint16_t)((value - -64.0) / 0.25);
}

double ars408_63_obj_1_general_obj_vrel_lat_decode(uint16_t value)
{
    return (((double)value * 0.25) + -64.0);
}

bool ars408_63_obj_1_general_obj_vrel_lat_is_in_range(uint16_t value)
{
    return (value <= 511u);
}

uint8_t ars408_63_obj_1_general_obj_dyn_prop_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_obj_1_general_obj_dyn_prop_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_obj_1_general_obj_dyn_prop_is_in_range(uint8_t value)
{
    return (value <= 7u);
}

uint8_t ars408_63_obj_1_general_obj_rcs_encode(double value)
{
    return (uint8_t)((value - -64.0) / 0.5);
}

double ars408_63_obj_1_general_obj_rcs_decode(uint8_t value)
{
    return (((double)value * 0.5) + -64.0);
}

bool ars408_63_obj_1_general_obj_rcs_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

int ars408_63_version_id_pack(
    uint8_t *dst_p,
    const struct ars408_63_version_id_t *src_p,
    size_t size)
{
    if (size < 4u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 4);

    dst_p[0] |= pack_left_shift_u8(src_p->version_major_release, 0u, 0xffu);
    dst_p[1] |= pack_left_shift_u8(src_p->version_minor_release, 0u, 0xffu);
    dst_p[2] |= pack_left_shift_u8(src_p->version_patch_level, 0u, 0xffu);
    dst_p[3] |= pack_left_shift_u8(src_p->version_extended_range, 1u, 0x02u);
    dst_p[3] |= pack_left_shift_u8(src_p->version_country_code, 0u, 0x01u);

    return (4);
}

int ars408_63_version_id_unpack(
    struct ars408_63_version_id_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
    if (size < 4u) {
        return (-EINVAL);
    }

    memset(dst_p, 0, sizeof(*dst_p));

    dst_p->version_major_release |= unpack_right_shift_u8(src_p[0], 0u, 0xffu);
    dst_p->version_minor_release |= unpack_right_shift_u8(src_p[1], 0u, 0xffu);
    dst_p->version_patch_level |= unpack_right_shift_u8(src_p[2], 0u, 0xffu);
    dst_p->version_extended_range |= unpack_right_shift_u8(src_p[3], 1u, 0x02u);
    dst_p->version_country_code |= unpack_right_shift_u8(src_p[3], 0u, 0x01u);

    return (0);
}

uint8_t ars408_63_version_id_version_major_release_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_version_id_version_major_release_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_version_id_version_major_release_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t ars408_63_version_id_version_minor_release_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_version_id_version_minor_release_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_version_id_version_minor_release_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t ars408_63_version_id_version_patch_level_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_version_id_version_patch_level_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_version_id_version_patch_level_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t ars408_63_version_id_version_extended_range_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_version_id_version_extended_range_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_version_id_version_extended_range_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t ars408_63_version_id_version_country_code_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_version_id_version_country_code_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_version_id_version_country_code_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

int ars408_63_cluster_1_general_pack(
    uint8_t *dst_p,
    const struct ars408_63_cluster_1_general_t *src_p,
    size_t size)
{
    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    dst_p[0] |= pack_left_shift_u8(src_p->cluster_id, 0u, 0xffu);
    dst_p[1] |= pack_right_shift_u16(src_p->cluster_dist_long, 5u, 0xffu);
    dst_p[2] |= pack_left_shift_u16(src_p->cluster_dist_long, 3u, 0xf8u);
    dst_p[2] |= pack_right_shift_u16(src_p->cluster_dist_lat, 8u, 0x03u);
    dst_p[3] |= pack_left_shift_u16(src_p->cluster_dist_lat, 0u, 0xffu);
    dst_p[4] |= pack_right_shift_u16(src_p->cluster_vrel_long, 2u, 0xffu);
    dst_p[5] |= pack_left_shift_u16(src_p->cluster_vrel_long, 6u, 0xc0u);
    dst_p[5] |= pack_right_shift_u16(src_p->cluster_vrel_lat, 3u, 0x3fu);
    dst_p[6] |= pack_left_shift_u16(src_p->cluster_vrel_lat, 5u, 0xe0u);
    dst_p[6] |= pack_left_shift_u8(src_p->cluster_dyn_prop, 0u, 0x07u);
    dst_p[7] |= pack_left_shift_u8(src_p->cluster_rcs, 0u, 0xffu);

    return (8);
}

int ars408_63_cluster_1_general_unpack(
    struct ars408_63_cluster_1_general_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
    if (size < 8u) {
        return (-EINVAL);
    }

    memset(dst_p, 0, sizeof(*dst_p));

    dst_p->cluster_id |= unpack_right_shift_u8(src_p[0], 0u, 0xffu);
    dst_p->cluster_dist_long |= unpack_left_shift_u16(src_p[1], 5u, 0xffu);
    dst_p->cluster_dist_long |= unpack_right_shift_u16(src_p[2], 3u, 0xf8u);
    dst_p->cluster_dist_lat |= unpack_left_shift_u16(src_p[2], 8u, 0x03u);
    dst_p->cluster_dist_lat |= unpack_right_shift_u16(src_p[3], 0u, 0xffu);
    dst_p->cluster_vrel_long |= unpack_left_shift_u16(src_p[4], 2u, 0xffu);
    dst_p->cluster_vrel_long |= unpack_right_shift_u16(src_p[5], 6u, 0xc0u);
    dst_p->cluster_vrel_lat |= unpack_left_shift_u16(src_p[5], 3u, 0x3fu);
    dst_p->cluster_vrel_lat |= unpack_right_shift_u16(src_p[6], 5u, 0xe0u);
    dst_p->cluster_dyn_prop |= unpack_right_shift_u8(src_p[6], 0u, 0x07u);
    dst_p->cluster_rcs |= unpack_right_shift_u8(src_p[7], 0u, 0xffu);

    return (0);
}

uint8_t ars408_63_cluster_1_general_cluster_id_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_cluster_1_general_cluster_id_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_cluster_1_general_cluster_id_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint16_t ars408_63_cluster_1_general_cluster_dist_long_encode(double value)
{
    return (uint16_t)((value - -500.0) / 0.2);
}

double ars408_63_cluster_1_general_cluster_dist_long_decode(uint16_t value)
{
    return (((double)value * 0.2) + -500.0);
}

bool ars408_63_cluster_1_general_cluster_dist_long_is_in_range(uint16_t value)
{
    return (value <= 8191u);
}

uint16_t ars408_63_cluster_1_general_cluster_dist_lat_encode(double value)
{
    return (uint16_t)((value - -102.3) / 0.2);
}

double ars408_63_cluster_1_general_cluster_dist_lat_decode(uint16_t value)
{
    return (((double)value * 0.2) + -102.3);
}

bool ars408_63_cluster_1_general_cluster_dist_lat_is_in_range(uint16_t value)
{
    return (value <= 1023u);
}

uint16_t ars408_63_cluster_1_general_cluster_vrel_long_encode(double value)
{
    return (uint16_t)((value - -128.0) / 0.25);
}

double ars408_63_cluster_1_general_cluster_vrel_long_decode(uint16_t value)
{
    return (((double)value * 0.25) + -128.0);
}

bool ars408_63_cluster_1_general_cluster_vrel_long_is_in_range(uint16_t value)
{
    return (value <= 1023u);
}

uint16_t ars408_63_cluster_1_general_cluster_vrel_lat_encode(double value)
{
    return (uint16_t)((value - -64.0) / 0.25);
}

double ars408_63_cluster_1_general_cluster_vrel_lat_decode(uint16_t value)
{
    return (((double)value * 0.25) + -64.0);
}

bool ars408_63_cluster_1_general_cluster_vrel_lat_is_in_range(uint16_t value)
{
    return (value <= 511u);
}

uint8_t ars408_63_cluster_1_general_cluster_dyn_prop_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_cluster_1_general_cluster_dyn_prop_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_cluster_1_general_cluster_dyn_prop_is_in_range(uint8_t value)
{
    return (value <= 7u);
}

uint8_t ars408_63_cluster_1_general_cluster_rcs_encode(double value)
{
    return (uint8_t)((value - -64.0) / 0.5);
}

double ars408_63_cluster_1_general_cluster_rcs_decode(uint8_t value)
{
    return (((double)value * 0.5) + -64.0);
}

bool ars408_63_cluster_1_general_cluster_rcs_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

int ars408_63_cluster_2_quality_pack(
    uint8_t *dst_p,
    const struct ars408_63_cluster_2_quality_t *src_p,
    size_t size)
{
    if (size < 5u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 5);

    dst_p[0] |= pack_left_shift_u8(src_p->cluster_id, 0u, 0xffu);
    dst_p[1] |= pack_left_shift_u8(src_p->cluster_dist_long_rms, 3u, 0xf8u);
    dst_p[1] |= pack_right_shift_u8(src_p->cluster_dist_lat_rms, 2u, 0x07u);
    dst_p[2] |= pack_left_shift_u8(src_p->cluster_dist_lat_rms, 6u, 0xc0u);
    dst_p[2] |= pack_left_shift_u8(src_p->cluster_vrel_long_rms, 1u, 0x3eu);
    dst_p[2] |= pack_right_shift_u8(src_p->cluster_vrel_lat_rms, 4u, 0x01u);
    dst_p[3] |= pack_left_shift_u8(src_p->cluster_vrel_lat_rms, 4u, 0xf0u);
    dst_p[3] |= pack_left_shift_u8(src_p->cluster_pd_h0, 0u, 0x07u);
    dst_p[4] |= pack_left_shift_u8(src_p->cluster_invalid_state, 3u, 0xf8u);
    dst_p[4] |= pack_left_shift_u8(src_p->cluster_ambig_state, 0u, 0x07u);

    return (5);
}

int ars408_63_cluster_2_quality_unpack(
    struct ars408_63_cluster_2_quality_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
    if (size < 5u) {
        return (-EINVAL);
    }

    memset(dst_p, 0, sizeof(*dst_p));

    dst_p->cluster_id |= unpack_right_shift_u8(src_p[0], 0u, 0xffu);
    dst_p->cluster_dist_long_rms |= unpack_right_shift_u8(src_p[1], 3u, 0xf8u);
    dst_p->cluster_dist_lat_rms |= unpack_left_shift_u8(src_p[1], 2u, 0x07u);
    dst_p->cluster_dist_lat_rms |= unpack_right_shift_u8(src_p[2], 6u, 0xc0u);
    dst_p->cluster_vrel_long_rms |= unpack_right_shift_u8(src_p[2], 1u, 0x3eu);
    dst_p->cluster_vrel_lat_rms |= unpack_left_shift_u8(src_p[2], 4u, 0x01u);
    dst_p->cluster_vrel_lat_rms |= unpack_right_shift_u8(src_p[3], 4u, 0xf0u);
    dst_p->cluster_pd_h0 |= unpack_right_shift_u8(src_p[3], 0u, 0x07u);
    dst_p->cluster_invalid_state |= unpack_right_shift_u8(src_p[4], 3u, 0xf8u);
    dst_p->cluster_ambig_state |= unpack_right_shift_u8(src_p[4], 0u, 0x07u);

    return (0);
}

uint8_t ars408_63_cluster_2_quality_cluster_id_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_cluster_2_quality_cluster_id_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_cluster_2_quality_cluster_id_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t ars408_63_cluster_2_quality_cluster_dist_long_rms_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_cluster_2_quality_cluster_dist_long_rms_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_cluster_2_quality_cluster_dist_long_rms_is_in_range(uint8_t value)
{
    return (value <= 31u);
}

uint8_t ars408_63_cluster_2_quality_cluster_dist_lat_rms_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_cluster_2_quality_cluster_dist_lat_rms_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_cluster_2_quality_cluster_dist_lat_rms_is_in_range(uint8_t value)
{
    return (value <= 31u);
}

uint8_t ars408_63_cluster_2_quality_cluster_vrel_long_rms_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_cluster_2_quality_cluster_vrel_long_rms_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_cluster_2_quality_cluster_vrel_long_rms_is_in_range(uint8_t value)
{
    return (value <= 31u);
}

uint8_t ars408_63_cluster_2_quality_cluster_vrel_lat_rms_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_cluster_2_quality_cluster_vrel_lat_rms_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_cluster_2_quality_cluster_vrel_lat_rms_is_in_range(uint8_t value)
{
    return (value <= 31u);
}

uint8_t ars408_63_cluster_2_quality_cluster_pd_h0_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_cluster_2_quality_cluster_pd_h0_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_cluster_2_quality_cluster_pd_h0_is_in_range(uint8_t value)
{
    return (value <= 7u);
}

uint8_t ars408_63_cluster_2_quality_cluster_invalid_state_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_cluster_2_quality_cluster_invalid_state_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_cluster_2_quality_cluster_invalid_state_is_in_range(uint8_t value)
{
    return (value <= 31u);
}

uint8_t ars408_63_cluster_2_quality_cluster_ambig_state_encode(double value)
{
    return (uint8_t)(value);
}

double ars408_63_cluster_2_quality_cluster_ambig_state_decode(uint8_t value)
{
    return ((double)value);
}

bool ars408_63_cluster_2_quality_cluster_ambig_state_is_in_range(uint8_t value)
{
    return (value <= 7u);
}
