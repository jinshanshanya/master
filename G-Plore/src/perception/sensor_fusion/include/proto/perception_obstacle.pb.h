// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perception_obstacle.proto

#ifndef PROTOBUF_perception_5fobstacle_2eproto__INCLUDED
#define PROTOBUF_perception_5fobstacle_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "error_code.pb.h"
#include "header.pb.h"
// @@protoc_insertion_point(includes)
namespace glb_auto_perception_sensorfusion {
class CIPVInfo;
class CIPVInfoDefaultTypeInternal;
extern CIPVInfoDefaultTypeInternal _CIPVInfo_default_instance_;
class Header;
class HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class LaneBoundaryType;
class LaneBoundaryTypeDefaultTypeInternal;
extern LaneBoundaryTypeDefaultTypeInternal _LaneBoundaryType_default_instance_;
class LaneMarker;
class LaneMarkerDefaultTypeInternal;
extern LaneMarkerDefaultTypeInternal _LaneMarker_default_instance_;
class LaneMarkers;
class LaneMarkersDefaultTypeInternal;
extern LaneMarkersDefaultTypeInternal _LaneMarkers_default_instance_;
class PerceptionObstacle;
class PerceptionObstacleDefaultTypeInternal;
extern PerceptionObstacleDefaultTypeInternal _PerceptionObstacle_default_instance_;
class PerceptionObstacles;
class PerceptionObstaclesDefaultTypeInternal;
extern PerceptionObstaclesDefaultTypeInternal _PerceptionObstacles_default_instance_;
class Point;
class PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
class StatusPb;
class StatusPbDefaultTypeInternal;
extern StatusPbDefaultTypeInternal _StatusPb_default_instance_;
}  // namespace glb_auto_perception_sensorfusion

namespace glb_auto_perception_sensorfusion {

namespace protobuf_perception_5fobstacle_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_perception_5fobstacle_2eproto

enum LaneBoundaryType_Type {
  LaneBoundaryType_Type_UNKNOWN = 0,
  LaneBoundaryType_Type_DOTTED_YELLOW = 1,
  LaneBoundaryType_Type_DOTTED_WHITE = 2,
  LaneBoundaryType_Type_SOLID_YELLOW = 3,
  LaneBoundaryType_Type_SOLID_WHITE = 4,
  LaneBoundaryType_Type_DOUBLE_YELLOW = 5,
  LaneBoundaryType_Type_CURB = 6
};
bool LaneBoundaryType_Type_IsValid(int value);
const LaneBoundaryType_Type LaneBoundaryType_Type_Type_MIN = LaneBoundaryType_Type_UNKNOWN;
const LaneBoundaryType_Type LaneBoundaryType_Type_Type_MAX = LaneBoundaryType_Type_CURB;
const int LaneBoundaryType_Type_Type_ARRAYSIZE = LaneBoundaryType_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* LaneBoundaryType_Type_descriptor();
inline const ::std::string& LaneBoundaryType_Type_Name(LaneBoundaryType_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    LaneBoundaryType_Type_descriptor(), value);
}
inline bool LaneBoundaryType_Type_Parse(
    const ::std::string& name, LaneBoundaryType_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LaneBoundaryType_Type>(
    LaneBoundaryType_Type_descriptor(), name, value);
}
enum PerceptionObstacle_Type {
  PerceptionObstacle_Type_UNKNOWN = 0,
  PerceptionObstacle_Type_UNKNOWN_MOVABLE = 1,
  PerceptionObstacle_Type_UNKNOWN_UNMOVABLE = 2,
  PerceptionObstacle_Type_PEDESTRIAN = 3,
  PerceptionObstacle_Type_BICYCLE = 4,
  PerceptionObstacle_Type_VEHICLE = 5
};
bool PerceptionObstacle_Type_IsValid(int value);
const PerceptionObstacle_Type PerceptionObstacle_Type_Type_MIN = PerceptionObstacle_Type_UNKNOWN;
const PerceptionObstacle_Type PerceptionObstacle_Type_Type_MAX = PerceptionObstacle_Type_VEHICLE;
const int PerceptionObstacle_Type_Type_ARRAYSIZE = PerceptionObstacle_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* PerceptionObstacle_Type_descriptor();
inline const ::std::string& PerceptionObstacle_Type_Name(PerceptionObstacle_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    PerceptionObstacle_Type_descriptor(), value);
}
inline bool PerceptionObstacle_Type_Parse(
    const ::std::string& name, PerceptionObstacle_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PerceptionObstacle_Type>(
    PerceptionObstacle_Type_descriptor(), name, value);
}
enum PerceptionObstacle_ConfidenceType {
  PerceptionObstacle_ConfidenceType_CONFIDENCE_UNKNOWN = 0,
  PerceptionObstacle_ConfidenceType_CONFIDENCE_CNN = 1,
  PerceptionObstacle_ConfidenceType_CONFIDENCE_RADAR = 2
};
bool PerceptionObstacle_ConfidenceType_IsValid(int value);
const PerceptionObstacle_ConfidenceType PerceptionObstacle_ConfidenceType_ConfidenceType_MIN = PerceptionObstacle_ConfidenceType_CONFIDENCE_UNKNOWN;
const PerceptionObstacle_ConfidenceType PerceptionObstacle_ConfidenceType_ConfidenceType_MAX = PerceptionObstacle_ConfidenceType_CONFIDENCE_RADAR;
const int PerceptionObstacle_ConfidenceType_ConfidenceType_ARRAYSIZE = PerceptionObstacle_ConfidenceType_ConfidenceType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PerceptionObstacle_ConfidenceType_descriptor();
inline const ::std::string& PerceptionObstacle_ConfidenceType_Name(PerceptionObstacle_ConfidenceType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PerceptionObstacle_ConfidenceType_descriptor(), value);
}
inline bool PerceptionObstacle_ConfidenceType_Parse(
    const ::std::string& name, PerceptionObstacle_ConfidenceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PerceptionObstacle_ConfidenceType>(
    PerceptionObstacle_ConfidenceType_descriptor(), name, value);
}
// ===================================================================

class LaneBoundaryType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:glb_auto_perception_sensorfusion.LaneBoundaryType) */ {
 public:
  LaneBoundaryType();
  virtual ~LaneBoundaryType();

  LaneBoundaryType(const LaneBoundaryType& from);

  inline LaneBoundaryType& operator=(const LaneBoundaryType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LaneBoundaryType& default_instance();

  static inline const LaneBoundaryType* internal_default_instance() {
    return reinterpret_cast<const LaneBoundaryType*>(
               &_LaneBoundaryType_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(LaneBoundaryType* other);

  // implements Message ----------------------------------------------

  inline LaneBoundaryType* New() const PROTOBUF_FINAL { return New(NULL); }

  LaneBoundaryType* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LaneBoundaryType& from);
  void MergeFrom(const LaneBoundaryType& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LaneBoundaryType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef LaneBoundaryType_Type Type;
  static const Type UNKNOWN =
    LaneBoundaryType_Type_UNKNOWN;
  static const Type DOTTED_YELLOW =
    LaneBoundaryType_Type_DOTTED_YELLOW;
  static const Type DOTTED_WHITE =
    LaneBoundaryType_Type_DOTTED_WHITE;
  static const Type SOLID_YELLOW =
    LaneBoundaryType_Type_SOLID_YELLOW;
  static const Type SOLID_WHITE =
    LaneBoundaryType_Type_SOLID_WHITE;
  static const Type DOUBLE_YELLOW =
    LaneBoundaryType_Type_DOUBLE_YELLOW;
  static const Type CURB =
    LaneBoundaryType_Type_CURB;
  static inline bool Type_IsValid(int value) {
    return LaneBoundaryType_Type_IsValid(value);
  }
  static const Type Type_MIN =
    LaneBoundaryType_Type_Type_MIN;
  static const Type Type_MAX =
    LaneBoundaryType_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    LaneBoundaryType_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return LaneBoundaryType_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return LaneBoundaryType_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return LaneBoundaryType_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .glb_auto_perception_sensorfusion.LaneBoundaryType.Type types = 2;
  int types_size() const;
  void clear_types();
  static const int kTypesFieldNumber = 2;
  ::glb_auto_perception_sensorfusion::LaneBoundaryType_Type types(int index) const;
  void set_types(int index, ::glb_auto_perception_sensorfusion::LaneBoundaryType_Type value);
  void add_types(::glb_auto_perception_sensorfusion::LaneBoundaryType_Type value);
  const ::google::protobuf::RepeatedField<int>& types() const;
  ::google::protobuf::RepeatedField<int>* mutable_types();

  // optional double s = 1;
  bool has_s() const;
  void clear_s();
  static const int kSFieldNumber = 1;
  double s() const;
  void set_s(double value);

  // @@protoc_insertion_point(class_scope:glb_auto_perception_sensorfusion.LaneBoundaryType)
 private:
  void set_has_s();
  void clear_has_s();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField<int> types_;
  double s_;
  friend struct protobuf_perception_5fobstacle_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Point : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:glb_auto_perception_sensorfusion.Point) */ {
 public:
  Point();
  virtual ~Point();

  Point(const Point& from);

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Point& default_instance();

  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
               &_Point_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Point* other);

  // implements Message ----------------------------------------------

  inline Point* New() const PROTOBUF_FINAL { return New(NULL); }

  Point* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Point& from);
  void MergeFrom(const Point& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Point* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // optional double y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // optional double z = 3;
  bool has_z() const;
  void clear_z();
  static const int kZFieldNumber = 3;
  double z() const;
  void set_z(double value);

  // @@protoc_insertion_point(class_scope:glb_auto_perception_sensorfusion.Point)
 private:
  void set_has_x();
  void clear_has_x();
  void set_has_y();
  void clear_has_y();
  void set_has_z();
  void clear_has_z();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double x_;
  double y_;
  double z_;
  friend struct protobuf_perception_5fobstacle_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PerceptionObstacle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:glb_auto_perception_sensorfusion.PerceptionObstacle) */ {
 public:
  PerceptionObstacle();
  virtual ~PerceptionObstacle();

  PerceptionObstacle(const PerceptionObstacle& from);

  inline PerceptionObstacle& operator=(const PerceptionObstacle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PerceptionObstacle& default_instance();

  static inline const PerceptionObstacle* internal_default_instance() {
    return reinterpret_cast<const PerceptionObstacle*>(
               &_PerceptionObstacle_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(PerceptionObstacle* other);

  // implements Message ----------------------------------------------

  inline PerceptionObstacle* New() const PROTOBUF_FINAL { return New(NULL); }

  PerceptionObstacle* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PerceptionObstacle& from);
  void MergeFrom(const PerceptionObstacle& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PerceptionObstacle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef PerceptionObstacle_Type Type;
  static const Type UNKNOWN =
    PerceptionObstacle_Type_UNKNOWN;
  static const Type UNKNOWN_MOVABLE =
    PerceptionObstacle_Type_UNKNOWN_MOVABLE;
  static const Type UNKNOWN_UNMOVABLE =
    PerceptionObstacle_Type_UNKNOWN_UNMOVABLE;
  static const Type PEDESTRIAN =
    PerceptionObstacle_Type_PEDESTRIAN;
  static const Type BICYCLE =
    PerceptionObstacle_Type_BICYCLE;
  static const Type VEHICLE =
    PerceptionObstacle_Type_VEHICLE;
  static inline bool Type_IsValid(int value) {
    return PerceptionObstacle_Type_IsValid(value);
  }
  static const Type Type_MIN =
    PerceptionObstacle_Type_Type_MIN;
  static const Type Type_MAX =
    PerceptionObstacle_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    PerceptionObstacle_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return PerceptionObstacle_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return PerceptionObstacle_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return PerceptionObstacle_Type_Parse(name, value);
  }

  typedef PerceptionObstacle_ConfidenceType ConfidenceType;
  static const ConfidenceType CONFIDENCE_UNKNOWN =
    PerceptionObstacle_ConfidenceType_CONFIDENCE_UNKNOWN;
  static const ConfidenceType CONFIDENCE_CNN =
    PerceptionObstacle_ConfidenceType_CONFIDENCE_CNN;
  static const ConfidenceType CONFIDENCE_RADAR =
    PerceptionObstacle_ConfidenceType_CONFIDENCE_RADAR;
  static inline bool ConfidenceType_IsValid(int value) {
    return PerceptionObstacle_ConfidenceType_IsValid(value);
  }
  static const ConfidenceType ConfidenceType_MIN =
    PerceptionObstacle_ConfidenceType_ConfidenceType_MIN;
  static const ConfidenceType ConfidenceType_MAX =
    PerceptionObstacle_ConfidenceType_ConfidenceType_MAX;
  static const int ConfidenceType_ARRAYSIZE =
    PerceptionObstacle_ConfidenceType_ConfidenceType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ConfidenceType_descriptor() {
    return PerceptionObstacle_ConfidenceType_descriptor();
  }
  static inline const ::std::string& ConfidenceType_Name(ConfidenceType value) {
    return PerceptionObstacle_ConfidenceType_Name(value);
  }
  static inline bool ConfidenceType_Parse(const ::std::string& name,
      ConfidenceType* value) {
    return PerceptionObstacle_ConfidenceType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .glb_auto_perception_sensorfusion.Point polygon_point = 8;
  int polygon_point_size() const;
  void clear_polygon_point();
  static const int kPolygonPointFieldNumber = 8;
  const ::glb_auto_perception_sensorfusion::Point& polygon_point(int index) const;
  ::glb_auto_perception_sensorfusion::Point* mutable_polygon_point(int index);
  ::glb_auto_perception_sensorfusion::Point* add_polygon_point();
  ::google::protobuf::RepeatedPtrField< ::glb_auto_perception_sensorfusion::Point >*
      mutable_polygon_point();
  const ::google::protobuf::RepeatedPtrField< ::glb_auto_perception_sensorfusion::Point >&
      polygon_point() const;

  // repeated double point_cloud = 12 [packed = true];
  int point_cloud_size() const;
  void clear_point_cloud();
  static const int kPointCloudFieldNumber = 12;
  double point_cloud(int index) const;
  void set_point_cloud(int index, double value);
  void add_point_cloud(double value);
  const ::google::protobuf::RepeatedField< double >&
      point_cloud() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_point_cloud();

  // repeated .glb_auto_perception_sensorfusion.Point drops = 15;
  int drops_size() const;
  void clear_drops();
  static const int kDropsFieldNumber = 15;
  const ::glb_auto_perception_sensorfusion::Point& drops(int index) const;
  ::glb_auto_perception_sensorfusion::Point* mutable_drops(int index);
  ::glb_auto_perception_sensorfusion::Point* add_drops();
  ::google::protobuf::RepeatedPtrField< ::glb_auto_perception_sensorfusion::Point >*
      mutable_drops();
  const ::google::protobuf::RepeatedPtrField< ::glb_auto_perception_sensorfusion::Point >&
      drops() const;

  // optional .glb_auto_perception_sensorfusion.Point position = 2;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 2;
  const ::glb_auto_perception_sensorfusion::Point& position() const;
  ::glb_auto_perception_sensorfusion::Point* mutable_position();
  ::glb_auto_perception_sensorfusion::Point* release_position();
  void set_allocated_position(::glb_auto_perception_sensorfusion::Point* position);

  // optional .glb_auto_perception_sensorfusion.Point velocity = 4;
  bool has_velocity() const;
  void clear_velocity();
  static const int kVelocityFieldNumber = 4;
  const ::glb_auto_perception_sensorfusion::Point& velocity() const;
  ::glb_auto_perception_sensorfusion::Point* mutable_velocity();
  ::glb_auto_perception_sensorfusion::Point* release_velocity();
  void set_allocated_velocity(::glb_auto_perception_sensorfusion::Point* velocity);

  // optional double theta = 3;
  bool has_theta() const;
  void clear_theta();
  static const int kThetaFieldNumber = 3;
  double theta() const;
  void set_theta(double value);

  // optional double length = 5;
  bool has_length() const;
  void clear_length();
  static const int kLengthFieldNumber = 5;
  double length() const;
  void set_length(double value);

  // optional int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional .glb_auto_perception_sensorfusion.PerceptionObstacle.Type type = 10;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 10;
  ::glb_auto_perception_sensorfusion::PerceptionObstacle_Type type() const;
  void set_type(::glb_auto_perception_sensorfusion::PerceptionObstacle_Type value);

  // optional double width = 6;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 6;
  double width() const;
  void set_width(double value);

  // optional double height = 7;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 7;
  double height() const;
  void set_height(double value);

  // optional double tracking_time = 9;
  bool has_tracking_time() const;
  void clear_tracking_time();
  static const int kTrackingTimeFieldNumber = 9;
  double tracking_time() const;
  void set_tracking_time(double value);

  // optional double timestamp = 11;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 11;
  double timestamp() const;
  void set_timestamp(double value);

  // optional .glb_auto_perception_sensorfusion.PerceptionObstacle.ConfidenceType confidence_type = 14 [default = CONFIDENCE_CNN];
  bool has_confidence_type() const;
  void clear_confidence_type();
  static const int kConfidenceTypeFieldNumber = 14;
  ::glb_auto_perception_sensorfusion::PerceptionObstacle_ConfidenceType confidence_type() const;
  void set_confidence_type(::glb_auto_perception_sensorfusion::PerceptionObstacle_ConfidenceType value);

  // optional double confidence = 13 [default = 1];
  bool has_confidence() const;
  void clear_confidence();
  static const int kConfidenceFieldNumber = 13;
  double confidence() const;
  void set_confidence(double value);

  // @@protoc_insertion_point(class_scope:glb_auto_perception_sensorfusion.PerceptionObstacle)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_position();
  void clear_has_position();
  void set_has_theta();
  void clear_has_theta();
  void set_has_velocity();
  void clear_has_velocity();
  void set_has_length();
  void clear_has_length();
  void set_has_width();
  void clear_has_width();
  void set_has_height();
  void clear_has_height();
  void set_has_tracking_time();
  void clear_has_tracking_time();
  void set_has_type();
  void clear_has_type();
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_confidence();
  void clear_has_confidence();
  void set_has_confidence_type();
  void clear_has_confidence_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::glb_auto_perception_sensorfusion::Point > polygon_point_;
  ::google::protobuf::RepeatedField< double > point_cloud_;
  mutable int _point_cloud_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::glb_auto_perception_sensorfusion::Point > drops_;
  ::glb_auto_perception_sensorfusion::Point* position_;
  ::glb_auto_perception_sensorfusion::Point* velocity_;
  double theta_;
  double length_;
  ::google::protobuf::int32 id_;
  int type_;
  double width_;
  double height_;
  double tracking_time_;
  double timestamp_;
  int confidence_type_;
  double confidence_;
  friend struct protobuf_perception_5fobstacle_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CIPVInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:glb_auto_perception_sensorfusion.CIPVInfo) */ {
 public:
  CIPVInfo();
  virtual ~CIPVInfo();

  CIPVInfo(const CIPVInfo& from);

  inline CIPVInfo& operator=(const CIPVInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CIPVInfo& default_instance();

  static inline const CIPVInfo* internal_default_instance() {
    return reinterpret_cast<const CIPVInfo*>(
               &_CIPVInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(CIPVInfo* other);

  // implements Message ----------------------------------------------

  inline CIPVInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  CIPVInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CIPVInfo& from);
  void MergeFrom(const CIPVInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CIPVInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 potential_cipv_id = 2;
  int potential_cipv_id_size() const;
  void clear_potential_cipv_id();
  static const int kPotentialCipvIdFieldNumber = 2;
  ::google::protobuf::int32 potential_cipv_id(int index) const;
  void set_potential_cipv_id(int index, ::google::protobuf::int32 value);
  void add_potential_cipv_id(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      potential_cipv_id() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_potential_cipv_id();

  // optional int32 cipv_id = 1;
  bool has_cipv_id() const;
  void clear_cipv_id();
  static const int kCipvIdFieldNumber = 1;
  ::google::protobuf::int32 cipv_id() const;
  void set_cipv_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:glb_auto_perception_sensorfusion.CIPVInfo)
 private:
  void set_has_cipv_id();
  void clear_has_cipv_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > potential_cipv_id_;
  ::google::protobuf::int32 cipv_id_;
  friend struct protobuf_perception_5fobstacle_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LaneMarker : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:glb_auto_perception_sensorfusion.LaneMarker) */ {
 public:
  LaneMarker();
  virtual ~LaneMarker();

  LaneMarker(const LaneMarker& from);

  inline LaneMarker& operator=(const LaneMarker& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LaneMarker& default_instance();

  static inline const LaneMarker* internal_default_instance() {
    return reinterpret_cast<const LaneMarker*>(
               &_LaneMarker_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(LaneMarker* other);

  // implements Message ----------------------------------------------

  inline LaneMarker* New() const PROTOBUF_FINAL { return New(NULL); }

  LaneMarker* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LaneMarker& from);
  void MergeFrom(const LaneMarker& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LaneMarker* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double quality = 2;
  bool has_quality() const;
  void clear_quality();
  static const int kQualityFieldNumber = 2;
  double quality() const;
  void set_quality(double value);

  // optional .glb_auto_perception_sensorfusion.LaneBoundaryType.Type lane_type = 1;
  bool has_lane_type() const;
  void clear_lane_type();
  static const int kLaneTypeFieldNumber = 1;
  ::glb_auto_perception_sensorfusion::LaneBoundaryType_Type lane_type() const;
  void set_lane_type(::glb_auto_perception_sensorfusion::LaneBoundaryType_Type value);

  // optional int32 model_degree = 3;
  bool has_model_degree() const;
  void clear_model_degree();
  static const int kModelDegreeFieldNumber = 3;
  ::google::protobuf::int32 model_degree() const;
  void set_model_degree(::google::protobuf::int32 value);

  // optional double c0_position = 4;
  bool has_c0_position() const;
  void clear_c0_position();
  static const int kC0PositionFieldNumber = 4;
  double c0_position() const;
  void set_c0_position(double value);

  // optional double c1_heading_angle = 5;
  bool has_c1_heading_angle() const;
  void clear_c1_heading_angle();
  static const int kC1HeadingAngleFieldNumber = 5;
  double c1_heading_angle() const;
  void set_c1_heading_angle(double value);

  // optional double c2_curvature = 6;
  bool has_c2_curvature() const;
  void clear_c2_curvature();
  static const int kC2CurvatureFieldNumber = 6;
  double c2_curvature() const;
  void set_c2_curvature(double value);

  // optional double c3_curvature_derivative = 7;
  bool has_c3_curvature_derivative() const;
  void clear_c3_curvature_derivative();
  static const int kC3CurvatureDerivativeFieldNumber = 7;
  double c3_curvature_derivative() const;
  void set_c3_curvature_derivative(double value);

  // optional double view_range = 8;
  bool has_view_range() const;
  void clear_view_range();
  static const int kViewRangeFieldNumber = 8;
  double view_range() const;
  void set_view_range(double value);

  // optional double longitude_start = 9;
  bool has_longitude_start() const;
  void clear_longitude_start();
  static const int kLongitudeStartFieldNumber = 9;
  double longitude_start() const;
  void set_longitude_start(double value);

  // optional double longitude_end = 10;
  bool has_longitude_end() const;
  void clear_longitude_end();
  static const int kLongitudeEndFieldNumber = 10;
  double longitude_end() const;
  void set_longitude_end(double value);

  // @@protoc_insertion_point(class_scope:glb_auto_perception_sensorfusion.LaneMarker)
 private:
  void set_has_lane_type();
  void clear_has_lane_type();
  void set_has_quality();
  void clear_has_quality();
  void set_has_model_degree();
  void clear_has_model_degree();
  void set_has_c0_position();
  void clear_has_c0_position();
  void set_has_c1_heading_angle();
  void clear_has_c1_heading_angle();
  void set_has_c2_curvature();
  void clear_has_c2_curvature();
  void set_has_c3_curvature_derivative();
  void clear_has_c3_curvature_derivative();
  void set_has_view_range();
  void clear_has_view_range();
  void set_has_longitude_start();
  void clear_has_longitude_start();
  void set_has_longitude_end();
  void clear_has_longitude_end();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double quality_;
  int lane_type_;
  ::google::protobuf::int32 model_degree_;
  double c0_position_;
  double c1_heading_angle_;
  double c2_curvature_;
  double c3_curvature_derivative_;
  double view_range_;
  double longitude_start_;
  double longitude_end_;
  friend struct protobuf_perception_5fobstacle_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LaneMarkers : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:glb_auto_perception_sensorfusion.LaneMarkers) */ {
 public:
  LaneMarkers();
  virtual ~LaneMarkers();

  LaneMarkers(const LaneMarkers& from);

  inline LaneMarkers& operator=(const LaneMarkers& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LaneMarkers& default_instance();

  static inline const LaneMarkers* internal_default_instance() {
    return reinterpret_cast<const LaneMarkers*>(
               &_LaneMarkers_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(LaneMarkers* other);

  // implements Message ----------------------------------------------

  inline LaneMarkers* New() const PROTOBUF_FINAL { return New(NULL); }

  LaneMarkers* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LaneMarkers& from);
  void MergeFrom(const LaneMarkers& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LaneMarkers* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .glb_auto_perception_sensorfusion.LaneMarker next_left_lane_marker = 3;
  int next_left_lane_marker_size() const;
  void clear_next_left_lane_marker();
  static const int kNextLeftLaneMarkerFieldNumber = 3;
  const ::glb_auto_perception_sensorfusion::LaneMarker& next_left_lane_marker(int index) const;
  ::glb_auto_perception_sensorfusion::LaneMarker* mutable_next_left_lane_marker(int index);
  ::glb_auto_perception_sensorfusion::LaneMarker* add_next_left_lane_marker();
  ::google::protobuf::RepeatedPtrField< ::glb_auto_perception_sensorfusion::LaneMarker >*
      mutable_next_left_lane_marker();
  const ::google::protobuf::RepeatedPtrField< ::glb_auto_perception_sensorfusion::LaneMarker >&
      next_left_lane_marker() const;

  // repeated .glb_auto_perception_sensorfusion.LaneMarker next_right_lane_marker = 4;
  int next_right_lane_marker_size() const;
  void clear_next_right_lane_marker();
  static const int kNextRightLaneMarkerFieldNumber = 4;
  const ::glb_auto_perception_sensorfusion::LaneMarker& next_right_lane_marker(int index) const;
  ::glb_auto_perception_sensorfusion::LaneMarker* mutable_next_right_lane_marker(int index);
  ::glb_auto_perception_sensorfusion::LaneMarker* add_next_right_lane_marker();
  ::google::protobuf::RepeatedPtrField< ::glb_auto_perception_sensorfusion::LaneMarker >*
      mutable_next_right_lane_marker();
  const ::google::protobuf::RepeatedPtrField< ::glb_auto_perception_sensorfusion::LaneMarker >&
      next_right_lane_marker() const;

  // optional .glb_auto_perception_sensorfusion.LaneMarker left_lane_marker = 1;
  bool has_left_lane_marker() const;
  void clear_left_lane_marker();
  static const int kLeftLaneMarkerFieldNumber = 1;
  const ::glb_auto_perception_sensorfusion::LaneMarker& left_lane_marker() const;
  ::glb_auto_perception_sensorfusion::LaneMarker* mutable_left_lane_marker();
  ::glb_auto_perception_sensorfusion::LaneMarker* release_left_lane_marker();
  void set_allocated_left_lane_marker(::glb_auto_perception_sensorfusion::LaneMarker* left_lane_marker);

  // optional .glb_auto_perception_sensorfusion.LaneMarker right_lane_marker = 2;
  bool has_right_lane_marker() const;
  void clear_right_lane_marker();
  static const int kRightLaneMarkerFieldNumber = 2;
  const ::glb_auto_perception_sensorfusion::LaneMarker& right_lane_marker() const;
  ::glb_auto_perception_sensorfusion::LaneMarker* mutable_right_lane_marker();
  ::glb_auto_perception_sensorfusion::LaneMarker* release_right_lane_marker();
  void set_allocated_right_lane_marker(::glb_auto_perception_sensorfusion::LaneMarker* right_lane_marker);

  // @@protoc_insertion_point(class_scope:glb_auto_perception_sensorfusion.LaneMarkers)
 private:
  void set_has_left_lane_marker();
  void clear_has_left_lane_marker();
  void set_has_right_lane_marker();
  void clear_has_right_lane_marker();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::glb_auto_perception_sensorfusion::LaneMarker > next_left_lane_marker_;
  ::google::protobuf::RepeatedPtrField< ::glb_auto_perception_sensorfusion::LaneMarker > next_right_lane_marker_;
  ::glb_auto_perception_sensorfusion::LaneMarker* left_lane_marker_;
  ::glb_auto_perception_sensorfusion::LaneMarker* right_lane_marker_;
  friend struct protobuf_perception_5fobstacle_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PerceptionObstacles : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:glb_auto_perception_sensorfusion.PerceptionObstacles) */ {
 public:
  PerceptionObstacles();
  virtual ~PerceptionObstacles();

  PerceptionObstacles(const PerceptionObstacles& from);

  inline PerceptionObstacles& operator=(const PerceptionObstacles& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PerceptionObstacles& default_instance();

  static inline const PerceptionObstacles* internal_default_instance() {
    return reinterpret_cast<const PerceptionObstacles*>(
               &_PerceptionObstacles_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(PerceptionObstacles* other);

  // implements Message ----------------------------------------------

  inline PerceptionObstacles* New() const PROTOBUF_FINAL { return New(NULL); }

  PerceptionObstacles* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PerceptionObstacles& from);
  void MergeFrom(const PerceptionObstacles& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PerceptionObstacles* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .glb_auto_perception_sensorfusion.PerceptionObstacle perception_obstacle = 1;
  int perception_obstacle_size() const;
  void clear_perception_obstacle();
  static const int kPerceptionObstacleFieldNumber = 1;
  const ::glb_auto_perception_sensorfusion::PerceptionObstacle& perception_obstacle(int index) const;
  ::glb_auto_perception_sensorfusion::PerceptionObstacle* mutable_perception_obstacle(int index);
  ::glb_auto_perception_sensorfusion::PerceptionObstacle* add_perception_obstacle();
  ::google::protobuf::RepeatedPtrField< ::glb_auto_perception_sensorfusion::PerceptionObstacle >*
      mutable_perception_obstacle();
  const ::google::protobuf::RepeatedPtrField< ::glb_auto_perception_sensorfusion::PerceptionObstacle >&
      perception_obstacle() const;

  // optional .glb_auto_perception_sensorfusion.Header header = 2;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 2;
  const ::glb_auto_perception_sensorfusion::Header& header() const;
  ::glb_auto_perception_sensorfusion::Header* mutable_header();
  ::glb_auto_perception_sensorfusion::Header* release_header();
  void set_allocated_header(::glb_auto_perception_sensorfusion::Header* header);

  // optional .glb_auto_perception_sensorfusion.LaneMarkers lane_marker = 4;
  bool has_lane_marker() const;
  void clear_lane_marker();
  static const int kLaneMarkerFieldNumber = 4;
  const ::glb_auto_perception_sensorfusion::LaneMarkers& lane_marker() const;
  ::glb_auto_perception_sensorfusion::LaneMarkers* mutable_lane_marker();
  ::glb_auto_perception_sensorfusion::LaneMarkers* release_lane_marker();
  void set_allocated_lane_marker(::glb_auto_perception_sensorfusion::LaneMarkers* lane_marker);

  // optional .glb_auto_perception_sensorfusion.CIPVInfo cipv_info = 5;
  bool has_cipv_info() const;
  void clear_cipv_info();
  static const int kCipvInfoFieldNumber = 5;
  const ::glb_auto_perception_sensorfusion::CIPVInfo& cipv_info() const;
  ::glb_auto_perception_sensorfusion::CIPVInfo* mutable_cipv_info();
  ::glb_auto_perception_sensorfusion::CIPVInfo* release_cipv_info();
  void set_allocated_cipv_info(::glb_auto_perception_sensorfusion::CIPVInfo* cipv_info);

  // optional .glb_auto_perception_sensorfusion.ErrorCode error_code = 3 [default = OK];
  bool has_error_code() const;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 3;
  ::glb_auto_perception_sensorfusion::ErrorCode error_code() const;
  void set_error_code(::glb_auto_perception_sensorfusion::ErrorCode value);

  // @@protoc_insertion_point(class_scope:glb_auto_perception_sensorfusion.PerceptionObstacles)
 private:
  void set_has_header();
  void clear_has_header();
  void set_has_error_code();
  void clear_has_error_code();
  void set_has_lane_marker();
  void clear_has_lane_marker();
  void set_has_cipv_info();
  void clear_has_cipv_info();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::glb_auto_perception_sensorfusion::PerceptionObstacle > perception_obstacle_;
  ::glb_auto_perception_sensorfusion::Header* header_;
  ::glb_auto_perception_sensorfusion::LaneMarkers* lane_marker_;
  ::glb_auto_perception_sensorfusion::CIPVInfo* cipv_info_;
  int error_code_;
  friend struct protobuf_perception_5fobstacle_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// LaneBoundaryType

// optional double s = 1;
inline bool LaneBoundaryType::has_s() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LaneBoundaryType::set_has_s() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LaneBoundaryType::clear_has_s() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LaneBoundaryType::clear_s() {
  s_ = 0;
  clear_has_s();
}
inline double LaneBoundaryType::s() const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.LaneBoundaryType.s)
  return s_;
}
inline void LaneBoundaryType::set_s(double value) {
  set_has_s();
  s_ = value;
  // @@protoc_insertion_point(field_set:glb_auto_perception_sensorfusion.LaneBoundaryType.s)
}

// repeated .glb_auto_perception_sensorfusion.LaneBoundaryType.Type types = 2;
inline int LaneBoundaryType::types_size() const {
  return types_.size();
}
inline void LaneBoundaryType::clear_types() {
  types_.Clear();
}
inline ::glb_auto_perception_sensorfusion::LaneBoundaryType_Type LaneBoundaryType::types(int index) const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.LaneBoundaryType.types)
  return static_cast< ::glb_auto_perception_sensorfusion::LaneBoundaryType_Type >(types_.Get(index));
}
inline void LaneBoundaryType::set_types(int index, ::glb_auto_perception_sensorfusion::LaneBoundaryType_Type value) {
  assert(::glb_auto_perception_sensorfusion::LaneBoundaryType_Type_IsValid(value));
  types_.Set(index, value);
  // @@protoc_insertion_point(field_set:glb_auto_perception_sensorfusion.LaneBoundaryType.types)
}
inline void LaneBoundaryType::add_types(::glb_auto_perception_sensorfusion::LaneBoundaryType_Type value) {
  assert(::glb_auto_perception_sensorfusion::LaneBoundaryType_Type_IsValid(value));
  types_.Add(value);
  // @@protoc_insertion_point(field_add:glb_auto_perception_sensorfusion.LaneBoundaryType.types)
}
inline const ::google::protobuf::RepeatedField<int>&
LaneBoundaryType::types() const {
  // @@protoc_insertion_point(field_list:glb_auto_perception_sensorfusion.LaneBoundaryType.types)
  return types_;
}
inline ::google::protobuf::RepeatedField<int>*
LaneBoundaryType::mutable_types() {
  // @@protoc_insertion_point(field_mutable_list:glb_auto_perception_sensorfusion.LaneBoundaryType.types)
  return &types_;
}

// -------------------------------------------------------------------

// Point

// optional double x = 1;
inline bool Point::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Point::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Point::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Point::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double Point::x() const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.Point.x)
  return x_;
}
inline void Point::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:glb_auto_perception_sensorfusion.Point.x)
}

// optional double y = 2;
inline bool Point::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Point::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Point::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Point::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double Point::y() const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.Point.y)
  return y_;
}
inline void Point::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:glb_auto_perception_sensorfusion.Point.y)
}

// optional double z = 3;
inline bool Point::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Point::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Point::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Point::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline double Point::z() const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.Point.z)
  return z_;
}
inline void Point::set_z(double value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:glb_auto_perception_sensorfusion.Point.z)
}

// -------------------------------------------------------------------

// PerceptionObstacle

// optional int32 id = 1;
inline bool PerceptionObstacle::has_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PerceptionObstacle::set_has_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PerceptionObstacle::clear_has_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PerceptionObstacle::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 PerceptionObstacle::id() const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.PerceptionObstacle.id)
  return id_;
}
inline void PerceptionObstacle::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:glb_auto_perception_sensorfusion.PerceptionObstacle.id)
}

// optional .glb_auto_perception_sensorfusion.Point position = 2;
inline bool PerceptionObstacle::has_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PerceptionObstacle::set_has_position() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PerceptionObstacle::clear_has_position() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PerceptionObstacle::clear_position() {
  if (position_ != NULL) position_->::glb_auto_perception_sensorfusion::Point::Clear();
  clear_has_position();
}
inline const ::glb_auto_perception_sensorfusion::Point& PerceptionObstacle::position() const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.PerceptionObstacle.position)
  return position_ != NULL ? *position_
                         : *::glb_auto_perception_sensorfusion::Point::internal_default_instance();
}
inline ::glb_auto_perception_sensorfusion::Point* PerceptionObstacle::mutable_position() {
  set_has_position();
  if (position_ == NULL) {
    position_ = new ::glb_auto_perception_sensorfusion::Point;
  }
  // @@protoc_insertion_point(field_mutable:glb_auto_perception_sensorfusion.PerceptionObstacle.position)
  return position_;
}
inline ::glb_auto_perception_sensorfusion::Point* PerceptionObstacle::release_position() {
  // @@protoc_insertion_point(field_release:glb_auto_perception_sensorfusion.PerceptionObstacle.position)
  clear_has_position();
  ::glb_auto_perception_sensorfusion::Point* temp = position_;
  position_ = NULL;
  return temp;
}
inline void PerceptionObstacle::set_allocated_position(::glb_auto_perception_sensorfusion::Point* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:glb_auto_perception_sensorfusion.PerceptionObstacle.position)
}

// optional double theta = 3;
inline bool PerceptionObstacle::has_theta() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PerceptionObstacle::set_has_theta() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PerceptionObstacle::clear_has_theta() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PerceptionObstacle::clear_theta() {
  theta_ = 0;
  clear_has_theta();
}
inline double PerceptionObstacle::theta() const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.PerceptionObstacle.theta)
  return theta_;
}
inline void PerceptionObstacle::set_theta(double value) {
  set_has_theta();
  theta_ = value;
  // @@protoc_insertion_point(field_set:glb_auto_perception_sensorfusion.PerceptionObstacle.theta)
}

// optional .glb_auto_perception_sensorfusion.Point velocity = 4;
inline bool PerceptionObstacle::has_velocity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PerceptionObstacle::set_has_velocity() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PerceptionObstacle::clear_has_velocity() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PerceptionObstacle::clear_velocity() {
  if (velocity_ != NULL) velocity_->::glb_auto_perception_sensorfusion::Point::Clear();
  clear_has_velocity();
}
inline const ::glb_auto_perception_sensorfusion::Point& PerceptionObstacle::velocity() const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.PerceptionObstacle.velocity)
  return velocity_ != NULL ? *velocity_
                         : *::glb_auto_perception_sensorfusion::Point::internal_default_instance();
}
inline ::glb_auto_perception_sensorfusion::Point* PerceptionObstacle::mutable_velocity() {
  set_has_velocity();
  if (velocity_ == NULL) {
    velocity_ = new ::glb_auto_perception_sensorfusion::Point;
  }
  // @@protoc_insertion_point(field_mutable:glb_auto_perception_sensorfusion.PerceptionObstacle.velocity)
  return velocity_;
}
inline ::glb_auto_perception_sensorfusion::Point* PerceptionObstacle::release_velocity() {
  // @@protoc_insertion_point(field_release:glb_auto_perception_sensorfusion.PerceptionObstacle.velocity)
  clear_has_velocity();
  ::glb_auto_perception_sensorfusion::Point* temp = velocity_;
  velocity_ = NULL;
  return temp;
}
inline void PerceptionObstacle::set_allocated_velocity(::glb_auto_perception_sensorfusion::Point* velocity) {
  delete velocity_;
  velocity_ = velocity;
  if (velocity) {
    set_has_velocity();
  } else {
    clear_has_velocity();
  }
  // @@protoc_insertion_point(field_set_allocated:glb_auto_perception_sensorfusion.PerceptionObstacle.velocity)
}

// optional double length = 5;
inline bool PerceptionObstacle::has_length() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PerceptionObstacle::set_has_length() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PerceptionObstacle::clear_has_length() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PerceptionObstacle::clear_length() {
  length_ = 0;
  clear_has_length();
}
inline double PerceptionObstacle::length() const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.PerceptionObstacle.length)
  return length_;
}
inline void PerceptionObstacle::set_length(double value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:glb_auto_perception_sensorfusion.PerceptionObstacle.length)
}

// optional double width = 6;
inline bool PerceptionObstacle::has_width() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PerceptionObstacle::set_has_width() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PerceptionObstacle::clear_has_width() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PerceptionObstacle::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline double PerceptionObstacle::width() const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.PerceptionObstacle.width)
  return width_;
}
inline void PerceptionObstacle::set_width(double value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:glb_auto_perception_sensorfusion.PerceptionObstacle.width)
}

// optional double height = 7;
inline bool PerceptionObstacle::has_height() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PerceptionObstacle::set_has_height() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PerceptionObstacle::clear_has_height() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PerceptionObstacle::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline double PerceptionObstacle::height() const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.PerceptionObstacle.height)
  return height_;
}
inline void PerceptionObstacle::set_height(double value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:glb_auto_perception_sensorfusion.PerceptionObstacle.height)
}

// repeated .glb_auto_perception_sensorfusion.Point polygon_point = 8;
inline int PerceptionObstacle::polygon_point_size() const {
  return polygon_point_.size();
}
inline void PerceptionObstacle::clear_polygon_point() {
  polygon_point_.Clear();
}
inline const ::glb_auto_perception_sensorfusion::Point& PerceptionObstacle::polygon_point(int index) const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.PerceptionObstacle.polygon_point)
  return polygon_point_.Get(index);
}
inline ::glb_auto_perception_sensorfusion::Point* PerceptionObstacle::mutable_polygon_point(int index) {
  // @@protoc_insertion_point(field_mutable:glb_auto_perception_sensorfusion.PerceptionObstacle.polygon_point)
  return polygon_point_.Mutable(index);
}
inline ::glb_auto_perception_sensorfusion::Point* PerceptionObstacle::add_polygon_point() {
  // @@protoc_insertion_point(field_add:glb_auto_perception_sensorfusion.PerceptionObstacle.polygon_point)
  return polygon_point_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::glb_auto_perception_sensorfusion::Point >*
PerceptionObstacle::mutable_polygon_point() {
  // @@protoc_insertion_point(field_mutable_list:glb_auto_perception_sensorfusion.PerceptionObstacle.polygon_point)
  return &polygon_point_;
}
inline const ::google::protobuf::RepeatedPtrField< ::glb_auto_perception_sensorfusion::Point >&
PerceptionObstacle::polygon_point() const {
  // @@protoc_insertion_point(field_list:glb_auto_perception_sensorfusion.PerceptionObstacle.polygon_point)
  return polygon_point_;
}

// optional double tracking_time = 9;
inline bool PerceptionObstacle::has_tracking_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PerceptionObstacle::set_has_tracking_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PerceptionObstacle::clear_has_tracking_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PerceptionObstacle::clear_tracking_time() {
  tracking_time_ = 0;
  clear_has_tracking_time();
}
inline double PerceptionObstacle::tracking_time() const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.PerceptionObstacle.tracking_time)
  return tracking_time_;
}
inline void PerceptionObstacle::set_tracking_time(double value) {
  set_has_tracking_time();
  tracking_time_ = value;
  // @@protoc_insertion_point(field_set:glb_auto_perception_sensorfusion.PerceptionObstacle.tracking_time)
}

// optional .glb_auto_perception_sensorfusion.PerceptionObstacle.Type type = 10;
inline bool PerceptionObstacle::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PerceptionObstacle::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PerceptionObstacle::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PerceptionObstacle::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::glb_auto_perception_sensorfusion::PerceptionObstacle_Type PerceptionObstacle::type() const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.PerceptionObstacle.type)
  return static_cast< ::glb_auto_perception_sensorfusion::PerceptionObstacle_Type >(type_);
}
inline void PerceptionObstacle::set_type(::glb_auto_perception_sensorfusion::PerceptionObstacle_Type value) {
  assert(::glb_auto_perception_sensorfusion::PerceptionObstacle_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:glb_auto_perception_sensorfusion.PerceptionObstacle.type)
}

// optional double timestamp = 11;
inline bool PerceptionObstacle::has_timestamp() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PerceptionObstacle::set_has_timestamp() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PerceptionObstacle::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PerceptionObstacle::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
inline double PerceptionObstacle::timestamp() const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.PerceptionObstacle.timestamp)
  return timestamp_;
}
inline void PerceptionObstacle::set_timestamp(double value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:glb_auto_perception_sensorfusion.PerceptionObstacle.timestamp)
}

// repeated double point_cloud = 12 [packed = true];
inline int PerceptionObstacle::point_cloud_size() const {
  return point_cloud_.size();
}
inline void PerceptionObstacle::clear_point_cloud() {
  point_cloud_.Clear();
}
inline double PerceptionObstacle::point_cloud(int index) const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.PerceptionObstacle.point_cloud)
  return point_cloud_.Get(index);
}
inline void PerceptionObstacle::set_point_cloud(int index, double value) {
  point_cloud_.Set(index, value);
  // @@protoc_insertion_point(field_set:glb_auto_perception_sensorfusion.PerceptionObstacle.point_cloud)
}
inline void PerceptionObstacle::add_point_cloud(double value) {
  point_cloud_.Add(value);
  // @@protoc_insertion_point(field_add:glb_auto_perception_sensorfusion.PerceptionObstacle.point_cloud)
}
inline const ::google::protobuf::RepeatedField< double >&
PerceptionObstacle::point_cloud() const {
  // @@protoc_insertion_point(field_list:glb_auto_perception_sensorfusion.PerceptionObstacle.point_cloud)
  return point_cloud_;
}
inline ::google::protobuf::RepeatedField< double >*
PerceptionObstacle::mutable_point_cloud() {
  // @@protoc_insertion_point(field_mutable_list:glb_auto_perception_sensorfusion.PerceptionObstacle.point_cloud)
  return &point_cloud_;
}

// optional double confidence = 13 [default = 1];
inline bool PerceptionObstacle::has_confidence() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PerceptionObstacle::set_has_confidence() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PerceptionObstacle::clear_has_confidence() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PerceptionObstacle::clear_confidence() {
  confidence_ = 1;
  clear_has_confidence();
}
inline double PerceptionObstacle::confidence() const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.PerceptionObstacle.confidence)
  return confidence_;
}
inline void PerceptionObstacle::set_confidence(double value) {
  set_has_confidence();
  confidence_ = value;
  // @@protoc_insertion_point(field_set:glb_auto_perception_sensorfusion.PerceptionObstacle.confidence)
}

// optional .glb_auto_perception_sensorfusion.PerceptionObstacle.ConfidenceType confidence_type = 14 [default = CONFIDENCE_CNN];
inline bool PerceptionObstacle::has_confidence_type() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PerceptionObstacle::set_has_confidence_type() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PerceptionObstacle::clear_has_confidence_type() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PerceptionObstacle::clear_confidence_type() {
  confidence_type_ = 1;
  clear_has_confidence_type();
}
inline ::glb_auto_perception_sensorfusion::PerceptionObstacle_ConfidenceType PerceptionObstacle::confidence_type() const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.PerceptionObstacle.confidence_type)
  return static_cast< ::glb_auto_perception_sensorfusion::PerceptionObstacle_ConfidenceType >(confidence_type_);
}
inline void PerceptionObstacle::set_confidence_type(::glb_auto_perception_sensorfusion::PerceptionObstacle_ConfidenceType value) {
  assert(::glb_auto_perception_sensorfusion::PerceptionObstacle_ConfidenceType_IsValid(value));
  set_has_confidence_type();
  confidence_type_ = value;
  // @@protoc_insertion_point(field_set:glb_auto_perception_sensorfusion.PerceptionObstacle.confidence_type)
}

// repeated .glb_auto_perception_sensorfusion.Point drops = 15;
inline int PerceptionObstacle::drops_size() const {
  return drops_.size();
}
inline void PerceptionObstacle::clear_drops() {
  drops_.Clear();
}
inline const ::glb_auto_perception_sensorfusion::Point& PerceptionObstacle::drops(int index) const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.PerceptionObstacle.drops)
  return drops_.Get(index);
}
inline ::glb_auto_perception_sensorfusion::Point* PerceptionObstacle::mutable_drops(int index) {
  // @@protoc_insertion_point(field_mutable:glb_auto_perception_sensorfusion.PerceptionObstacle.drops)
  return drops_.Mutable(index);
}
inline ::glb_auto_perception_sensorfusion::Point* PerceptionObstacle::add_drops() {
  // @@protoc_insertion_point(field_add:glb_auto_perception_sensorfusion.PerceptionObstacle.drops)
  return drops_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::glb_auto_perception_sensorfusion::Point >*
PerceptionObstacle::mutable_drops() {
  // @@protoc_insertion_point(field_mutable_list:glb_auto_perception_sensorfusion.PerceptionObstacle.drops)
  return &drops_;
}
inline const ::google::protobuf::RepeatedPtrField< ::glb_auto_perception_sensorfusion::Point >&
PerceptionObstacle::drops() const {
  // @@protoc_insertion_point(field_list:glb_auto_perception_sensorfusion.PerceptionObstacle.drops)
  return drops_;
}

// -------------------------------------------------------------------

// CIPVInfo

// optional int32 cipv_id = 1;
inline bool CIPVInfo::has_cipv_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CIPVInfo::set_has_cipv_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CIPVInfo::clear_has_cipv_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CIPVInfo::clear_cipv_id() {
  cipv_id_ = 0;
  clear_has_cipv_id();
}
inline ::google::protobuf::int32 CIPVInfo::cipv_id() const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.CIPVInfo.cipv_id)
  return cipv_id_;
}
inline void CIPVInfo::set_cipv_id(::google::protobuf::int32 value) {
  set_has_cipv_id();
  cipv_id_ = value;
  // @@protoc_insertion_point(field_set:glb_auto_perception_sensorfusion.CIPVInfo.cipv_id)
}

// repeated int32 potential_cipv_id = 2;
inline int CIPVInfo::potential_cipv_id_size() const {
  return potential_cipv_id_.size();
}
inline void CIPVInfo::clear_potential_cipv_id() {
  potential_cipv_id_.Clear();
}
inline ::google::protobuf::int32 CIPVInfo::potential_cipv_id(int index) const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.CIPVInfo.potential_cipv_id)
  return potential_cipv_id_.Get(index);
}
inline void CIPVInfo::set_potential_cipv_id(int index, ::google::protobuf::int32 value) {
  potential_cipv_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:glb_auto_perception_sensorfusion.CIPVInfo.potential_cipv_id)
}
inline void CIPVInfo::add_potential_cipv_id(::google::protobuf::int32 value) {
  potential_cipv_id_.Add(value);
  // @@protoc_insertion_point(field_add:glb_auto_perception_sensorfusion.CIPVInfo.potential_cipv_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CIPVInfo::potential_cipv_id() const {
  // @@protoc_insertion_point(field_list:glb_auto_perception_sensorfusion.CIPVInfo.potential_cipv_id)
  return potential_cipv_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CIPVInfo::mutable_potential_cipv_id() {
  // @@protoc_insertion_point(field_mutable_list:glb_auto_perception_sensorfusion.CIPVInfo.potential_cipv_id)
  return &potential_cipv_id_;
}

// -------------------------------------------------------------------

// LaneMarker

// optional .glb_auto_perception_sensorfusion.LaneBoundaryType.Type lane_type = 1;
inline bool LaneMarker::has_lane_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LaneMarker::set_has_lane_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LaneMarker::clear_has_lane_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LaneMarker::clear_lane_type() {
  lane_type_ = 0;
  clear_has_lane_type();
}
inline ::glb_auto_perception_sensorfusion::LaneBoundaryType_Type LaneMarker::lane_type() const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.LaneMarker.lane_type)
  return static_cast< ::glb_auto_perception_sensorfusion::LaneBoundaryType_Type >(lane_type_);
}
inline void LaneMarker::set_lane_type(::glb_auto_perception_sensorfusion::LaneBoundaryType_Type value) {
  assert(::glb_auto_perception_sensorfusion::LaneBoundaryType_Type_IsValid(value));
  set_has_lane_type();
  lane_type_ = value;
  // @@protoc_insertion_point(field_set:glb_auto_perception_sensorfusion.LaneMarker.lane_type)
}

// optional double quality = 2;
inline bool LaneMarker::has_quality() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LaneMarker::set_has_quality() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LaneMarker::clear_has_quality() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LaneMarker::clear_quality() {
  quality_ = 0;
  clear_has_quality();
}
inline double LaneMarker::quality() const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.LaneMarker.quality)
  return quality_;
}
inline void LaneMarker::set_quality(double value) {
  set_has_quality();
  quality_ = value;
  // @@protoc_insertion_point(field_set:glb_auto_perception_sensorfusion.LaneMarker.quality)
}

// optional int32 model_degree = 3;
inline bool LaneMarker::has_model_degree() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LaneMarker::set_has_model_degree() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LaneMarker::clear_has_model_degree() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LaneMarker::clear_model_degree() {
  model_degree_ = 0;
  clear_has_model_degree();
}
inline ::google::protobuf::int32 LaneMarker::model_degree() const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.LaneMarker.model_degree)
  return model_degree_;
}
inline void LaneMarker::set_model_degree(::google::protobuf::int32 value) {
  set_has_model_degree();
  model_degree_ = value;
  // @@protoc_insertion_point(field_set:glb_auto_perception_sensorfusion.LaneMarker.model_degree)
}

// optional double c0_position = 4;
inline bool LaneMarker::has_c0_position() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LaneMarker::set_has_c0_position() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LaneMarker::clear_has_c0_position() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LaneMarker::clear_c0_position() {
  c0_position_ = 0;
  clear_has_c0_position();
}
inline double LaneMarker::c0_position() const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.LaneMarker.c0_position)
  return c0_position_;
}
inline void LaneMarker::set_c0_position(double value) {
  set_has_c0_position();
  c0_position_ = value;
  // @@protoc_insertion_point(field_set:glb_auto_perception_sensorfusion.LaneMarker.c0_position)
}

// optional double c1_heading_angle = 5;
inline bool LaneMarker::has_c1_heading_angle() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LaneMarker::set_has_c1_heading_angle() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LaneMarker::clear_has_c1_heading_angle() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LaneMarker::clear_c1_heading_angle() {
  c1_heading_angle_ = 0;
  clear_has_c1_heading_angle();
}
inline double LaneMarker::c1_heading_angle() const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.LaneMarker.c1_heading_angle)
  return c1_heading_angle_;
}
inline void LaneMarker::set_c1_heading_angle(double value) {
  set_has_c1_heading_angle();
  c1_heading_angle_ = value;
  // @@protoc_insertion_point(field_set:glb_auto_perception_sensorfusion.LaneMarker.c1_heading_angle)
}

// optional double c2_curvature = 6;
inline bool LaneMarker::has_c2_curvature() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LaneMarker::set_has_c2_curvature() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LaneMarker::clear_has_c2_curvature() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LaneMarker::clear_c2_curvature() {
  c2_curvature_ = 0;
  clear_has_c2_curvature();
}
inline double LaneMarker::c2_curvature() const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.LaneMarker.c2_curvature)
  return c2_curvature_;
}
inline void LaneMarker::set_c2_curvature(double value) {
  set_has_c2_curvature();
  c2_curvature_ = value;
  // @@protoc_insertion_point(field_set:glb_auto_perception_sensorfusion.LaneMarker.c2_curvature)
}

// optional double c3_curvature_derivative = 7;
inline bool LaneMarker::has_c3_curvature_derivative() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LaneMarker::set_has_c3_curvature_derivative() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LaneMarker::clear_has_c3_curvature_derivative() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LaneMarker::clear_c3_curvature_derivative() {
  c3_curvature_derivative_ = 0;
  clear_has_c3_curvature_derivative();
}
inline double LaneMarker::c3_curvature_derivative() const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.LaneMarker.c3_curvature_derivative)
  return c3_curvature_derivative_;
}
inline void LaneMarker::set_c3_curvature_derivative(double value) {
  set_has_c3_curvature_derivative();
  c3_curvature_derivative_ = value;
  // @@protoc_insertion_point(field_set:glb_auto_perception_sensorfusion.LaneMarker.c3_curvature_derivative)
}

// optional double view_range = 8;
inline bool LaneMarker::has_view_range() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LaneMarker::set_has_view_range() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LaneMarker::clear_has_view_range() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LaneMarker::clear_view_range() {
  view_range_ = 0;
  clear_has_view_range();
}
inline double LaneMarker::view_range() const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.LaneMarker.view_range)
  return view_range_;
}
inline void LaneMarker::set_view_range(double value) {
  set_has_view_range();
  view_range_ = value;
  // @@protoc_insertion_point(field_set:glb_auto_perception_sensorfusion.LaneMarker.view_range)
}

// optional double longitude_start = 9;
inline bool LaneMarker::has_longitude_start() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LaneMarker::set_has_longitude_start() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LaneMarker::clear_has_longitude_start() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LaneMarker::clear_longitude_start() {
  longitude_start_ = 0;
  clear_has_longitude_start();
}
inline double LaneMarker::longitude_start() const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.LaneMarker.longitude_start)
  return longitude_start_;
}
inline void LaneMarker::set_longitude_start(double value) {
  set_has_longitude_start();
  longitude_start_ = value;
  // @@protoc_insertion_point(field_set:glb_auto_perception_sensorfusion.LaneMarker.longitude_start)
}

// optional double longitude_end = 10;
inline bool LaneMarker::has_longitude_end() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void LaneMarker::set_has_longitude_end() {
  _has_bits_[0] |= 0x00000200u;
}
inline void LaneMarker::clear_has_longitude_end() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void LaneMarker::clear_longitude_end() {
  longitude_end_ = 0;
  clear_has_longitude_end();
}
inline double LaneMarker::longitude_end() const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.LaneMarker.longitude_end)
  return longitude_end_;
}
inline void LaneMarker::set_longitude_end(double value) {
  set_has_longitude_end();
  longitude_end_ = value;
  // @@protoc_insertion_point(field_set:glb_auto_perception_sensorfusion.LaneMarker.longitude_end)
}

// -------------------------------------------------------------------

// LaneMarkers

// optional .glb_auto_perception_sensorfusion.LaneMarker left_lane_marker = 1;
inline bool LaneMarkers::has_left_lane_marker() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LaneMarkers::set_has_left_lane_marker() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LaneMarkers::clear_has_left_lane_marker() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LaneMarkers::clear_left_lane_marker() {
  if (left_lane_marker_ != NULL) left_lane_marker_->::glb_auto_perception_sensorfusion::LaneMarker::Clear();
  clear_has_left_lane_marker();
}
inline const ::glb_auto_perception_sensorfusion::LaneMarker& LaneMarkers::left_lane_marker() const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.LaneMarkers.left_lane_marker)
  return left_lane_marker_ != NULL ? *left_lane_marker_
                         : *::glb_auto_perception_sensorfusion::LaneMarker::internal_default_instance();
}
inline ::glb_auto_perception_sensorfusion::LaneMarker* LaneMarkers::mutable_left_lane_marker() {
  set_has_left_lane_marker();
  if (left_lane_marker_ == NULL) {
    left_lane_marker_ = new ::glb_auto_perception_sensorfusion::LaneMarker;
  }
  // @@protoc_insertion_point(field_mutable:glb_auto_perception_sensorfusion.LaneMarkers.left_lane_marker)
  return left_lane_marker_;
}
inline ::glb_auto_perception_sensorfusion::LaneMarker* LaneMarkers::release_left_lane_marker() {
  // @@protoc_insertion_point(field_release:glb_auto_perception_sensorfusion.LaneMarkers.left_lane_marker)
  clear_has_left_lane_marker();
  ::glb_auto_perception_sensorfusion::LaneMarker* temp = left_lane_marker_;
  left_lane_marker_ = NULL;
  return temp;
}
inline void LaneMarkers::set_allocated_left_lane_marker(::glb_auto_perception_sensorfusion::LaneMarker* left_lane_marker) {
  delete left_lane_marker_;
  left_lane_marker_ = left_lane_marker;
  if (left_lane_marker) {
    set_has_left_lane_marker();
  } else {
    clear_has_left_lane_marker();
  }
  // @@protoc_insertion_point(field_set_allocated:glb_auto_perception_sensorfusion.LaneMarkers.left_lane_marker)
}

// optional .glb_auto_perception_sensorfusion.LaneMarker right_lane_marker = 2;
inline bool LaneMarkers::has_right_lane_marker() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LaneMarkers::set_has_right_lane_marker() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LaneMarkers::clear_has_right_lane_marker() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LaneMarkers::clear_right_lane_marker() {
  if (right_lane_marker_ != NULL) right_lane_marker_->::glb_auto_perception_sensorfusion::LaneMarker::Clear();
  clear_has_right_lane_marker();
}
inline const ::glb_auto_perception_sensorfusion::LaneMarker& LaneMarkers::right_lane_marker() const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.LaneMarkers.right_lane_marker)
  return right_lane_marker_ != NULL ? *right_lane_marker_
                         : *::glb_auto_perception_sensorfusion::LaneMarker::internal_default_instance();
}
inline ::glb_auto_perception_sensorfusion::LaneMarker* LaneMarkers::mutable_right_lane_marker() {
  set_has_right_lane_marker();
  if (right_lane_marker_ == NULL) {
    right_lane_marker_ = new ::glb_auto_perception_sensorfusion::LaneMarker;
  }
  // @@protoc_insertion_point(field_mutable:glb_auto_perception_sensorfusion.LaneMarkers.right_lane_marker)
  return right_lane_marker_;
}
inline ::glb_auto_perception_sensorfusion::LaneMarker* LaneMarkers::release_right_lane_marker() {
  // @@protoc_insertion_point(field_release:glb_auto_perception_sensorfusion.LaneMarkers.right_lane_marker)
  clear_has_right_lane_marker();
  ::glb_auto_perception_sensorfusion::LaneMarker* temp = right_lane_marker_;
  right_lane_marker_ = NULL;
  return temp;
}
inline void LaneMarkers::set_allocated_right_lane_marker(::glb_auto_perception_sensorfusion::LaneMarker* right_lane_marker) {
  delete right_lane_marker_;
  right_lane_marker_ = right_lane_marker;
  if (right_lane_marker) {
    set_has_right_lane_marker();
  } else {
    clear_has_right_lane_marker();
  }
  // @@protoc_insertion_point(field_set_allocated:glb_auto_perception_sensorfusion.LaneMarkers.right_lane_marker)
}

// repeated .glb_auto_perception_sensorfusion.LaneMarker next_left_lane_marker = 3;
inline int LaneMarkers::next_left_lane_marker_size() const {
  return next_left_lane_marker_.size();
}
inline void LaneMarkers::clear_next_left_lane_marker() {
  next_left_lane_marker_.Clear();
}
inline const ::glb_auto_perception_sensorfusion::LaneMarker& LaneMarkers::next_left_lane_marker(int index) const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.LaneMarkers.next_left_lane_marker)
  return next_left_lane_marker_.Get(index);
}
inline ::glb_auto_perception_sensorfusion::LaneMarker* LaneMarkers::mutable_next_left_lane_marker(int index) {
  // @@protoc_insertion_point(field_mutable:glb_auto_perception_sensorfusion.LaneMarkers.next_left_lane_marker)
  return next_left_lane_marker_.Mutable(index);
}
inline ::glb_auto_perception_sensorfusion::LaneMarker* LaneMarkers::add_next_left_lane_marker() {
  // @@protoc_insertion_point(field_add:glb_auto_perception_sensorfusion.LaneMarkers.next_left_lane_marker)
  return next_left_lane_marker_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::glb_auto_perception_sensorfusion::LaneMarker >*
LaneMarkers::mutable_next_left_lane_marker() {
  // @@protoc_insertion_point(field_mutable_list:glb_auto_perception_sensorfusion.LaneMarkers.next_left_lane_marker)
  return &next_left_lane_marker_;
}
inline const ::google::protobuf::RepeatedPtrField< ::glb_auto_perception_sensorfusion::LaneMarker >&
LaneMarkers::next_left_lane_marker() const {
  // @@protoc_insertion_point(field_list:glb_auto_perception_sensorfusion.LaneMarkers.next_left_lane_marker)
  return next_left_lane_marker_;
}

// repeated .glb_auto_perception_sensorfusion.LaneMarker next_right_lane_marker = 4;
inline int LaneMarkers::next_right_lane_marker_size() const {
  return next_right_lane_marker_.size();
}
inline void LaneMarkers::clear_next_right_lane_marker() {
  next_right_lane_marker_.Clear();
}
inline const ::glb_auto_perception_sensorfusion::LaneMarker& LaneMarkers::next_right_lane_marker(int index) const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.LaneMarkers.next_right_lane_marker)
  return next_right_lane_marker_.Get(index);
}
inline ::glb_auto_perception_sensorfusion::LaneMarker* LaneMarkers::mutable_next_right_lane_marker(int index) {
  // @@protoc_insertion_point(field_mutable:glb_auto_perception_sensorfusion.LaneMarkers.next_right_lane_marker)
  return next_right_lane_marker_.Mutable(index);
}
inline ::glb_auto_perception_sensorfusion::LaneMarker* LaneMarkers::add_next_right_lane_marker() {
  // @@protoc_insertion_point(field_add:glb_auto_perception_sensorfusion.LaneMarkers.next_right_lane_marker)
  return next_right_lane_marker_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::glb_auto_perception_sensorfusion::LaneMarker >*
LaneMarkers::mutable_next_right_lane_marker() {
  // @@protoc_insertion_point(field_mutable_list:glb_auto_perception_sensorfusion.LaneMarkers.next_right_lane_marker)
  return &next_right_lane_marker_;
}
inline const ::google::protobuf::RepeatedPtrField< ::glb_auto_perception_sensorfusion::LaneMarker >&
LaneMarkers::next_right_lane_marker() const {
  // @@protoc_insertion_point(field_list:glb_auto_perception_sensorfusion.LaneMarkers.next_right_lane_marker)
  return next_right_lane_marker_;
}

// -------------------------------------------------------------------

// PerceptionObstacles

// repeated .glb_auto_perception_sensorfusion.PerceptionObstacle perception_obstacle = 1;
inline int PerceptionObstacles::perception_obstacle_size() const {
  return perception_obstacle_.size();
}
inline void PerceptionObstacles::clear_perception_obstacle() {
  perception_obstacle_.Clear();
}
inline const ::glb_auto_perception_sensorfusion::PerceptionObstacle& PerceptionObstacles::perception_obstacle(int index) const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.PerceptionObstacles.perception_obstacle)
  return perception_obstacle_.Get(index);
}
inline ::glb_auto_perception_sensorfusion::PerceptionObstacle* PerceptionObstacles::mutable_perception_obstacle(int index) {
  // @@protoc_insertion_point(field_mutable:glb_auto_perception_sensorfusion.PerceptionObstacles.perception_obstacle)
  return perception_obstacle_.Mutable(index);
}
inline ::glb_auto_perception_sensorfusion::PerceptionObstacle* PerceptionObstacles::add_perception_obstacle() {
  // @@protoc_insertion_point(field_add:glb_auto_perception_sensorfusion.PerceptionObstacles.perception_obstacle)
  return perception_obstacle_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::glb_auto_perception_sensorfusion::PerceptionObstacle >*
PerceptionObstacles::mutable_perception_obstacle() {
  // @@protoc_insertion_point(field_mutable_list:glb_auto_perception_sensorfusion.PerceptionObstacles.perception_obstacle)
  return &perception_obstacle_;
}
inline const ::google::protobuf::RepeatedPtrField< ::glb_auto_perception_sensorfusion::PerceptionObstacle >&
PerceptionObstacles::perception_obstacle() const {
  // @@protoc_insertion_point(field_list:glb_auto_perception_sensorfusion.PerceptionObstacles.perception_obstacle)
  return perception_obstacle_;
}

// optional .glb_auto_perception_sensorfusion.Header header = 2;
inline bool PerceptionObstacles::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PerceptionObstacles::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PerceptionObstacles::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PerceptionObstacles::clear_header() {
  if (header_ != NULL) header_->::glb_auto_perception_sensorfusion::Header::Clear();
  clear_has_header();
}
inline const ::glb_auto_perception_sensorfusion::Header& PerceptionObstacles::header() const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.PerceptionObstacles.header)
  return header_ != NULL ? *header_
                         : *::glb_auto_perception_sensorfusion::Header::internal_default_instance();
}
inline ::glb_auto_perception_sensorfusion::Header* PerceptionObstacles::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::glb_auto_perception_sensorfusion::Header;
  }
  // @@protoc_insertion_point(field_mutable:glb_auto_perception_sensorfusion.PerceptionObstacles.header)
  return header_;
}
inline ::glb_auto_perception_sensorfusion::Header* PerceptionObstacles::release_header() {
  // @@protoc_insertion_point(field_release:glb_auto_perception_sensorfusion.PerceptionObstacles.header)
  clear_has_header();
  ::glb_auto_perception_sensorfusion::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void PerceptionObstacles::set_allocated_header(::glb_auto_perception_sensorfusion::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:glb_auto_perception_sensorfusion.PerceptionObstacles.header)
}

// optional .glb_auto_perception_sensorfusion.ErrorCode error_code = 3 [default = OK];
inline bool PerceptionObstacles::has_error_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PerceptionObstacles::set_has_error_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PerceptionObstacles::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PerceptionObstacles::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::glb_auto_perception_sensorfusion::ErrorCode PerceptionObstacles::error_code() const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.PerceptionObstacles.error_code)
  return static_cast< ::glb_auto_perception_sensorfusion::ErrorCode >(error_code_);
}
inline void PerceptionObstacles::set_error_code(::glb_auto_perception_sensorfusion::ErrorCode value) {
  assert(::glb_auto_perception_sensorfusion::ErrorCode_IsValid(value));
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:glb_auto_perception_sensorfusion.PerceptionObstacles.error_code)
}

// optional .glb_auto_perception_sensorfusion.LaneMarkers lane_marker = 4;
inline bool PerceptionObstacles::has_lane_marker() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PerceptionObstacles::set_has_lane_marker() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PerceptionObstacles::clear_has_lane_marker() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PerceptionObstacles::clear_lane_marker() {
  if (lane_marker_ != NULL) lane_marker_->::glb_auto_perception_sensorfusion::LaneMarkers::Clear();
  clear_has_lane_marker();
}
inline const ::glb_auto_perception_sensorfusion::LaneMarkers& PerceptionObstacles::lane_marker() const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.PerceptionObstacles.lane_marker)
  return lane_marker_ != NULL ? *lane_marker_
                         : *::glb_auto_perception_sensorfusion::LaneMarkers::internal_default_instance();
}
inline ::glb_auto_perception_sensorfusion::LaneMarkers* PerceptionObstacles::mutable_lane_marker() {
  set_has_lane_marker();
  if (lane_marker_ == NULL) {
    lane_marker_ = new ::glb_auto_perception_sensorfusion::LaneMarkers;
  }
  // @@protoc_insertion_point(field_mutable:glb_auto_perception_sensorfusion.PerceptionObstacles.lane_marker)
  return lane_marker_;
}
inline ::glb_auto_perception_sensorfusion::LaneMarkers* PerceptionObstacles::release_lane_marker() {
  // @@protoc_insertion_point(field_release:glb_auto_perception_sensorfusion.PerceptionObstacles.lane_marker)
  clear_has_lane_marker();
  ::glb_auto_perception_sensorfusion::LaneMarkers* temp = lane_marker_;
  lane_marker_ = NULL;
  return temp;
}
inline void PerceptionObstacles::set_allocated_lane_marker(::glb_auto_perception_sensorfusion::LaneMarkers* lane_marker) {
  delete lane_marker_;
  lane_marker_ = lane_marker;
  if (lane_marker) {
    set_has_lane_marker();
  } else {
    clear_has_lane_marker();
  }
  // @@protoc_insertion_point(field_set_allocated:glb_auto_perception_sensorfusion.PerceptionObstacles.lane_marker)
}

// optional .glb_auto_perception_sensorfusion.CIPVInfo cipv_info = 5;
inline bool PerceptionObstacles::has_cipv_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PerceptionObstacles::set_has_cipv_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PerceptionObstacles::clear_has_cipv_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PerceptionObstacles::clear_cipv_info() {
  if (cipv_info_ != NULL) cipv_info_->::glb_auto_perception_sensorfusion::CIPVInfo::Clear();
  clear_has_cipv_info();
}
inline const ::glb_auto_perception_sensorfusion::CIPVInfo& PerceptionObstacles::cipv_info() const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.PerceptionObstacles.cipv_info)
  return cipv_info_ != NULL ? *cipv_info_
                         : *::glb_auto_perception_sensorfusion::CIPVInfo::internal_default_instance();
}
inline ::glb_auto_perception_sensorfusion::CIPVInfo* PerceptionObstacles::mutable_cipv_info() {
  set_has_cipv_info();
  if (cipv_info_ == NULL) {
    cipv_info_ = new ::glb_auto_perception_sensorfusion::CIPVInfo;
  }
  // @@protoc_insertion_point(field_mutable:glb_auto_perception_sensorfusion.PerceptionObstacles.cipv_info)
  return cipv_info_;
}
inline ::glb_auto_perception_sensorfusion::CIPVInfo* PerceptionObstacles::release_cipv_info() {
  // @@protoc_insertion_point(field_release:glb_auto_perception_sensorfusion.PerceptionObstacles.cipv_info)
  clear_has_cipv_info();
  ::glb_auto_perception_sensorfusion::CIPVInfo* temp = cipv_info_;
  cipv_info_ = NULL;
  return temp;
}
inline void PerceptionObstacles::set_allocated_cipv_info(::glb_auto_perception_sensorfusion::CIPVInfo* cipv_info) {
  delete cipv_info_;
  cipv_info_ = cipv_info;
  if (cipv_info) {
    set_has_cipv_info();
  } else {
    clear_has_cipv_info();
  }
  // @@protoc_insertion_point(field_set_allocated:glb_auto_perception_sensorfusion.PerceptionObstacles.cipv_info)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace glb_auto_perception_sensorfusion

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::glb_auto_perception_sensorfusion::LaneBoundaryType_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::glb_auto_perception_sensorfusion::LaneBoundaryType_Type>() {
  return ::glb_auto_perception_sensorfusion::LaneBoundaryType_Type_descriptor();
}
template <> struct is_proto_enum< ::glb_auto_perception_sensorfusion::PerceptionObstacle_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::glb_auto_perception_sensorfusion::PerceptionObstacle_Type>() {
  return ::glb_auto_perception_sensorfusion::PerceptionObstacle_Type_descriptor();
}
template <> struct is_proto_enum< ::glb_auto_perception_sensorfusion::PerceptionObstacle_ConfidenceType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::glb_auto_perception_sensorfusion::PerceptionObstacle_ConfidenceType>() {
  return ::glb_auto_perception_sensorfusion::PerceptionObstacle_ConfidenceType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_perception_5fobstacle_2eproto__INCLUDED
