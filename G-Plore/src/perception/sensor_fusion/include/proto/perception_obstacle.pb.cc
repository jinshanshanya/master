// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perception_obstacle.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "perception_obstacle.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace glb_auto_perception_sensorfusion {
class LaneBoundaryTypeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LaneBoundaryType> {
} _LaneBoundaryType_default_instance_;
class PointDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Point> {
} _Point_default_instance_;
class PerceptionObstacleDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PerceptionObstacle> {
} _PerceptionObstacle_default_instance_;
class CIPVInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CIPVInfo> {
} _CIPVInfo_default_instance_;
class LaneMarkerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LaneMarker> {
} _LaneMarker_default_instance_;
class LaneMarkersDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LaneMarkers> {
} _LaneMarkers_default_instance_;
class PerceptionObstaclesDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PerceptionObstacles> {
} _PerceptionObstacles_default_instance_;

namespace protobuf_perception_5fobstacle_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[7];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneBoundaryType, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneBoundaryType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneBoundaryType, s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneBoundaryType, types_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, z_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacle, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacle, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacle, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacle, theta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacle, velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacle, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacle, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacle, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacle, polygon_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacle, tracking_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacle, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacle, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacle, point_cloud_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacle, confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacle, confidence_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacle, drops_),
  4,
  0,
  2,
  1,
  3,
  6,
  7,
  ~0u,
  8,
  5,
  9,
  ~0u,
  11,
  10,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CIPVInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CIPVInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CIPVInfo, cipv_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CIPVInfo, potential_cipv_id_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneMarker, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneMarker, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneMarker, lane_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneMarker, quality_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneMarker, model_degree_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneMarker, c0_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneMarker, c1_heading_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneMarker, c2_curvature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneMarker, c3_curvature_derivative_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneMarker, view_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneMarker, longitude_start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneMarker, longitude_end_),
  1,
  0,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneMarkers, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneMarkers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneMarkers, left_lane_marker_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneMarkers, right_lane_marker_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneMarkers, next_left_lane_marker_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneMarkers, next_right_lane_marker_),
  0,
  1,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacles, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacles, perception_obstacle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacles, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacles, error_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacles, lane_marker_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacles, cipv_info_),
  ~0u,
  0,
  3,
  1,
  2,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 7, sizeof(LaneBoundaryType)},
  { 9, 17, sizeof(Point)},
  { 20, 40, sizeof(PerceptionObstacle)},
  { 55, 62, sizeof(CIPVInfo)},
  { 64, 79, sizeof(LaneMarker)},
  { 89, 98, sizeof(LaneMarkers)},
  { 102, 112, sizeof(PerceptionObstacles)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_LaneBoundaryType_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Point_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PerceptionObstacle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CIPVInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LaneMarker_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LaneMarkers_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PerceptionObstacles_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "perception_obstacle.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

}  // namespace

void TableStruct::Shutdown() {
  _LaneBoundaryType_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Point_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _PerceptionObstacle_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _CIPVInfo_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _LaneMarker_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _LaneMarkers_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _PerceptionObstacles_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::glb_auto_perception_sensorfusion::protobuf_error_5fcode_2eproto::InitDefaults();
  ::glb_auto_perception_sensorfusion::protobuf_header_2eproto::InitDefaults();
  _LaneBoundaryType_default_instance_.DefaultConstruct();
  _Point_default_instance_.DefaultConstruct();
  _PerceptionObstacle_default_instance_.DefaultConstruct();
  _CIPVInfo_default_instance_.DefaultConstruct();
  _LaneMarker_default_instance_.DefaultConstruct();
  _LaneMarkers_default_instance_.DefaultConstruct();
  _PerceptionObstacles_default_instance_.DefaultConstruct();
  _PerceptionObstacle_default_instance_.get_mutable()->position_ = const_cast< ::glb_auto_perception_sensorfusion::Point*>(
      ::glb_auto_perception_sensorfusion::Point::internal_default_instance());
  _PerceptionObstacle_default_instance_.get_mutable()->velocity_ = const_cast< ::glb_auto_perception_sensorfusion::Point*>(
      ::glb_auto_perception_sensorfusion::Point::internal_default_instance());
  _LaneMarkers_default_instance_.get_mutable()->left_lane_marker_ = const_cast< ::glb_auto_perception_sensorfusion::LaneMarker*>(
      ::glb_auto_perception_sensorfusion::LaneMarker::internal_default_instance());
  _LaneMarkers_default_instance_.get_mutable()->right_lane_marker_ = const_cast< ::glb_auto_perception_sensorfusion::LaneMarker*>(
      ::glb_auto_perception_sensorfusion::LaneMarker::internal_default_instance());
  _PerceptionObstacles_default_instance_.get_mutable()->header_ = const_cast< ::glb_auto_perception_sensorfusion::Header*>(
      ::glb_auto_perception_sensorfusion::Header::internal_default_instance());
  _PerceptionObstacles_default_instance_.get_mutable()->lane_marker_ = const_cast< ::glb_auto_perception_sensorfusion::LaneMarkers*>(
      ::glb_auto_perception_sensorfusion::LaneMarkers::internal_default_instance());
  _PerceptionObstacles_default_instance_.get_mutable()->cipv_info_ = const_cast< ::glb_auto_perception_sensorfusion::CIPVInfo*>(
      ::glb_auto_perception_sensorfusion::CIPVInfo::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\031perception_obstacle.proto\022 glb_auto_pe"
      "rception_sensorfusion\032\020error_code.proto\032"
      "\014header.proto\"\337\001\n\020LaneBoundaryType\022\t\n\001s\030"
      "\001 \001(\001\022F\n\005types\030\002 \003(\01627.glb_auto_percepti"
      "on_sensorfusion.LaneBoundaryType.Type\"x\n"
      "\004Type\022\013\n\007UNKNOWN\020\000\022\021\n\rDOTTED_YELLOW\020\001\022\020\n"
      "\014DOTTED_WHITE\020\002\022\020\n\014SOLID_YELLOW\020\003\022\017\n\013SOL"
      "ID_WHITE\020\004\022\021\n\rDOUBLE_YELLOW\020\005\022\010\n\004CURB\020\006\""
      "(\n\005Point\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001("
      "\001\"\234\006\n\022PerceptionObstacle\022\n\n\002id\030\001 \001(\005\0229\n\010"
      "position\030\002 \001(\0132\'.glb_auto_perception_sen"
      "sorfusion.Point\022\r\n\005theta\030\003 \001(\001\0229\n\010veloci"
      "ty\030\004 \001(\0132\'.glb_auto_perception_sensorfus"
      "ion.Point\022\016\n\006length\030\005 \001(\001\022\r\n\005width\030\006 \001(\001"
      "\022\016\n\006height\030\007 \001(\001\022>\n\rpolygon_point\030\010 \003(\0132"
      "\'.glb_auto_perception_sensorfusion.Point"
      "\022\025\n\rtracking_time\030\t \001(\001\022G\n\004type\030\n \001(\01629."
      "glb_auto_perception_sensorfusion.Percept"
      "ionObstacle.Type\022\021\n\ttimestamp\030\013 \001(\001\022\027\n\013p"
      "oint_cloud\030\014 \003(\001B\002\020\001\022\025\n\nconfidence\030\r \001(\001"
      ":\0011\022l\n\017confidence_type\030\016 \001(\0162C.glb_auto_"
      "perception_sensorfusion.PerceptionObstac"
      "le.ConfidenceType:\016CONFIDENCE_CNN\0226\n\005dro"
      "ps\030\017 \003(\0132\'.glb_auto_perception_sensorfus"
      "ion.Point\"i\n\004Type\022\013\n\007UNKNOWN\020\000\022\023\n\017UNKNOW"
      "N_MOVABLE\020\001\022\025\n\021UNKNOWN_UNMOVABLE\020\002\022\016\n\nPE"
      "DESTRIAN\020\003\022\013\n\007BICYCLE\020\004\022\013\n\007VEHICLE\020\005\"R\n\016"
      "ConfidenceType\022\026\n\022CONFIDENCE_UNKNOWN\020\000\022\022"
      "\n\016CONFIDENCE_CNN\020\001\022\024\n\020CONFIDENCE_RADAR\020\002"
      "\"6\n\010CIPVInfo\022\017\n\007cipv_id\030\001 \001(\005\022\031\n\021potenti"
      "al_cipv_id\030\002 \003(\005\"\251\002\n\nLaneMarker\022J\n\tlane_"
      "type\030\001 \001(\01627.glb_auto_perception_sensorf"
      "usion.LaneBoundaryType.Type\022\017\n\007quality\030\002"
      " \001(\001\022\024\n\014model_degree\030\003 \001(\005\022\023\n\013c0_positio"
      "n\030\004 \001(\001\022\030\n\020c1_heading_angle\030\005 \001(\001\022\024\n\014c2_"
      "curvature\030\006 \001(\001\022\037\n\027c3_curvature_derivati"
      "ve\030\007 \001(\001\022\022\n\nview_range\030\010 \001(\001\022\027\n\017longitud"
      "e_start\030\t \001(\001\022\025\n\rlongitude_end\030\n \001(\001\"\271\002\n"
      "\013LaneMarkers\022F\n\020left_lane_marker\030\001 \001(\0132,"
      ".glb_auto_perception_sensorfusion.LaneMa"
      "rker\022G\n\021right_lane_marker\030\002 \001(\0132,.glb_au"
      "to_perception_sensorfusion.LaneMarker\022K\n"
      "\025next_left_lane_marker\030\003 \003(\0132,.glb_auto_"
      "perception_sensorfusion.LaneMarker\022L\n\026ne"
      "xt_right_lane_marker\030\004 \003(\0132,.glb_auto_pe"
      "rception_sensorfusion.LaneMarker\"\352\002\n\023Per"
      "ceptionObstacles\022Q\n\023perception_obstacle\030"
      "\001 \003(\01324.glb_auto_perception_sensorfusion"
      ".PerceptionObstacle\0228\n\006header\030\002 \001(\0132(.gl"
      "b_auto_perception_sensorfusion.Header\022C\n"
      "\nerror_code\030\003 \001(\0162+.glb_auto_perception_"
      "sensorfusion.ErrorCode:\002OK\022B\n\013lane_marke"
      "r\030\004 \001(\0132-.glb_auto_perception_sensorfusi"
      "on.LaneMarkers\022=\n\tcipv_info\030\005 \001(\0132*.glb_"
      "auto_perception_sensorfusion.CIPVInfo"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2197);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "perception_obstacle.proto", &protobuf_RegisterTypes);
  ::glb_auto_perception_sensorfusion::protobuf_error_5fcode_2eproto::AddDescriptors();
  ::glb_auto_perception_sensorfusion::protobuf_header_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_perception_5fobstacle_2eproto

const ::google::protobuf::EnumDescriptor* LaneBoundaryType_Type_descriptor() {
  protobuf_perception_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fobstacle_2eproto::file_level_enum_descriptors[0];
}
bool LaneBoundaryType_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LaneBoundaryType_Type LaneBoundaryType::UNKNOWN;
const LaneBoundaryType_Type LaneBoundaryType::DOTTED_YELLOW;
const LaneBoundaryType_Type LaneBoundaryType::DOTTED_WHITE;
const LaneBoundaryType_Type LaneBoundaryType::SOLID_YELLOW;
const LaneBoundaryType_Type LaneBoundaryType::SOLID_WHITE;
const LaneBoundaryType_Type LaneBoundaryType::DOUBLE_YELLOW;
const LaneBoundaryType_Type LaneBoundaryType::CURB;
const LaneBoundaryType_Type LaneBoundaryType::Type_MIN;
const LaneBoundaryType_Type LaneBoundaryType::Type_MAX;
const int LaneBoundaryType::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PerceptionObstacle_Type_descriptor() {
  protobuf_perception_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fobstacle_2eproto::file_level_enum_descriptors[1];
}
bool PerceptionObstacle_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PerceptionObstacle_Type PerceptionObstacle::UNKNOWN;
const PerceptionObstacle_Type PerceptionObstacle::UNKNOWN_MOVABLE;
const PerceptionObstacle_Type PerceptionObstacle::UNKNOWN_UNMOVABLE;
const PerceptionObstacle_Type PerceptionObstacle::PEDESTRIAN;
const PerceptionObstacle_Type PerceptionObstacle::BICYCLE;
const PerceptionObstacle_Type PerceptionObstacle::VEHICLE;
const PerceptionObstacle_Type PerceptionObstacle::Type_MIN;
const PerceptionObstacle_Type PerceptionObstacle::Type_MAX;
const int PerceptionObstacle::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PerceptionObstacle_ConfidenceType_descriptor() {
  protobuf_perception_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fobstacle_2eproto::file_level_enum_descriptors[2];
}
bool PerceptionObstacle_ConfidenceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PerceptionObstacle_ConfidenceType PerceptionObstacle::CONFIDENCE_UNKNOWN;
const PerceptionObstacle_ConfidenceType PerceptionObstacle::CONFIDENCE_CNN;
const PerceptionObstacle_ConfidenceType PerceptionObstacle::CONFIDENCE_RADAR;
const PerceptionObstacle_ConfidenceType PerceptionObstacle::ConfidenceType_MIN;
const PerceptionObstacle_ConfidenceType PerceptionObstacle::ConfidenceType_MAX;
const int PerceptionObstacle::ConfidenceType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneBoundaryType::kSFieldNumber;
const int LaneBoundaryType::kTypesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneBoundaryType::LaneBoundaryType()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_perception_5fobstacle_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:glb_auto_perception_sensorfusion.LaneBoundaryType)
}
LaneBoundaryType::LaneBoundaryType(const LaneBoundaryType& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      types_(from.types_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  s_ = from.s_;
  // @@protoc_insertion_point(copy_constructor:glb_auto_perception_sensorfusion.LaneBoundaryType)
}

void LaneBoundaryType::SharedCtor() {
  _cached_size_ = 0;
  s_ = 0;
}

LaneBoundaryType::~LaneBoundaryType() {
  // @@protoc_insertion_point(destructor:glb_auto_perception_sensorfusion.LaneBoundaryType)
  SharedDtor();
}

void LaneBoundaryType::SharedDtor() {
}

void LaneBoundaryType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LaneBoundaryType::descriptor() {
  protobuf_perception_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fobstacle_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LaneBoundaryType& LaneBoundaryType::default_instance() {
  protobuf_perception_5fobstacle_2eproto::InitDefaults();
  return *internal_default_instance();
}

LaneBoundaryType* LaneBoundaryType::New(::google::protobuf::Arena* arena) const {
  LaneBoundaryType* n = new LaneBoundaryType;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LaneBoundaryType::Clear() {
// @@protoc_insertion_point(message_clear_start:glb_auto_perception_sensorfusion.LaneBoundaryType)
  types_.Clear();
  s_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LaneBoundaryType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:glb_auto_perception_sensorfusion.LaneBoundaryType)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double s = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .glb_auto_perception_sensorfusion.LaneBoundaryType.Type types = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::glb_auto_perception_sensorfusion::LaneBoundaryType_Type_IsValid(value)) {
            add_types(static_cast< ::glb_auto_perception_sensorfusion::LaneBoundaryType_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 2,
                 ::glb_auto_perception_sensorfusion::LaneBoundaryType_Type_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_types())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:glb_auto_perception_sensorfusion.LaneBoundaryType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:glb_auto_perception_sensorfusion.LaneBoundaryType)
  return false;
#undef DO_
}

void LaneBoundaryType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:glb_auto_perception_sensorfusion.LaneBoundaryType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double s = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->s(), output);
  }

  // repeated .glb_auto_perception_sensorfusion.LaneBoundaryType.Type types = 2;
  for (int i = 0, n = this->types_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->types(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:glb_auto_perception_sensorfusion.LaneBoundaryType)
}

::google::protobuf::uint8* LaneBoundaryType::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:glb_auto_perception_sensorfusion.LaneBoundaryType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double s = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->s(), target);
  }

  // repeated .glb_auto_perception_sensorfusion.LaneBoundaryType.Type types = 2;
  target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
    2, this->types_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:glb_auto_perception_sensorfusion.LaneBoundaryType)
  return target;
}

size_t LaneBoundaryType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:glb_auto_perception_sensorfusion.LaneBoundaryType)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .glb_auto_perception_sensorfusion.LaneBoundaryType.Type types = 2;
  {
    size_t data_size = 0;
    unsigned int count = this->types_size();for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->types(i));
    }
    total_size += (1UL * count) + data_size;
  }

  // optional double s = 1;
  if (has_s()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LaneBoundaryType::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:glb_auto_perception_sensorfusion.LaneBoundaryType)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneBoundaryType* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaneBoundaryType>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:glb_auto_perception_sensorfusion.LaneBoundaryType)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:glb_auto_perception_sensorfusion.LaneBoundaryType)
    MergeFrom(*source);
  }
}

void LaneBoundaryType::MergeFrom(const LaneBoundaryType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:glb_auto_perception_sensorfusion.LaneBoundaryType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  types_.MergeFrom(from.types_);
  if (from.has_s()) {
    set_s(from.s());
  }
}

void LaneBoundaryType::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:glb_auto_perception_sensorfusion.LaneBoundaryType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneBoundaryType::CopyFrom(const LaneBoundaryType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:glb_auto_perception_sensorfusion.LaneBoundaryType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneBoundaryType::IsInitialized() const {
  return true;
}

void LaneBoundaryType::Swap(LaneBoundaryType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaneBoundaryType::InternalSwap(LaneBoundaryType* other) {
  types_.InternalSwap(&other->types_);
  std::swap(s_, other->s_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LaneBoundaryType::GetMetadata() const {
  protobuf_perception_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fobstacle_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LaneBoundaryType

// optional double s = 1;
bool LaneBoundaryType::has_s() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LaneBoundaryType::set_has_s() {
  _has_bits_[0] |= 0x00000001u;
}
void LaneBoundaryType::clear_has_s() {
  _has_bits_[0] &= ~0x00000001u;
}
void LaneBoundaryType::clear_s() {
  s_ = 0;
  clear_has_s();
}
double LaneBoundaryType::s() const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.LaneBoundaryType.s)
  return s_;
}
void LaneBoundaryType::set_s(double value) {
  set_has_s();
  s_ = value;
  // @@protoc_insertion_point(field_set:glb_auto_perception_sensorfusion.LaneBoundaryType.s)
}

// repeated .glb_auto_perception_sensorfusion.LaneBoundaryType.Type types = 2;
int LaneBoundaryType::types_size() const {
  return types_.size();
}
void LaneBoundaryType::clear_types() {
  types_.Clear();
}
::glb_auto_perception_sensorfusion::LaneBoundaryType_Type LaneBoundaryType::types(int index) const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.LaneBoundaryType.types)
  return static_cast< ::glb_auto_perception_sensorfusion::LaneBoundaryType_Type >(types_.Get(index));
}
void LaneBoundaryType::set_types(int index, ::glb_auto_perception_sensorfusion::LaneBoundaryType_Type value) {
  assert(::glb_auto_perception_sensorfusion::LaneBoundaryType_Type_IsValid(value));
  types_.Set(index, value);
  // @@protoc_insertion_point(field_set:glb_auto_perception_sensorfusion.LaneBoundaryType.types)
}
void LaneBoundaryType::add_types(::glb_auto_perception_sensorfusion::LaneBoundaryType_Type value) {
  assert(::glb_auto_perception_sensorfusion::LaneBoundaryType_Type_IsValid(value));
  types_.Add(value);
  // @@protoc_insertion_point(field_add:glb_auto_perception_sensorfusion.LaneBoundaryType.types)
}
const ::google::protobuf::RepeatedField<int>&
LaneBoundaryType::types() const {
  // @@protoc_insertion_point(field_list:glb_auto_perception_sensorfusion.LaneBoundaryType.types)
  return types_;
}
::google::protobuf::RepeatedField<int>*
LaneBoundaryType::mutable_types() {
  // @@protoc_insertion_point(field_mutable_list:glb_auto_perception_sensorfusion.LaneBoundaryType.types)
  return &types_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Point::kXFieldNumber;
const int Point::kYFieldNumber;
const int Point::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Point::Point()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_perception_5fobstacle_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:glb_auto_perception_sensorfusion.Point)
}
Point::Point(const Point& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:glb_auto_perception_sensorfusion.Point)
}

void Point::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&x_, 0, reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_) + sizeof(z_));
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:glb_auto_perception_sensorfusion.Point)
  SharedDtor();
}

void Point::SharedDtor() {
}

void Point::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Point::descriptor() {
  protobuf_perception_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fobstacle_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Point& Point::default_instance() {
  protobuf_perception_5fobstacle_2eproto::InitDefaults();
  return *internal_default_instance();
}

Point* Point::New(::google::protobuf::Arena* arena) const {
  Point* n = new Point;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:glb_auto_perception_sensorfusion.Point)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&x_, 0, reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_) + sizeof(z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:glb_auto_perception_sensorfusion.Point)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:glb_auto_perception_sensorfusion.Point)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:glb_auto_perception_sensorfusion.Point)
  return false;
#undef DO_
}

void Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:glb_auto_perception_sensorfusion.Point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // optional double z = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:glb_auto_perception_sensorfusion.Point)
}

::google::protobuf::uint8* Point::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:glb_auto_perception_sensorfusion.Point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // optional double y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // optional double z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:glb_auto_perception_sensorfusion.Point)
  return target;
}

size_t Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:glb_auto_perception_sensorfusion.Point)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional double x = 1;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // optional double y = 2;
    if (has_y()) {
      total_size += 1 + 8;
    }

    // optional double z = 3;
    if (has_z()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Point::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:glb_auto_perception_sensorfusion.Point)
  GOOGLE_DCHECK_NE(&from, this);
  const Point* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Point>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:glb_auto_perception_sensorfusion.Point)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:glb_auto_perception_sensorfusion.Point)
    MergeFrom(*source);
  }
}

void Point::MergeFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:glb_auto_perception_sensorfusion.Point)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_ = from.z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Point::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:glb_auto_perception_sensorfusion.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:glb_auto_perception_sensorfusion.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  return true;
}

void Point::Swap(Point* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Point::InternalSwap(Point* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Point::GetMetadata() const {
  protobuf_perception_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fobstacle_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Point

// optional double x = 1;
bool Point::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Point::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void Point::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void Point::clear_x() {
  x_ = 0;
  clear_has_x();
}
double Point::x() const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.Point.x)
  return x_;
}
void Point::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:glb_auto_perception_sensorfusion.Point.x)
}

// optional double y = 2;
bool Point::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Point::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void Point::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void Point::clear_y() {
  y_ = 0;
  clear_has_y();
}
double Point::y() const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.Point.y)
  return y_;
}
void Point::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:glb_auto_perception_sensorfusion.Point.y)
}

// optional double z = 3;
bool Point::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Point::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
void Point::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
void Point::clear_z() {
  z_ = 0;
  clear_has_z();
}
double Point::z() const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.Point.z)
  return z_;
}
void Point::set_z(double value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:glb_auto_perception_sensorfusion.Point.z)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PerceptionObstacle::kIdFieldNumber;
const int PerceptionObstacle::kPositionFieldNumber;
const int PerceptionObstacle::kThetaFieldNumber;
const int PerceptionObstacle::kVelocityFieldNumber;
const int PerceptionObstacle::kLengthFieldNumber;
const int PerceptionObstacle::kWidthFieldNumber;
const int PerceptionObstacle::kHeightFieldNumber;
const int PerceptionObstacle::kPolygonPointFieldNumber;
const int PerceptionObstacle::kTrackingTimeFieldNumber;
const int PerceptionObstacle::kTypeFieldNumber;
const int PerceptionObstacle::kTimestampFieldNumber;
const int PerceptionObstacle::kPointCloudFieldNumber;
const int PerceptionObstacle::kConfidenceFieldNumber;
const int PerceptionObstacle::kConfidenceTypeFieldNumber;
const int PerceptionObstacle::kDropsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PerceptionObstacle::PerceptionObstacle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_perception_5fobstacle_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:glb_auto_perception_sensorfusion.PerceptionObstacle)
}
PerceptionObstacle::PerceptionObstacle(const PerceptionObstacle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      polygon_point_(from.polygon_point_),
      point_cloud_(from.point_cloud_),
      drops_(from.drops_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position()) {
    position_ = new ::glb_auto_perception_sensorfusion::Point(*from.position_);
  } else {
    position_ = NULL;
  }
  if (from.has_velocity()) {
    velocity_ = new ::glb_auto_perception_sensorfusion::Point(*from.velocity_);
  } else {
    velocity_ = NULL;
  }
  ::memcpy(&theta_, &from.theta_,
    reinterpret_cast<char*>(&confidence_) -
    reinterpret_cast<char*>(&theta_) + sizeof(confidence_));
  // @@protoc_insertion_point(copy_constructor:glb_auto_perception_sensorfusion.PerceptionObstacle)
}

void PerceptionObstacle::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&position_, 0, reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&position_) + sizeof(timestamp_));
  confidence_type_ = 1;
  confidence_ = 1;
}

PerceptionObstacle::~PerceptionObstacle() {
  // @@protoc_insertion_point(destructor:glb_auto_perception_sensorfusion.PerceptionObstacle)
  SharedDtor();
}

void PerceptionObstacle::SharedDtor() {
  if (this != internal_default_instance()) {
    delete position_;
  }
  if (this != internal_default_instance()) {
    delete velocity_;
  }
}

void PerceptionObstacle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PerceptionObstacle::descriptor() {
  protobuf_perception_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fobstacle_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PerceptionObstacle& PerceptionObstacle::default_instance() {
  protobuf_perception_5fobstacle_2eproto::InitDefaults();
  return *internal_default_instance();
}

PerceptionObstacle* PerceptionObstacle::New(::google::protobuf::Arena* arena) const {
  PerceptionObstacle* n = new PerceptionObstacle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PerceptionObstacle::Clear() {
// @@protoc_insertion_point(message_clear_start:glb_auto_perception_sensorfusion.PerceptionObstacle)
  polygon_point_.Clear();
  point_cloud_.Clear();
  drops_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_position()) {
      GOOGLE_DCHECK(position_ != NULL);
      position_->::glb_auto_perception_sensorfusion::Point::Clear();
    }
    if (has_velocity()) {
      GOOGLE_DCHECK(velocity_ != NULL);
      velocity_->::glb_auto_perception_sensorfusion::Point::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 252u) {
    ::memset(&theta_, 0, reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&theta_) + sizeof(height_));
  }
  if (_has_bits_[8 / 32] & 3840u) {
    ::memset(&tracking_time_, 0, reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&tracking_time_) + sizeof(timestamp_));
    confidence_type_ = 1;
    confidence_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PerceptionObstacle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:glb_auto_perception_sensorfusion.PerceptionObstacle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .glb_auto_perception_sensorfusion.Point position = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double theta = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_theta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &theta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .glb_auto_perception_sensorfusion.Point velocity = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double length = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double width = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double height = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .glb_auto_perception_sensorfusion.Point polygon_point = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_polygon_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double tracking_time = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u)) {
          set_has_tracking_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tracking_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .glb_auto_perception_sensorfusion.PerceptionObstacle.Type type = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::glb_auto_perception_sensorfusion::PerceptionObstacle_Type_IsValid(value)) {
            set_type(static_cast< ::glb_auto_perception_sensorfusion::PerceptionObstacle_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double timestamp = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double point_cloud = 12 [packed = true];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_point_cloud())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(97u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 98u, input, this->mutable_point_cloud())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double confidence = 13 [default = 1];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u)) {
          set_has_confidence();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .glb_auto_perception_sensorfusion.PerceptionObstacle.ConfidenceType confidence_type = 14 [default = CONFIDENCE_CNN];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::glb_auto_perception_sensorfusion::PerceptionObstacle_ConfidenceType_IsValid(value)) {
            set_confidence_type(static_cast< ::glb_auto_perception_sensorfusion::PerceptionObstacle_ConfidenceType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(14, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .glb_auto_perception_sensorfusion.Point drops = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_drops()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:glb_auto_perception_sensorfusion.PerceptionObstacle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:glb_auto_perception_sensorfusion.PerceptionObstacle)
  return false;
#undef DO_
}

void PerceptionObstacle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:glb_auto_perception_sensorfusion.PerceptionObstacle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional .glb_auto_perception_sensorfusion.Point position = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->position_, output);
  }

  // optional double theta = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->theta(), output);
  }

  // optional .glb_auto_perception_sensorfusion.Point velocity = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->velocity_, output);
  }

  // optional double length = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->length(), output);
  }

  // optional double width = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->width(), output);
  }

  // optional double height = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->height(), output);
  }

  // repeated .glb_auto_perception_sensorfusion.Point polygon_point = 8;
  for (unsigned int i = 0, n = this->polygon_point_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->polygon_point(i), output);
  }

  // optional double tracking_time = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->tracking_time(), output);
  }

  // optional .glb_auto_perception_sensorfusion.PerceptionObstacle.Type type = 10;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->type(), output);
  }

  // optional double timestamp = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->timestamp(), output);
  }

  // repeated double point_cloud = 12 [packed = true];
  if (this->point_cloud_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(12, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_point_cloud_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->point_cloud().data(), this->point_cloud_size(), output);
  }

  // optional double confidence = 13 [default = 1];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->confidence(), output);
  }

  // optional .glb_auto_perception_sensorfusion.PerceptionObstacle.ConfidenceType confidence_type = 14 [default = CONFIDENCE_CNN];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->confidence_type(), output);
  }

  // repeated .glb_auto_perception_sensorfusion.Point drops = 15;
  for (unsigned int i = 0, n = this->drops_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->drops(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:glb_auto_perception_sensorfusion.PerceptionObstacle)
}

::google::protobuf::uint8* PerceptionObstacle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:glb_auto_perception_sensorfusion.PerceptionObstacle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional .glb_auto_perception_sensorfusion.Point position = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->position_, deterministic, target);
  }

  // optional double theta = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->theta(), target);
  }

  // optional .glb_auto_perception_sensorfusion.Point velocity = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->velocity_, deterministic, target);
  }

  // optional double length = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->length(), target);
  }

  // optional double width = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->width(), target);
  }

  // optional double height = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->height(), target);
  }

  // repeated .glb_auto_perception_sensorfusion.Point polygon_point = 8;
  for (unsigned int i = 0, n = this->polygon_point_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->polygon_point(i), deterministic, target);
  }

  // optional double tracking_time = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->tracking_time(), target);
  }

  // optional .glb_auto_perception_sensorfusion.PerceptionObstacle.Type type = 10;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->type(), target);
  }

  // optional double timestamp = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->timestamp(), target);
  }

  // repeated double point_cloud = 12 [packed = true];
  if (this->point_cloud_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      12,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _point_cloud_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->point_cloud_, target);
  }

  // optional double confidence = 13 [default = 1];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->confidence(), target);
  }

  // optional .glb_auto_perception_sensorfusion.PerceptionObstacle.ConfidenceType confidence_type = 14 [default = CONFIDENCE_CNN];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->confidence_type(), target);
  }

  // repeated .glb_auto_perception_sensorfusion.Point drops = 15;
  for (unsigned int i = 0, n = this->drops_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, this->drops(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:glb_auto_perception_sensorfusion.PerceptionObstacle)
  return target;
}

size_t PerceptionObstacle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:glb_auto_perception_sensorfusion.PerceptionObstacle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .glb_auto_perception_sensorfusion.Point polygon_point = 8;
  {
    unsigned int count = this->polygon_point_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->polygon_point(i));
    }
  }

  // repeated double point_cloud = 12 [packed = true];
  {
    unsigned int count = this->point_cloud_size();
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _point_cloud_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .glb_auto_perception_sensorfusion.Point drops = 15;
  {
    unsigned int count = this->drops_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->drops(i));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional .glb_auto_perception_sensorfusion.Point position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->position_);
    }

    // optional .glb_auto_perception_sensorfusion.Point velocity = 4;
    if (has_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->velocity_);
    }

    // optional double theta = 3;
    if (has_theta()) {
      total_size += 1 + 8;
    }

    // optional double length = 5;
    if (has_length()) {
      total_size += 1 + 8;
    }

    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional .glb_auto_perception_sensorfusion.PerceptionObstacle.Type type = 10;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional double width = 6;
    if (has_width()) {
      total_size += 1 + 8;
    }

    // optional double height = 7;
    if (has_height()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional double tracking_time = 9;
    if (has_tracking_time()) {
      total_size += 1 + 8;
    }

    // optional double timestamp = 11;
    if (has_timestamp()) {
      total_size += 1 + 8;
    }

    // optional .glb_auto_perception_sensorfusion.PerceptionObstacle.ConfidenceType confidence_type = 14 [default = CONFIDENCE_CNN];
    if (has_confidence_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->confidence_type());
    }

    // optional double confidence = 13 [default = 1];
    if (has_confidence()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PerceptionObstacle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:glb_auto_perception_sensorfusion.PerceptionObstacle)
  GOOGLE_DCHECK_NE(&from, this);
  const PerceptionObstacle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PerceptionObstacle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:glb_auto_perception_sensorfusion.PerceptionObstacle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:glb_auto_perception_sensorfusion.PerceptionObstacle)
    MergeFrom(*source);
  }
}

void PerceptionObstacle::MergeFrom(const PerceptionObstacle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:glb_auto_perception_sensorfusion.PerceptionObstacle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  polygon_point_.MergeFrom(from.polygon_point_);
  point_cloud_.MergeFrom(from.point_cloud_);
  drops_.MergeFrom(from.drops_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_position()->::glb_auto_perception_sensorfusion::Point::MergeFrom(from.position());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_velocity()->::glb_auto_perception_sensorfusion::Point::MergeFrom(from.velocity());
    }
    if (cached_has_bits & 0x00000004u) {
      theta_ = from.theta_;
    }
    if (cached_has_bits & 0x00000008u) {
      length_ = from.length_;
    }
    if (cached_has_bits & 0x00000010u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000020u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000040u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000080u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      tracking_time_ = from.tracking_time_;
    }
    if (cached_has_bits & 0x00000200u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000400u) {
      confidence_type_ = from.confidence_type_;
    }
    if (cached_has_bits & 0x00000800u) {
      confidence_ = from.confidence_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PerceptionObstacle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:glb_auto_perception_sensorfusion.PerceptionObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PerceptionObstacle::CopyFrom(const PerceptionObstacle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:glb_auto_perception_sensorfusion.PerceptionObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerceptionObstacle::IsInitialized() const {
  return true;
}

void PerceptionObstacle::Swap(PerceptionObstacle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PerceptionObstacle::InternalSwap(PerceptionObstacle* other) {
  polygon_point_.InternalSwap(&other->polygon_point_);
  point_cloud_.InternalSwap(&other->point_cloud_);
  drops_.InternalSwap(&other->drops_);
  std::swap(position_, other->position_);
  std::swap(velocity_, other->velocity_);
  std::swap(theta_, other->theta_);
  std::swap(length_, other->length_);
  std::swap(id_, other->id_);
  std::swap(type_, other->type_);
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  std::swap(tracking_time_, other->tracking_time_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(confidence_type_, other->confidence_type_);
  std::swap(confidence_, other->confidence_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PerceptionObstacle::GetMetadata() const {
  protobuf_perception_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fobstacle_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PerceptionObstacle

// optional int32 id = 1;
bool PerceptionObstacle::has_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PerceptionObstacle::set_has_id() {
  _has_bits_[0] |= 0x00000010u;
}
void PerceptionObstacle::clear_has_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void PerceptionObstacle::clear_id() {
  id_ = 0;
  clear_has_id();
}
::google::protobuf::int32 PerceptionObstacle::id() const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.PerceptionObstacle.id)
  return id_;
}
void PerceptionObstacle::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:glb_auto_perception_sensorfusion.PerceptionObstacle.id)
}

// optional .glb_auto_perception_sensorfusion.Point position = 2;
bool PerceptionObstacle::has_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PerceptionObstacle::set_has_position() {
  _has_bits_[0] |= 0x00000001u;
}
void PerceptionObstacle::clear_has_position() {
  _has_bits_[0] &= ~0x00000001u;
}
void PerceptionObstacle::clear_position() {
  if (position_ != NULL) position_->::glb_auto_perception_sensorfusion::Point::Clear();
  clear_has_position();
}
const ::glb_auto_perception_sensorfusion::Point& PerceptionObstacle::position() const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.PerceptionObstacle.position)
  return position_ != NULL ? *position_
                         : *::glb_auto_perception_sensorfusion::Point::internal_default_instance();
}
::glb_auto_perception_sensorfusion::Point* PerceptionObstacle::mutable_position() {
  set_has_position();
  if (position_ == NULL) {
    position_ = new ::glb_auto_perception_sensorfusion::Point;
  }
  // @@protoc_insertion_point(field_mutable:glb_auto_perception_sensorfusion.PerceptionObstacle.position)
  return position_;
}
::glb_auto_perception_sensorfusion::Point* PerceptionObstacle::release_position() {
  // @@protoc_insertion_point(field_release:glb_auto_perception_sensorfusion.PerceptionObstacle.position)
  clear_has_position();
  ::glb_auto_perception_sensorfusion::Point* temp = position_;
  position_ = NULL;
  return temp;
}
void PerceptionObstacle::set_allocated_position(::glb_auto_perception_sensorfusion::Point* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:glb_auto_perception_sensorfusion.PerceptionObstacle.position)
}

// optional double theta = 3;
bool PerceptionObstacle::has_theta() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PerceptionObstacle::set_has_theta() {
  _has_bits_[0] |= 0x00000004u;
}
void PerceptionObstacle::clear_has_theta() {
  _has_bits_[0] &= ~0x00000004u;
}
void PerceptionObstacle::clear_theta() {
  theta_ = 0;
  clear_has_theta();
}
double PerceptionObstacle::theta() const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.PerceptionObstacle.theta)
  return theta_;
}
void PerceptionObstacle::set_theta(double value) {
  set_has_theta();
  theta_ = value;
  // @@protoc_insertion_point(field_set:glb_auto_perception_sensorfusion.PerceptionObstacle.theta)
}

// optional .glb_auto_perception_sensorfusion.Point velocity = 4;
bool PerceptionObstacle::has_velocity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PerceptionObstacle::set_has_velocity() {
  _has_bits_[0] |= 0x00000002u;
}
void PerceptionObstacle::clear_has_velocity() {
  _has_bits_[0] &= ~0x00000002u;
}
void PerceptionObstacle::clear_velocity() {
  if (velocity_ != NULL) velocity_->::glb_auto_perception_sensorfusion::Point::Clear();
  clear_has_velocity();
}
const ::glb_auto_perception_sensorfusion::Point& PerceptionObstacle::velocity() const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.PerceptionObstacle.velocity)
  return velocity_ != NULL ? *velocity_
                         : *::glb_auto_perception_sensorfusion::Point::internal_default_instance();
}
::glb_auto_perception_sensorfusion::Point* PerceptionObstacle::mutable_velocity() {
  set_has_velocity();
  if (velocity_ == NULL) {
    velocity_ = new ::glb_auto_perception_sensorfusion::Point;
  }
  // @@protoc_insertion_point(field_mutable:glb_auto_perception_sensorfusion.PerceptionObstacle.velocity)
  return velocity_;
}
::glb_auto_perception_sensorfusion::Point* PerceptionObstacle::release_velocity() {
  // @@protoc_insertion_point(field_release:glb_auto_perception_sensorfusion.PerceptionObstacle.velocity)
  clear_has_velocity();
  ::glb_auto_perception_sensorfusion::Point* temp = velocity_;
  velocity_ = NULL;
  return temp;
}
void PerceptionObstacle::set_allocated_velocity(::glb_auto_perception_sensorfusion::Point* velocity) {
  delete velocity_;
  velocity_ = velocity;
  if (velocity) {
    set_has_velocity();
  } else {
    clear_has_velocity();
  }
  // @@protoc_insertion_point(field_set_allocated:glb_auto_perception_sensorfusion.PerceptionObstacle.velocity)
}

// optional double length = 5;
bool PerceptionObstacle::has_length() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PerceptionObstacle::set_has_length() {
  _has_bits_[0] |= 0x00000008u;
}
void PerceptionObstacle::clear_has_length() {
  _has_bits_[0] &= ~0x00000008u;
}
void PerceptionObstacle::clear_length() {
  length_ = 0;
  clear_has_length();
}
double PerceptionObstacle::length() const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.PerceptionObstacle.length)
  return length_;
}
void PerceptionObstacle::set_length(double value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:glb_auto_perception_sensorfusion.PerceptionObstacle.length)
}

// optional double width = 6;
bool PerceptionObstacle::has_width() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PerceptionObstacle::set_has_width() {
  _has_bits_[0] |= 0x00000040u;
}
void PerceptionObstacle::clear_has_width() {
  _has_bits_[0] &= ~0x00000040u;
}
void PerceptionObstacle::clear_width() {
  width_ = 0;
  clear_has_width();
}
double PerceptionObstacle::width() const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.PerceptionObstacle.width)
  return width_;
}
void PerceptionObstacle::set_width(double value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:glb_auto_perception_sensorfusion.PerceptionObstacle.width)
}

// optional double height = 7;
bool PerceptionObstacle::has_height() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void PerceptionObstacle::set_has_height() {
  _has_bits_[0] |= 0x00000080u;
}
void PerceptionObstacle::clear_has_height() {
  _has_bits_[0] &= ~0x00000080u;
}
void PerceptionObstacle::clear_height() {
  height_ = 0;
  clear_has_height();
}
double PerceptionObstacle::height() const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.PerceptionObstacle.height)
  return height_;
}
void PerceptionObstacle::set_height(double value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:glb_auto_perception_sensorfusion.PerceptionObstacle.height)
}

// repeated .glb_auto_perception_sensorfusion.Point polygon_point = 8;
int PerceptionObstacle::polygon_point_size() const {
  return polygon_point_.size();
}
void PerceptionObstacle::clear_polygon_point() {
  polygon_point_.Clear();
}
const ::glb_auto_perception_sensorfusion::Point& PerceptionObstacle::polygon_point(int index) const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.PerceptionObstacle.polygon_point)
  return polygon_point_.Get(index);
}
::glb_auto_perception_sensorfusion::Point* PerceptionObstacle::mutable_polygon_point(int index) {
  // @@protoc_insertion_point(field_mutable:glb_auto_perception_sensorfusion.PerceptionObstacle.polygon_point)
  return polygon_point_.Mutable(index);
}
::glb_auto_perception_sensorfusion::Point* PerceptionObstacle::add_polygon_point() {
  // @@protoc_insertion_point(field_add:glb_auto_perception_sensorfusion.PerceptionObstacle.polygon_point)
  return polygon_point_.Add();
}
::google::protobuf::RepeatedPtrField< ::glb_auto_perception_sensorfusion::Point >*
PerceptionObstacle::mutable_polygon_point() {
  // @@protoc_insertion_point(field_mutable_list:glb_auto_perception_sensorfusion.PerceptionObstacle.polygon_point)
  return &polygon_point_;
}
const ::google::protobuf::RepeatedPtrField< ::glb_auto_perception_sensorfusion::Point >&
PerceptionObstacle::polygon_point() const {
  // @@protoc_insertion_point(field_list:glb_auto_perception_sensorfusion.PerceptionObstacle.polygon_point)
  return polygon_point_;
}

// optional double tracking_time = 9;
bool PerceptionObstacle::has_tracking_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void PerceptionObstacle::set_has_tracking_time() {
  _has_bits_[0] |= 0x00000100u;
}
void PerceptionObstacle::clear_has_tracking_time() {
  _has_bits_[0] &= ~0x00000100u;
}
void PerceptionObstacle::clear_tracking_time() {
  tracking_time_ = 0;
  clear_has_tracking_time();
}
double PerceptionObstacle::tracking_time() const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.PerceptionObstacle.tracking_time)
  return tracking_time_;
}
void PerceptionObstacle::set_tracking_time(double value) {
  set_has_tracking_time();
  tracking_time_ = value;
  // @@protoc_insertion_point(field_set:glb_auto_perception_sensorfusion.PerceptionObstacle.tracking_time)
}

// optional .glb_auto_perception_sensorfusion.PerceptionObstacle.Type type = 10;
bool PerceptionObstacle::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PerceptionObstacle::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
void PerceptionObstacle::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
void PerceptionObstacle::clear_type() {
  type_ = 0;
  clear_has_type();
}
::glb_auto_perception_sensorfusion::PerceptionObstacle_Type PerceptionObstacle::type() const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.PerceptionObstacle.type)
  return static_cast< ::glb_auto_perception_sensorfusion::PerceptionObstacle_Type >(type_);
}
void PerceptionObstacle::set_type(::glb_auto_perception_sensorfusion::PerceptionObstacle_Type value) {
  assert(::glb_auto_perception_sensorfusion::PerceptionObstacle_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:glb_auto_perception_sensorfusion.PerceptionObstacle.type)
}

// optional double timestamp = 11;
bool PerceptionObstacle::has_timestamp() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void PerceptionObstacle::set_has_timestamp() {
  _has_bits_[0] |= 0x00000200u;
}
void PerceptionObstacle::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000200u;
}
void PerceptionObstacle::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
double PerceptionObstacle::timestamp() const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.PerceptionObstacle.timestamp)
  return timestamp_;
}
void PerceptionObstacle::set_timestamp(double value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:glb_auto_perception_sensorfusion.PerceptionObstacle.timestamp)
}

// repeated double point_cloud = 12 [packed = true];
int PerceptionObstacle::point_cloud_size() const {
  return point_cloud_.size();
}
void PerceptionObstacle::clear_point_cloud() {
  point_cloud_.Clear();
}
double PerceptionObstacle::point_cloud(int index) const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.PerceptionObstacle.point_cloud)
  return point_cloud_.Get(index);
}
void PerceptionObstacle::set_point_cloud(int index, double value) {
  point_cloud_.Set(index, value);
  // @@protoc_insertion_point(field_set:glb_auto_perception_sensorfusion.PerceptionObstacle.point_cloud)
}
void PerceptionObstacle::add_point_cloud(double value) {
  point_cloud_.Add(value);
  // @@protoc_insertion_point(field_add:glb_auto_perception_sensorfusion.PerceptionObstacle.point_cloud)
}
const ::google::protobuf::RepeatedField< double >&
PerceptionObstacle::point_cloud() const {
  // @@protoc_insertion_point(field_list:glb_auto_perception_sensorfusion.PerceptionObstacle.point_cloud)
  return point_cloud_;
}
::google::protobuf::RepeatedField< double >*
PerceptionObstacle::mutable_point_cloud() {
  // @@protoc_insertion_point(field_mutable_list:glb_auto_perception_sensorfusion.PerceptionObstacle.point_cloud)
  return &point_cloud_;
}

// optional double confidence = 13 [default = 1];
bool PerceptionObstacle::has_confidence() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void PerceptionObstacle::set_has_confidence() {
  _has_bits_[0] |= 0x00000800u;
}
void PerceptionObstacle::clear_has_confidence() {
  _has_bits_[0] &= ~0x00000800u;
}
void PerceptionObstacle::clear_confidence() {
  confidence_ = 1;
  clear_has_confidence();
}
double PerceptionObstacle::confidence() const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.PerceptionObstacle.confidence)
  return confidence_;
}
void PerceptionObstacle::set_confidence(double value) {
  set_has_confidence();
  confidence_ = value;
  // @@protoc_insertion_point(field_set:glb_auto_perception_sensorfusion.PerceptionObstacle.confidence)
}

// optional .glb_auto_perception_sensorfusion.PerceptionObstacle.ConfidenceType confidence_type = 14 [default = CONFIDENCE_CNN];
bool PerceptionObstacle::has_confidence_type() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void PerceptionObstacle::set_has_confidence_type() {
  _has_bits_[0] |= 0x00000400u;
}
void PerceptionObstacle::clear_has_confidence_type() {
  _has_bits_[0] &= ~0x00000400u;
}
void PerceptionObstacle::clear_confidence_type() {
  confidence_type_ = 1;
  clear_has_confidence_type();
}
::glb_auto_perception_sensorfusion::PerceptionObstacle_ConfidenceType PerceptionObstacle::confidence_type() const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.PerceptionObstacle.confidence_type)
  return static_cast< ::glb_auto_perception_sensorfusion::PerceptionObstacle_ConfidenceType >(confidence_type_);
}
void PerceptionObstacle::set_confidence_type(::glb_auto_perception_sensorfusion::PerceptionObstacle_ConfidenceType value) {
  assert(::glb_auto_perception_sensorfusion::PerceptionObstacle_ConfidenceType_IsValid(value));
  set_has_confidence_type();
  confidence_type_ = value;
  // @@protoc_insertion_point(field_set:glb_auto_perception_sensorfusion.PerceptionObstacle.confidence_type)
}

// repeated .glb_auto_perception_sensorfusion.Point drops = 15;
int PerceptionObstacle::drops_size() const {
  return drops_.size();
}
void PerceptionObstacle::clear_drops() {
  drops_.Clear();
}
const ::glb_auto_perception_sensorfusion::Point& PerceptionObstacle::drops(int index) const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.PerceptionObstacle.drops)
  return drops_.Get(index);
}
::glb_auto_perception_sensorfusion::Point* PerceptionObstacle::mutable_drops(int index) {
  // @@protoc_insertion_point(field_mutable:glb_auto_perception_sensorfusion.PerceptionObstacle.drops)
  return drops_.Mutable(index);
}
::glb_auto_perception_sensorfusion::Point* PerceptionObstacle::add_drops() {
  // @@protoc_insertion_point(field_add:glb_auto_perception_sensorfusion.PerceptionObstacle.drops)
  return drops_.Add();
}
::google::protobuf::RepeatedPtrField< ::glb_auto_perception_sensorfusion::Point >*
PerceptionObstacle::mutable_drops() {
  // @@protoc_insertion_point(field_mutable_list:glb_auto_perception_sensorfusion.PerceptionObstacle.drops)
  return &drops_;
}
const ::google::protobuf::RepeatedPtrField< ::glb_auto_perception_sensorfusion::Point >&
PerceptionObstacle::drops() const {
  // @@protoc_insertion_point(field_list:glb_auto_perception_sensorfusion.PerceptionObstacle.drops)
  return drops_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CIPVInfo::kCipvIdFieldNumber;
const int CIPVInfo::kPotentialCipvIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CIPVInfo::CIPVInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_perception_5fobstacle_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:glb_auto_perception_sensorfusion.CIPVInfo)
}
CIPVInfo::CIPVInfo(const CIPVInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      potential_cipv_id_(from.potential_cipv_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cipv_id_ = from.cipv_id_;
  // @@protoc_insertion_point(copy_constructor:glb_auto_perception_sensorfusion.CIPVInfo)
}

void CIPVInfo::SharedCtor() {
  _cached_size_ = 0;
  cipv_id_ = 0;
}

CIPVInfo::~CIPVInfo() {
  // @@protoc_insertion_point(destructor:glb_auto_perception_sensorfusion.CIPVInfo)
  SharedDtor();
}

void CIPVInfo::SharedDtor() {
}

void CIPVInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CIPVInfo::descriptor() {
  protobuf_perception_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fobstacle_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CIPVInfo& CIPVInfo::default_instance() {
  protobuf_perception_5fobstacle_2eproto::InitDefaults();
  return *internal_default_instance();
}

CIPVInfo* CIPVInfo::New(::google::protobuf::Arena* arena) const {
  CIPVInfo* n = new CIPVInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CIPVInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:glb_auto_perception_sensorfusion.CIPVInfo)
  potential_cipv_id_.Clear();
  cipv_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CIPVInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:glb_auto_perception_sensorfusion.CIPVInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cipv_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_cipv_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cipv_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 potential_cipv_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16u, input, this->mutable_potential_cipv_id())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_potential_cipv_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:glb_auto_perception_sensorfusion.CIPVInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:glb_auto_perception_sensorfusion.CIPVInfo)
  return false;
#undef DO_
}

void CIPVInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:glb_auto_perception_sensorfusion.CIPVInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 cipv_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cipv_id(), output);
  }

  // repeated int32 potential_cipv_id = 2;
  for (int i = 0, n = this->potential_cipv_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->potential_cipv_id(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:glb_auto_perception_sensorfusion.CIPVInfo)
}

::google::protobuf::uint8* CIPVInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:glb_auto_perception_sensorfusion.CIPVInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 cipv_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cipv_id(), target);
  }

  // repeated int32 potential_cipv_id = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(2, this->potential_cipv_id_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:glb_auto_perception_sensorfusion.CIPVInfo)
  return target;
}

size_t CIPVInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:glb_auto_perception_sensorfusion.CIPVInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated int32 potential_cipv_id = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->potential_cipv_id_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->potential_cipv_id_size());
    total_size += data_size;
  }

  // optional int32 cipv_id = 1;
  if (has_cipv_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cipv_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CIPVInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:glb_auto_perception_sensorfusion.CIPVInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CIPVInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CIPVInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:glb_auto_perception_sensorfusion.CIPVInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:glb_auto_perception_sensorfusion.CIPVInfo)
    MergeFrom(*source);
  }
}

void CIPVInfo::MergeFrom(const CIPVInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:glb_auto_perception_sensorfusion.CIPVInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  potential_cipv_id_.MergeFrom(from.potential_cipv_id_);
  if (from.has_cipv_id()) {
    set_cipv_id(from.cipv_id());
  }
}

void CIPVInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:glb_auto_perception_sensorfusion.CIPVInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CIPVInfo::CopyFrom(const CIPVInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:glb_auto_perception_sensorfusion.CIPVInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CIPVInfo::IsInitialized() const {
  return true;
}

void CIPVInfo::Swap(CIPVInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CIPVInfo::InternalSwap(CIPVInfo* other) {
  potential_cipv_id_.InternalSwap(&other->potential_cipv_id_);
  std::swap(cipv_id_, other->cipv_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CIPVInfo::GetMetadata() const {
  protobuf_perception_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fobstacle_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CIPVInfo

// optional int32 cipv_id = 1;
bool CIPVInfo::has_cipv_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CIPVInfo::set_has_cipv_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CIPVInfo::clear_has_cipv_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CIPVInfo::clear_cipv_id() {
  cipv_id_ = 0;
  clear_has_cipv_id();
}
::google::protobuf::int32 CIPVInfo::cipv_id() const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.CIPVInfo.cipv_id)
  return cipv_id_;
}
void CIPVInfo::set_cipv_id(::google::protobuf::int32 value) {
  set_has_cipv_id();
  cipv_id_ = value;
  // @@protoc_insertion_point(field_set:glb_auto_perception_sensorfusion.CIPVInfo.cipv_id)
}

// repeated int32 potential_cipv_id = 2;
int CIPVInfo::potential_cipv_id_size() const {
  return potential_cipv_id_.size();
}
void CIPVInfo::clear_potential_cipv_id() {
  potential_cipv_id_.Clear();
}
::google::protobuf::int32 CIPVInfo::potential_cipv_id(int index) const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.CIPVInfo.potential_cipv_id)
  return potential_cipv_id_.Get(index);
}
void CIPVInfo::set_potential_cipv_id(int index, ::google::protobuf::int32 value) {
  potential_cipv_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:glb_auto_perception_sensorfusion.CIPVInfo.potential_cipv_id)
}
void CIPVInfo::add_potential_cipv_id(::google::protobuf::int32 value) {
  potential_cipv_id_.Add(value);
  // @@protoc_insertion_point(field_add:glb_auto_perception_sensorfusion.CIPVInfo.potential_cipv_id)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CIPVInfo::potential_cipv_id() const {
  // @@protoc_insertion_point(field_list:glb_auto_perception_sensorfusion.CIPVInfo.potential_cipv_id)
  return potential_cipv_id_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CIPVInfo::mutable_potential_cipv_id() {
  // @@protoc_insertion_point(field_mutable_list:glb_auto_perception_sensorfusion.CIPVInfo.potential_cipv_id)
  return &potential_cipv_id_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneMarker::kLaneTypeFieldNumber;
const int LaneMarker::kQualityFieldNumber;
const int LaneMarker::kModelDegreeFieldNumber;
const int LaneMarker::kC0PositionFieldNumber;
const int LaneMarker::kC1HeadingAngleFieldNumber;
const int LaneMarker::kC2CurvatureFieldNumber;
const int LaneMarker::kC3CurvatureDerivativeFieldNumber;
const int LaneMarker::kViewRangeFieldNumber;
const int LaneMarker::kLongitudeStartFieldNumber;
const int LaneMarker::kLongitudeEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneMarker::LaneMarker()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_perception_5fobstacle_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:glb_auto_perception_sensorfusion.LaneMarker)
}
LaneMarker::LaneMarker(const LaneMarker& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&quality_, &from.quality_,
    reinterpret_cast<char*>(&longitude_end_) -
    reinterpret_cast<char*>(&quality_) + sizeof(longitude_end_));
  // @@protoc_insertion_point(copy_constructor:glb_auto_perception_sensorfusion.LaneMarker)
}

void LaneMarker::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&quality_, 0, reinterpret_cast<char*>(&longitude_end_) -
    reinterpret_cast<char*>(&quality_) + sizeof(longitude_end_));
}

LaneMarker::~LaneMarker() {
  // @@protoc_insertion_point(destructor:glb_auto_perception_sensorfusion.LaneMarker)
  SharedDtor();
}

void LaneMarker::SharedDtor() {
}

void LaneMarker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LaneMarker::descriptor() {
  protobuf_perception_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fobstacle_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LaneMarker& LaneMarker::default_instance() {
  protobuf_perception_5fobstacle_2eproto::InitDefaults();
  return *internal_default_instance();
}

LaneMarker* LaneMarker::New(::google::protobuf::Arena* arena) const {
  LaneMarker* n = new LaneMarker;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LaneMarker::Clear() {
// @@protoc_insertion_point(message_clear_start:glb_auto_perception_sensorfusion.LaneMarker)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&quality_, 0, reinterpret_cast<char*>(&view_range_) -
      reinterpret_cast<char*>(&quality_) + sizeof(view_range_));
  }
  if (_has_bits_[8 / 32] & 768u) {
    ::memset(&longitude_start_, 0, reinterpret_cast<char*>(&longitude_end_) -
      reinterpret_cast<char*>(&longitude_start_) + sizeof(longitude_end_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LaneMarker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:glb_auto_perception_sensorfusion.LaneMarker)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .glb_auto_perception_sensorfusion.LaneBoundaryType.Type lane_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::glb_auto_perception_sensorfusion::LaneBoundaryType_Type_IsValid(value)) {
            set_lane_type(static_cast< ::glb_auto_perception_sensorfusion::LaneBoundaryType_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double quality = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_quality();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &quality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 model_degree = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_model_degree();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &model_degree_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double c0_position = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_c0_position();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &c0_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double c1_heading_angle = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_c1_heading_angle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &c1_heading_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double c2_curvature = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          set_has_c2_curvature();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &c2_curvature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double c3_curvature_derivative = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u)) {
          set_has_c3_curvature_derivative();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &c3_curvature_derivative_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double view_range = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u)) {
          set_has_view_range();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &view_range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double longitude_start = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u)) {
          set_has_longitude_start();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double longitude_end = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u)) {
          set_has_longitude_end();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:glb_auto_perception_sensorfusion.LaneMarker)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:glb_auto_perception_sensorfusion.LaneMarker)
  return false;
#undef DO_
}

void LaneMarker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:glb_auto_perception_sensorfusion.LaneMarker)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .glb_auto_perception_sensorfusion.LaneBoundaryType.Type lane_type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->lane_type(), output);
  }

  // optional double quality = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->quality(), output);
  }

  // optional int32 model_degree = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->model_degree(), output);
  }

  // optional double c0_position = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->c0_position(), output);
  }

  // optional double c1_heading_angle = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->c1_heading_angle(), output);
  }

  // optional double c2_curvature = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->c2_curvature(), output);
  }

  // optional double c3_curvature_derivative = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->c3_curvature_derivative(), output);
  }

  // optional double view_range = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->view_range(), output);
  }

  // optional double longitude_start = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->longitude_start(), output);
  }

  // optional double longitude_end = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->longitude_end(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:glb_auto_perception_sensorfusion.LaneMarker)
}

::google::protobuf::uint8* LaneMarker::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:glb_auto_perception_sensorfusion.LaneMarker)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .glb_auto_perception_sensorfusion.LaneBoundaryType.Type lane_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->lane_type(), target);
  }

  // optional double quality = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->quality(), target);
  }

  // optional int32 model_degree = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->model_degree(), target);
  }

  // optional double c0_position = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->c0_position(), target);
  }

  // optional double c1_heading_angle = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->c1_heading_angle(), target);
  }

  // optional double c2_curvature = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->c2_curvature(), target);
  }

  // optional double c3_curvature_derivative = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->c3_curvature_derivative(), target);
  }

  // optional double view_range = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->view_range(), target);
  }

  // optional double longitude_start = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->longitude_start(), target);
  }

  // optional double longitude_end = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->longitude_end(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:glb_auto_perception_sensorfusion.LaneMarker)
  return target;
}

size_t LaneMarker::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:glb_auto_perception_sensorfusion.LaneMarker)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional double quality = 2;
    if (has_quality()) {
      total_size += 1 + 8;
    }

    // optional .glb_auto_perception_sensorfusion.LaneBoundaryType.Type lane_type = 1;
    if (has_lane_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->lane_type());
    }

    // optional int32 model_degree = 3;
    if (has_model_degree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->model_degree());
    }

    // optional double c0_position = 4;
    if (has_c0_position()) {
      total_size += 1 + 8;
    }

    // optional double c1_heading_angle = 5;
    if (has_c1_heading_angle()) {
      total_size += 1 + 8;
    }

    // optional double c2_curvature = 6;
    if (has_c2_curvature()) {
      total_size += 1 + 8;
    }

    // optional double c3_curvature_derivative = 7;
    if (has_c3_curvature_derivative()) {
      total_size += 1 + 8;
    }

    // optional double view_range = 8;
    if (has_view_range()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional double longitude_start = 9;
    if (has_longitude_start()) {
      total_size += 1 + 8;
    }

    // optional double longitude_end = 10;
    if (has_longitude_end()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LaneMarker::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:glb_auto_perception_sensorfusion.LaneMarker)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneMarker* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaneMarker>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:glb_auto_perception_sensorfusion.LaneMarker)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:glb_auto_perception_sensorfusion.LaneMarker)
    MergeFrom(*source);
  }
}

void LaneMarker::MergeFrom(const LaneMarker& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:glb_auto_perception_sensorfusion.LaneMarker)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      quality_ = from.quality_;
    }
    if (cached_has_bits & 0x00000002u) {
      lane_type_ = from.lane_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      model_degree_ = from.model_degree_;
    }
    if (cached_has_bits & 0x00000008u) {
      c0_position_ = from.c0_position_;
    }
    if (cached_has_bits & 0x00000010u) {
      c1_heading_angle_ = from.c1_heading_angle_;
    }
    if (cached_has_bits & 0x00000020u) {
      c2_curvature_ = from.c2_curvature_;
    }
    if (cached_has_bits & 0x00000040u) {
      c3_curvature_derivative_ = from.c3_curvature_derivative_;
    }
    if (cached_has_bits & 0x00000080u) {
      view_range_ = from.view_range_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      longitude_start_ = from.longitude_start_;
    }
    if (cached_has_bits & 0x00000200u) {
      longitude_end_ = from.longitude_end_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LaneMarker::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:glb_auto_perception_sensorfusion.LaneMarker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneMarker::CopyFrom(const LaneMarker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:glb_auto_perception_sensorfusion.LaneMarker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneMarker::IsInitialized() const {
  return true;
}

void LaneMarker::Swap(LaneMarker* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaneMarker::InternalSwap(LaneMarker* other) {
  std::swap(quality_, other->quality_);
  std::swap(lane_type_, other->lane_type_);
  std::swap(model_degree_, other->model_degree_);
  std::swap(c0_position_, other->c0_position_);
  std::swap(c1_heading_angle_, other->c1_heading_angle_);
  std::swap(c2_curvature_, other->c2_curvature_);
  std::swap(c3_curvature_derivative_, other->c3_curvature_derivative_);
  std::swap(view_range_, other->view_range_);
  std::swap(longitude_start_, other->longitude_start_);
  std::swap(longitude_end_, other->longitude_end_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LaneMarker::GetMetadata() const {
  protobuf_perception_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fobstacle_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LaneMarker

// optional .glb_auto_perception_sensorfusion.LaneBoundaryType.Type lane_type = 1;
bool LaneMarker::has_lane_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LaneMarker::set_has_lane_type() {
  _has_bits_[0] |= 0x00000002u;
}
void LaneMarker::clear_has_lane_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void LaneMarker::clear_lane_type() {
  lane_type_ = 0;
  clear_has_lane_type();
}
::glb_auto_perception_sensorfusion::LaneBoundaryType_Type LaneMarker::lane_type() const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.LaneMarker.lane_type)
  return static_cast< ::glb_auto_perception_sensorfusion::LaneBoundaryType_Type >(lane_type_);
}
void LaneMarker::set_lane_type(::glb_auto_perception_sensorfusion::LaneBoundaryType_Type value) {
  assert(::glb_auto_perception_sensorfusion::LaneBoundaryType_Type_IsValid(value));
  set_has_lane_type();
  lane_type_ = value;
  // @@protoc_insertion_point(field_set:glb_auto_perception_sensorfusion.LaneMarker.lane_type)
}

// optional double quality = 2;
bool LaneMarker::has_quality() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LaneMarker::set_has_quality() {
  _has_bits_[0] |= 0x00000001u;
}
void LaneMarker::clear_has_quality() {
  _has_bits_[0] &= ~0x00000001u;
}
void LaneMarker::clear_quality() {
  quality_ = 0;
  clear_has_quality();
}
double LaneMarker::quality() const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.LaneMarker.quality)
  return quality_;
}
void LaneMarker::set_quality(double value) {
  set_has_quality();
  quality_ = value;
  // @@protoc_insertion_point(field_set:glb_auto_perception_sensorfusion.LaneMarker.quality)
}

// optional int32 model_degree = 3;
bool LaneMarker::has_model_degree() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LaneMarker::set_has_model_degree() {
  _has_bits_[0] |= 0x00000004u;
}
void LaneMarker::clear_has_model_degree() {
  _has_bits_[0] &= ~0x00000004u;
}
void LaneMarker::clear_model_degree() {
  model_degree_ = 0;
  clear_has_model_degree();
}
::google::protobuf::int32 LaneMarker::model_degree() const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.LaneMarker.model_degree)
  return model_degree_;
}
void LaneMarker::set_model_degree(::google::protobuf::int32 value) {
  set_has_model_degree();
  model_degree_ = value;
  // @@protoc_insertion_point(field_set:glb_auto_perception_sensorfusion.LaneMarker.model_degree)
}

// optional double c0_position = 4;
bool LaneMarker::has_c0_position() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LaneMarker::set_has_c0_position() {
  _has_bits_[0] |= 0x00000008u;
}
void LaneMarker::clear_has_c0_position() {
  _has_bits_[0] &= ~0x00000008u;
}
void LaneMarker::clear_c0_position() {
  c0_position_ = 0;
  clear_has_c0_position();
}
double LaneMarker::c0_position() const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.LaneMarker.c0_position)
  return c0_position_;
}
void LaneMarker::set_c0_position(double value) {
  set_has_c0_position();
  c0_position_ = value;
  // @@protoc_insertion_point(field_set:glb_auto_perception_sensorfusion.LaneMarker.c0_position)
}

// optional double c1_heading_angle = 5;
bool LaneMarker::has_c1_heading_angle() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LaneMarker::set_has_c1_heading_angle() {
  _has_bits_[0] |= 0x00000010u;
}
void LaneMarker::clear_has_c1_heading_angle() {
  _has_bits_[0] &= ~0x00000010u;
}
void LaneMarker::clear_c1_heading_angle() {
  c1_heading_angle_ = 0;
  clear_has_c1_heading_angle();
}
double LaneMarker::c1_heading_angle() const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.LaneMarker.c1_heading_angle)
  return c1_heading_angle_;
}
void LaneMarker::set_c1_heading_angle(double value) {
  set_has_c1_heading_angle();
  c1_heading_angle_ = value;
  // @@protoc_insertion_point(field_set:glb_auto_perception_sensorfusion.LaneMarker.c1_heading_angle)
}

// optional double c2_curvature = 6;
bool LaneMarker::has_c2_curvature() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void LaneMarker::set_has_c2_curvature() {
  _has_bits_[0] |= 0x00000020u;
}
void LaneMarker::clear_has_c2_curvature() {
  _has_bits_[0] &= ~0x00000020u;
}
void LaneMarker::clear_c2_curvature() {
  c2_curvature_ = 0;
  clear_has_c2_curvature();
}
double LaneMarker::c2_curvature() const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.LaneMarker.c2_curvature)
  return c2_curvature_;
}
void LaneMarker::set_c2_curvature(double value) {
  set_has_c2_curvature();
  c2_curvature_ = value;
  // @@protoc_insertion_point(field_set:glb_auto_perception_sensorfusion.LaneMarker.c2_curvature)
}

// optional double c3_curvature_derivative = 7;
bool LaneMarker::has_c3_curvature_derivative() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void LaneMarker::set_has_c3_curvature_derivative() {
  _has_bits_[0] |= 0x00000040u;
}
void LaneMarker::clear_has_c3_curvature_derivative() {
  _has_bits_[0] &= ~0x00000040u;
}
void LaneMarker::clear_c3_curvature_derivative() {
  c3_curvature_derivative_ = 0;
  clear_has_c3_curvature_derivative();
}
double LaneMarker::c3_curvature_derivative() const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.LaneMarker.c3_curvature_derivative)
  return c3_curvature_derivative_;
}
void LaneMarker::set_c3_curvature_derivative(double value) {
  set_has_c3_curvature_derivative();
  c3_curvature_derivative_ = value;
  // @@protoc_insertion_point(field_set:glb_auto_perception_sensorfusion.LaneMarker.c3_curvature_derivative)
}

// optional double view_range = 8;
bool LaneMarker::has_view_range() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void LaneMarker::set_has_view_range() {
  _has_bits_[0] |= 0x00000080u;
}
void LaneMarker::clear_has_view_range() {
  _has_bits_[0] &= ~0x00000080u;
}
void LaneMarker::clear_view_range() {
  view_range_ = 0;
  clear_has_view_range();
}
double LaneMarker::view_range() const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.LaneMarker.view_range)
  return view_range_;
}
void LaneMarker::set_view_range(double value) {
  set_has_view_range();
  view_range_ = value;
  // @@protoc_insertion_point(field_set:glb_auto_perception_sensorfusion.LaneMarker.view_range)
}

// optional double longitude_start = 9;
bool LaneMarker::has_longitude_start() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void LaneMarker::set_has_longitude_start() {
  _has_bits_[0] |= 0x00000100u;
}
void LaneMarker::clear_has_longitude_start() {
  _has_bits_[0] &= ~0x00000100u;
}
void LaneMarker::clear_longitude_start() {
  longitude_start_ = 0;
  clear_has_longitude_start();
}
double LaneMarker::longitude_start() const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.LaneMarker.longitude_start)
  return longitude_start_;
}
void LaneMarker::set_longitude_start(double value) {
  set_has_longitude_start();
  longitude_start_ = value;
  // @@protoc_insertion_point(field_set:glb_auto_perception_sensorfusion.LaneMarker.longitude_start)
}

// optional double longitude_end = 10;
bool LaneMarker::has_longitude_end() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void LaneMarker::set_has_longitude_end() {
  _has_bits_[0] |= 0x00000200u;
}
void LaneMarker::clear_has_longitude_end() {
  _has_bits_[0] &= ~0x00000200u;
}
void LaneMarker::clear_longitude_end() {
  longitude_end_ = 0;
  clear_has_longitude_end();
}
double LaneMarker::longitude_end() const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.LaneMarker.longitude_end)
  return longitude_end_;
}
void LaneMarker::set_longitude_end(double value) {
  set_has_longitude_end();
  longitude_end_ = value;
  // @@protoc_insertion_point(field_set:glb_auto_perception_sensorfusion.LaneMarker.longitude_end)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneMarkers::kLeftLaneMarkerFieldNumber;
const int LaneMarkers::kRightLaneMarkerFieldNumber;
const int LaneMarkers::kNextLeftLaneMarkerFieldNumber;
const int LaneMarkers::kNextRightLaneMarkerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneMarkers::LaneMarkers()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_perception_5fobstacle_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:glb_auto_perception_sensorfusion.LaneMarkers)
}
LaneMarkers::LaneMarkers(const LaneMarkers& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      next_left_lane_marker_(from.next_left_lane_marker_),
      next_right_lane_marker_(from.next_right_lane_marker_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_left_lane_marker()) {
    left_lane_marker_ = new ::glb_auto_perception_sensorfusion::LaneMarker(*from.left_lane_marker_);
  } else {
    left_lane_marker_ = NULL;
  }
  if (from.has_right_lane_marker()) {
    right_lane_marker_ = new ::glb_auto_perception_sensorfusion::LaneMarker(*from.right_lane_marker_);
  } else {
    right_lane_marker_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:glb_auto_perception_sensorfusion.LaneMarkers)
}

void LaneMarkers::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&left_lane_marker_, 0, reinterpret_cast<char*>(&right_lane_marker_) -
    reinterpret_cast<char*>(&left_lane_marker_) + sizeof(right_lane_marker_));
}

LaneMarkers::~LaneMarkers() {
  // @@protoc_insertion_point(destructor:glb_auto_perception_sensorfusion.LaneMarkers)
  SharedDtor();
}

void LaneMarkers::SharedDtor() {
  if (this != internal_default_instance()) {
    delete left_lane_marker_;
  }
  if (this != internal_default_instance()) {
    delete right_lane_marker_;
  }
}

void LaneMarkers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LaneMarkers::descriptor() {
  protobuf_perception_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fobstacle_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LaneMarkers& LaneMarkers::default_instance() {
  protobuf_perception_5fobstacle_2eproto::InitDefaults();
  return *internal_default_instance();
}

LaneMarkers* LaneMarkers::New(::google::protobuf::Arena* arena) const {
  LaneMarkers* n = new LaneMarkers;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LaneMarkers::Clear() {
// @@protoc_insertion_point(message_clear_start:glb_auto_perception_sensorfusion.LaneMarkers)
  next_left_lane_marker_.Clear();
  next_right_lane_marker_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_left_lane_marker()) {
      GOOGLE_DCHECK(left_lane_marker_ != NULL);
      left_lane_marker_->::glb_auto_perception_sensorfusion::LaneMarker::Clear();
    }
    if (has_right_lane_marker()) {
      GOOGLE_DCHECK(right_lane_marker_ != NULL);
      right_lane_marker_->::glb_auto_perception_sensorfusion::LaneMarker::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LaneMarkers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:glb_auto_perception_sensorfusion.LaneMarkers)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .glb_auto_perception_sensorfusion.LaneMarker left_lane_marker = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_left_lane_marker()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .glb_auto_perception_sensorfusion.LaneMarker right_lane_marker = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_right_lane_marker()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .glb_auto_perception_sensorfusion.LaneMarker next_left_lane_marker = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_next_left_lane_marker()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .glb_auto_perception_sensorfusion.LaneMarker next_right_lane_marker = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_next_right_lane_marker()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:glb_auto_perception_sensorfusion.LaneMarkers)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:glb_auto_perception_sensorfusion.LaneMarkers)
  return false;
#undef DO_
}

void LaneMarkers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:glb_auto_perception_sensorfusion.LaneMarkers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .glb_auto_perception_sensorfusion.LaneMarker left_lane_marker = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->left_lane_marker_, output);
  }

  // optional .glb_auto_perception_sensorfusion.LaneMarker right_lane_marker = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->right_lane_marker_, output);
  }

  // repeated .glb_auto_perception_sensorfusion.LaneMarker next_left_lane_marker = 3;
  for (unsigned int i = 0, n = this->next_left_lane_marker_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->next_left_lane_marker(i), output);
  }

  // repeated .glb_auto_perception_sensorfusion.LaneMarker next_right_lane_marker = 4;
  for (unsigned int i = 0, n = this->next_right_lane_marker_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->next_right_lane_marker(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:glb_auto_perception_sensorfusion.LaneMarkers)
}

::google::protobuf::uint8* LaneMarkers::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:glb_auto_perception_sensorfusion.LaneMarkers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .glb_auto_perception_sensorfusion.LaneMarker left_lane_marker = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->left_lane_marker_, deterministic, target);
  }

  // optional .glb_auto_perception_sensorfusion.LaneMarker right_lane_marker = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->right_lane_marker_, deterministic, target);
  }

  // repeated .glb_auto_perception_sensorfusion.LaneMarker next_left_lane_marker = 3;
  for (unsigned int i = 0, n = this->next_left_lane_marker_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->next_left_lane_marker(i), deterministic, target);
  }

  // repeated .glb_auto_perception_sensorfusion.LaneMarker next_right_lane_marker = 4;
  for (unsigned int i = 0, n = this->next_right_lane_marker_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->next_right_lane_marker(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:glb_auto_perception_sensorfusion.LaneMarkers)
  return target;
}

size_t LaneMarkers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:glb_auto_perception_sensorfusion.LaneMarkers)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .glb_auto_perception_sensorfusion.LaneMarker next_left_lane_marker = 3;
  {
    unsigned int count = this->next_left_lane_marker_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->next_left_lane_marker(i));
    }
  }

  // repeated .glb_auto_perception_sensorfusion.LaneMarker next_right_lane_marker = 4;
  {
    unsigned int count = this->next_right_lane_marker_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->next_right_lane_marker(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .glb_auto_perception_sensorfusion.LaneMarker left_lane_marker = 1;
    if (has_left_lane_marker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->left_lane_marker_);
    }

    // optional .glb_auto_perception_sensorfusion.LaneMarker right_lane_marker = 2;
    if (has_right_lane_marker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->right_lane_marker_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LaneMarkers::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:glb_auto_perception_sensorfusion.LaneMarkers)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneMarkers* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaneMarkers>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:glb_auto_perception_sensorfusion.LaneMarkers)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:glb_auto_perception_sensorfusion.LaneMarkers)
    MergeFrom(*source);
  }
}

void LaneMarkers::MergeFrom(const LaneMarkers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:glb_auto_perception_sensorfusion.LaneMarkers)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  next_left_lane_marker_.MergeFrom(from.next_left_lane_marker_);
  next_right_lane_marker_.MergeFrom(from.next_right_lane_marker_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_left_lane_marker()->::glb_auto_perception_sensorfusion::LaneMarker::MergeFrom(from.left_lane_marker());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_right_lane_marker()->::glb_auto_perception_sensorfusion::LaneMarker::MergeFrom(from.right_lane_marker());
    }
  }
}

void LaneMarkers::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:glb_auto_perception_sensorfusion.LaneMarkers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneMarkers::CopyFrom(const LaneMarkers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:glb_auto_perception_sensorfusion.LaneMarkers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneMarkers::IsInitialized() const {
  return true;
}

void LaneMarkers::Swap(LaneMarkers* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaneMarkers::InternalSwap(LaneMarkers* other) {
  next_left_lane_marker_.InternalSwap(&other->next_left_lane_marker_);
  next_right_lane_marker_.InternalSwap(&other->next_right_lane_marker_);
  std::swap(left_lane_marker_, other->left_lane_marker_);
  std::swap(right_lane_marker_, other->right_lane_marker_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LaneMarkers::GetMetadata() const {
  protobuf_perception_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fobstacle_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LaneMarkers

// optional .glb_auto_perception_sensorfusion.LaneMarker left_lane_marker = 1;
bool LaneMarkers::has_left_lane_marker() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LaneMarkers::set_has_left_lane_marker() {
  _has_bits_[0] |= 0x00000001u;
}
void LaneMarkers::clear_has_left_lane_marker() {
  _has_bits_[0] &= ~0x00000001u;
}
void LaneMarkers::clear_left_lane_marker() {
  if (left_lane_marker_ != NULL) left_lane_marker_->::glb_auto_perception_sensorfusion::LaneMarker::Clear();
  clear_has_left_lane_marker();
}
const ::glb_auto_perception_sensorfusion::LaneMarker& LaneMarkers::left_lane_marker() const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.LaneMarkers.left_lane_marker)
  return left_lane_marker_ != NULL ? *left_lane_marker_
                         : *::glb_auto_perception_sensorfusion::LaneMarker::internal_default_instance();
}
::glb_auto_perception_sensorfusion::LaneMarker* LaneMarkers::mutable_left_lane_marker() {
  set_has_left_lane_marker();
  if (left_lane_marker_ == NULL) {
    left_lane_marker_ = new ::glb_auto_perception_sensorfusion::LaneMarker;
  }
  // @@protoc_insertion_point(field_mutable:glb_auto_perception_sensorfusion.LaneMarkers.left_lane_marker)
  return left_lane_marker_;
}
::glb_auto_perception_sensorfusion::LaneMarker* LaneMarkers::release_left_lane_marker() {
  // @@protoc_insertion_point(field_release:glb_auto_perception_sensorfusion.LaneMarkers.left_lane_marker)
  clear_has_left_lane_marker();
  ::glb_auto_perception_sensorfusion::LaneMarker* temp = left_lane_marker_;
  left_lane_marker_ = NULL;
  return temp;
}
void LaneMarkers::set_allocated_left_lane_marker(::glb_auto_perception_sensorfusion::LaneMarker* left_lane_marker) {
  delete left_lane_marker_;
  left_lane_marker_ = left_lane_marker;
  if (left_lane_marker) {
    set_has_left_lane_marker();
  } else {
    clear_has_left_lane_marker();
  }
  // @@protoc_insertion_point(field_set_allocated:glb_auto_perception_sensorfusion.LaneMarkers.left_lane_marker)
}

// optional .glb_auto_perception_sensorfusion.LaneMarker right_lane_marker = 2;
bool LaneMarkers::has_right_lane_marker() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LaneMarkers::set_has_right_lane_marker() {
  _has_bits_[0] |= 0x00000002u;
}
void LaneMarkers::clear_has_right_lane_marker() {
  _has_bits_[0] &= ~0x00000002u;
}
void LaneMarkers::clear_right_lane_marker() {
  if (right_lane_marker_ != NULL) right_lane_marker_->::glb_auto_perception_sensorfusion::LaneMarker::Clear();
  clear_has_right_lane_marker();
}
const ::glb_auto_perception_sensorfusion::LaneMarker& LaneMarkers::right_lane_marker() const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.LaneMarkers.right_lane_marker)
  return right_lane_marker_ != NULL ? *right_lane_marker_
                         : *::glb_auto_perception_sensorfusion::LaneMarker::internal_default_instance();
}
::glb_auto_perception_sensorfusion::LaneMarker* LaneMarkers::mutable_right_lane_marker() {
  set_has_right_lane_marker();
  if (right_lane_marker_ == NULL) {
    right_lane_marker_ = new ::glb_auto_perception_sensorfusion::LaneMarker;
  }
  // @@protoc_insertion_point(field_mutable:glb_auto_perception_sensorfusion.LaneMarkers.right_lane_marker)
  return right_lane_marker_;
}
::glb_auto_perception_sensorfusion::LaneMarker* LaneMarkers::release_right_lane_marker() {
  // @@protoc_insertion_point(field_release:glb_auto_perception_sensorfusion.LaneMarkers.right_lane_marker)
  clear_has_right_lane_marker();
  ::glb_auto_perception_sensorfusion::LaneMarker* temp = right_lane_marker_;
  right_lane_marker_ = NULL;
  return temp;
}
void LaneMarkers::set_allocated_right_lane_marker(::glb_auto_perception_sensorfusion::LaneMarker* right_lane_marker) {
  delete right_lane_marker_;
  right_lane_marker_ = right_lane_marker;
  if (right_lane_marker) {
    set_has_right_lane_marker();
  } else {
    clear_has_right_lane_marker();
  }
  // @@protoc_insertion_point(field_set_allocated:glb_auto_perception_sensorfusion.LaneMarkers.right_lane_marker)
}

// repeated .glb_auto_perception_sensorfusion.LaneMarker next_left_lane_marker = 3;
int LaneMarkers::next_left_lane_marker_size() const {
  return next_left_lane_marker_.size();
}
void LaneMarkers::clear_next_left_lane_marker() {
  next_left_lane_marker_.Clear();
}
const ::glb_auto_perception_sensorfusion::LaneMarker& LaneMarkers::next_left_lane_marker(int index) const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.LaneMarkers.next_left_lane_marker)
  return next_left_lane_marker_.Get(index);
}
::glb_auto_perception_sensorfusion::LaneMarker* LaneMarkers::mutable_next_left_lane_marker(int index) {
  // @@protoc_insertion_point(field_mutable:glb_auto_perception_sensorfusion.LaneMarkers.next_left_lane_marker)
  return next_left_lane_marker_.Mutable(index);
}
::glb_auto_perception_sensorfusion::LaneMarker* LaneMarkers::add_next_left_lane_marker() {
  // @@protoc_insertion_point(field_add:glb_auto_perception_sensorfusion.LaneMarkers.next_left_lane_marker)
  return next_left_lane_marker_.Add();
}
::google::protobuf::RepeatedPtrField< ::glb_auto_perception_sensorfusion::LaneMarker >*
LaneMarkers::mutable_next_left_lane_marker() {
  // @@protoc_insertion_point(field_mutable_list:glb_auto_perception_sensorfusion.LaneMarkers.next_left_lane_marker)
  return &next_left_lane_marker_;
}
const ::google::protobuf::RepeatedPtrField< ::glb_auto_perception_sensorfusion::LaneMarker >&
LaneMarkers::next_left_lane_marker() const {
  // @@protoc_insertion_point(field_list:glb_auto_perception_sensorfusion.LaneMarkers.next_left_lane_marker)
  return next_left_lane_marker_;
}

// repeated .glb_auto_perception_sensorfusion.LaneMarker next_right_lane_marker = 4;
int LaneMarkers::next_right_lane_marker_size() const {
  return next_right_lane_marker_.size();
}
void LaneMarkers::clear_next_right_lane_marker() {
  next_right_lane_marker_.Clear();
}
const ::glb_auto_perception_sensorfusion::LaneMarker& LaneMarkers::next_right_lane_marker(int index) const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.LaneMarkers.next_right_lane_marker)
  return next_right_lane_marker_.Get(index);
}
::glb_auto_perception_sensorfusion::LaneMarker* LaneMarkers::mutable_next_right_lane_marker(int index) {
  // @@protoc_insertion_point(field_mutable:glb_auto_perception_sensorfusion.LaneMarkers.next_right_lane_marker)
  return next_right_lane_marker_.Mutable(index);
}
::glb_auto_perception_sensorfusion::LaneMarker* LaneMarkers::add_next_right_lane_marker() {
  // @@protoc_insertion_point(field_add:glb_auto_perception_sensorfusion.LaneMarkers.next_right_lane_marker)
  return next_right_lane_marker_.Add();
}
::google::protobuf::RepeatedPtrField< ::glb_auto_perception_sensorfusion::LaneMarker >*
LaneMarkers::mutable_next_right_lane_marker() {
  // @@protoc_insertion_point(field_mutable_list:glb_auto_perception_sensorfusion.LaneMarkers.next_right_lane_marker)
  return &next_right_lane_marker_;
}
const ::google::protobuf::RepeatedPtrField< ::glb_auto_perception_sensorfusion::LaneMarker >&
LaneMarkers::next_right_lane_marker() const {
  // @@protoc_insertion_point(field_list:glb_auto_perception_sensorfusion.LaneMarkers.next_right_lane_marker)
  return next_right_lane_marker_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PerceptionObstacles::kPerceptionObstacleFieldNumber;
const int PerceptionObstacles::kHeaderFieldNumber;
const int PerceptionObstacles::kErrorCodeFieldNumber;
const int PerceptionObstacles::kLaneMarkerFieldNumber;
const int PerceptionObstacles::kCipvInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PerceptionObstacles::PerceptionObstacles()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_perception_5fobstacle_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:glb_auto_perception_sensorfusion.PerceptionObstacles)
}
PerceptionObstacles::PerceptionObstacles(const PerceptionObstacles& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      perception_obstacle_(from.perception_obstacle_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::glb_auto_perception_sensorfusion::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_lane_marker()) {
    lane_marker_ = new ::glb_auto_perception_sensorfusion::LaneMarkers(*from.lane_marker_);
  } else {
    lane_marker_ = NULL;
  }
  if (from.has_cipv_info()) {
    cipv_info_ = new ::glb_auto_perception_sensorfusion::CIPVInfo(*from.cipv_info_);
  } else {
    cipv_info_ = NULL;
  }
  error_code_ = from.error_code_;
  // @@protoc_insertion_point(copy_constructor:glb_auto_perception_sensorfusion.PerceptionObstacles)
}

void PerceptionObstacles::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&header_, 0, reinterpret_cast<char*>(&error_code_) -
    reinterpret_cast<char*>(&header_) + sizeof(error_code_));
}

PerceptionObstacles::~PerceptionObstacles() {
  // @@protoc_insertion_point(destructor:glb_auto_perception_sensorfusion.PerceptionObstacles)
  SharedDtor();
}

void PerceptionObstacles::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete lane_marker_;
  }
  if (this != internal_default_instance()) {
    delete cipv_info_;
  }
}

void PerceptionObstacles::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PerceptionObstacles::descriptor() {
  protobuf_perception_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fobstacle_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PerceptionObstacles& PerceptionObstacles::default_instance() {
  protobuf_perception_5fobstacle_2eproto::InitDefaults();
  return *internal_default_instance();
}

PerceptionObstacles* PerceptionObstacles::New(::google::protobuf::Arena* arena) const {
  PerceptionObstacles* n = new PerceptionObstacles;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PerceptionObstacles::Clear() {
// @@protoc_insertion_point(message_clear_start:glb_auto_perception_sensorfusion.PerceptionObstacles)
  perception_obstacle_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    if (has_header()) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->::glb_auto_perception_sensorfusion::Header::Clear();
    }
    if (has_lane_marker()) {
      GOOGLE_DCHECK(lane_marker_ != NULL);
      lane_marker_->::glb_auto_perception_sensorfusion::LaneMarkers::Clear();
    }
    if (has_cipv_info()) {
      GOOGLE_DCHECK(cipv_info_ != NULL);
      cipv_info_->::glb_auto_perception_sensorfusion::CIPVInfo::Clear();
    }
  }
  error_code_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PerceptionObstacles::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:glb_auto_perception_sensorfusion.PerceptionObstacles)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .glb_auto_perception_sensorfusion.PerceptionObstacle perception_obstacle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_perception_obstacle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .glb_auto_perception_sensorfusion.Header header = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .glb_auto_perception_sensorfusion.ErrorCode error_code = 3 [default = OK];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::glb_auto_perception_sensorfusion::ErrorCode_IsValid(value)) {
            set_error_code(static_cast< ::glb_auto_perception_sensorfusion::ErrorCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .glb_auto_perception_sensorfusion.LaneMarkers lane_marker = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lane_marker()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .glb_auto_perception_sensorfusion.CIPVInfo cipv_info = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cipv_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:glb_auto_perception_sensorfusion.PerceptionObstacles)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:glb_auto_perception_sensorfusion.PerceptionObstacles)
  return false;
#undef DO_
}

void PerceptionObstacles::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:glb_auto_perception_sensorfusion.PerceptionObstacles)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .glb_auto_perception_sensorfusion.PerceptionObstacle perception_obstacle = 1;
  for (unsigned int i = 0, n = this->perception_obstacle_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->perception_obstacle(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .glb_auto_perception_sensorfusion.Header header = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->header_, output);
  }

  // optional .glb_auto_perception_sensorfusion.ErrorCode error_code = 3 [default = OK];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->error_code(), output);
  }

  // optional .glb_auto_perception_sensorfusion.LaneMarkers lane_marker = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->lane_marker_, output);
  }

  // optional .glb_auto_perception_sensorfusion.CIPVInfo cipv_info = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->cipv_info_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:glb_auto_perception_sensorfusion.PerceptionObstacles)
}

::google::protobuf::uint8* PerceptionObstacles::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:glb_auto_perception_sensorfusion.PerceptionObstacles)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .glb_auto_perception_sensorfusion.PerceptionObstacle perception_obstacle = 1;
  for (unsigned int i = 0, n = this->perception_obstacle_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->perception_obstacle(i), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .glb_auto_perception_sensorfusion.Header header = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->header_, deterministic, target);
  }

  // optional .glb_auto_perception_sensorfusion.ErrorCode error_code = 3 [default = OK];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->error_code(), target);
  }

  // optional .glb_auto_perception_sensorfusion.LaneMarkers lane_marker = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->lane_marker_, deterministic, target);
  }

  // optional .glb_auto_perception_sensorfusion.CIPVInfo cipv_info = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->cipv_info_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:glb_auto_perception_sensorfusion.PerceptionObstacles)
  return target;
}

size_t PerceptionObstacles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:glb_auto_perception_sensorfusion.PerceptionObstacles)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .glb_auto_perception_sensorfusion.PerceptionObstacle perception_obstacle = 1;
  {
    unsigned int count = this->perception_obstacle_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->perception_obstacle(i));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional .glb_auto_perception_sensorfusion.Header header = 2;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .glb_auto_perception_sensorfusion.LaneMarkers lane_marker = 4;
    if (has_lane_marker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->lane_marker_);
    }

    // optional .glb_auto_perception_sensorfusion.CIPVInfo cipv_info = 5;
    if (has_cipv_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cipv_info_);
    }

    // optional .glb_auto_perception_sensorfusion.ErrorCode error_code = 3 [default = OK];
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PerceptionObstacles::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:glb_auto_perception_sensorfusion.PerceptionObstacles)
  GOOGLE_DCHECK_NE(&from, this);
  const PerceptionObstacles* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PerceptionObstacles>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:glb_auto_perception_sensorfusion.PerceptionObstacles)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:glb_auto_perception_sensorfusion.PerceptionObstacles)
    MergeFrom(*source);
  }
}

void PerceptionObstacles::MergeFrom(const PerceptionObstacles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:glb_auto_perception_sensorfusion.PerceptionObstacles)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  perception_obstacle_.MergeFrom(from.perception_obstacle_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::glb_auto_perception_sensorfusion::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_lane_marker()->::glb_auto_perception_sensorfusion::LaneMarkers::MergeFrom(from.lane_marker());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_cipv_info()->::glb_auto_perception_sensorfusion::CIPVInfo::MergeFrom(from.cipv_info());
    }
    if (cached_has_bits & 0x00000008u) {
      error_code_ = from.error_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PerceptionObstacles::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:glb_auto_perception_sensorfusion.PerceptionObstacles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PerceptionObstacles::CopyFrom(const PerceptionObstacles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:glb_auto_perception_sensorfusion.PerceptionObstacles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerceptionObstacles::IsInitialized() const {
  return true;
}

void PerceptionObstacles::Swap(PerceptionObstacles* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PerceptionObstacles::InternalSwap(PerceptionObstacles* other) {
  perception_obstacle_.InternalSwap(&other->perception_obstacle_);
  std::swap(header_, other->header_);
  std::swap(lane_marker_, other->lane_marker_);
  std::swap(cipv_info_, other->cipv_info_);
  std::swap(error_code_, other->error_code_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PerceptionObstacles::GetMetadata() const {
  protobuf_perception_5fobstacle_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fobstacle_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PerceptionObstacles

// repeated .glb_auto_perception_sensorfusion.PerceptionObstacle perception_obstacle = 1;
int PerceptionObstacles::perception_obstacle_size() const {
  return perception_obstacle_.size();
}
void PerceptionObstacles::clear_perception_obstacle() {
  perception_obstacle_.Clear();
}
const ::glb_auto_perception_sensorfusion::PerceptionObstacle& PerceptionObstacles::perception_obstacle(int index) const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.PerceptionObstacles.perception_obstacle)
  return perception_obstacle_.Get(index);
}
::glb_auto_perception_sensorfusion::PerceptionObstacle* PerceptionObstacles::mutable_perception_obstacle(int index) {
  // @@protoc_insertion_point(field_mutable:glb_auto_perception_sensorfusion.PerceptionObstacles.perception_obstacle)
  return perception_obstacle_.Mutable(index);
}
::glb_auto_perception_sensorfusion::PerceptionObstacle* PerceptionObstacles::add_perception_obstacle() {
  // @@protoc_insertion_point(field_add:glb_auto_perception_sensorfusion.PerceptionObstacles.perception_obstacle)
  return perception_obstacle_.Add();
}
::google::protobuf::RepeatedPtrField< ::glb_auto_perception_sensorfusion::PerceptionObstacle >*
PerceptionObstacles::mutable_perception_obstacle() {
  // @@protoc_insertion_point(field_mutable_list:glb_auto_perception_sensorfusion.PerceptionObstacles.perception_obstacle)
  return &perception_obstacle_;
}
const ::google::protobuf::RepeatedPtrField< ::glb_auto_perception_sensorfusion::PerceptionObstacle >&
PerceptionObstacles::perception_obstacle() const {
  // @@protoc_insertion_point(field_list:glb_auto_perception_sensorfusion.PerceptionObstacles.perception_obstacle)
  return perception_obstacle_;
}

// optional .glb_auto_perception_sensorfusion.Header header = 2;
bool PerceptionObstacles::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PerceptionObstacles::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void PerceptionObstacles::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void PerceptionObstacles::clear_header() {
  if (header_ != NULL) header_->::glb_auto_perception_sensorfusion::Header::Clear();
  clear_has_header();
}
const ::glb_auto_perception_sensorfusion::Header& PerceptionObstacles::header() const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.PerceptionObstacles.header)
  return header_ != NULL ? *header_
                         : *::glb_auto_perception_sensorfusion::Header::internal_default_instance();
}
::glb_auto_perception_sensorfusion::Header* PerceptionObstacles::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::glb_auto_perception_sensorfusion::Header;
  }
  // @@protoc_insertion_point(field_mutable:glb_auto_perception_sensorfusion.PerceptionObstacles.header)
  return header_;
}
::glb_auto_perception_sensorfusion::Header* PerceptionObstacles::release_header() {
  // @@protoc_insertion_point(field_release:glb_auto_perception_sensorfusion.PerceptionObstacles.header)
  clear_has_header();
  ::glb_auto_perception_sensorfusion::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void PerceptionObstacles::set_allocated_header(::glb_auto_perception_sensorfusion::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:glb_auto_perception_sensorfusion.PerceptionObstacles.header)
}

// optional .glb_auto_perception_sensorfusion.ErrorCode error_code = 3 [default = OK];
bool PerceptionObstacles::has_error_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PerceptionObstacles::set_has_error_code() {
  _has_bits_[0] |= 0x00000008u;
}
void PerceptionObstacles::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000008u;
}
void PerceptionObstacles::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
::glb_auto_perception_sensorfusion::ErrorCode PerceptionObstacles::error_code() const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.PerceptionObstacles.error_code)
  return static_cast< ::glb_auto_perception_sensorfusion::ErrorCode >(error_code_);
}
void PerceptionObstacles::set_error_code(::glb_auto_perception_sensorfusion::ErrorCode value) {
  assert(::glb_auto_perception_sensorfusion::ErrorCode_IsValid(value));
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:glb_auto_perception_sensorfusion.PerceptionObstacles.error_code)
}

// optional .glb_auto_perception_sensorfusion.LaneMarkers lane_marker = 4;
bool PerceptionObstacles::has_lane_marker() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PerceptionObstacles::set_has_lane_marker() {
  _has_bits_[0] |= 0x00000002u;
}
void PerceptionObstacles::clear_has_lane_marker() {
  _has_bits_[0] &= ~0x00000002u;
}
void PerceptionObstacles::clear_lane_marker() {
  if (lane_marker_ != NULL) lane_marker_->::glb_auto_perception_sensorfusion::LaneMarkers::Clear();
  clear_has_lane_marker();
}
const ::glb_auto_perception_sensorfusion::LaneMarkers& PerceptionObstacles::lane_marker() const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.PerceptionObstacles.lane_marker)
  return lane_marker_ != NULL ? *lane_marker_
                         : *::glb_auto_perception_sensorfusion::LaneMarkers::internal_default_instance();
}
::glb_auto_perception_sensorfusion::LaneMarkers* PerceptionObstacles::mutable_lane_marker() {
  set_has_lane_marker();
  if (lane_marker_ == NULL) {
    lane_marker_ = new ::glb_auto_perception_sensorfusion::LaneMarkers;
  }
  // @@protoc_insertion_point(field_mutable:glb_auto_perception_sensorfusion.PerceptionObstacles.lane_marker)
  return lane_marker_;
}
::glb_auto_perception_sensorfusion::LaneMarkers* PerceptionObstacles::release_lane_marker() {
  // @@protoc_insertion_point(field_release:glb_auto_perception_sensorfusion.PerceptionObstacles.lane_marker)
  clear_has_lane_marker();
  ::glb_auto_perception_sensorfusion::LaneMarkers* temp = lane_marker_;
  lane_marker_ = NULL;
  return temp;
}
void PerceptionObstacles::set_allocated_lane_marker(::glb_auto_perception_sensorfusion::LaneMarkers* lane_marker) {
  delete lane_marker_;
  lane_marker_ = lane_marker;
  if (lane_marker) {
    set_has_lane_marker();
  } else {
    clear_has_lane_marker();
  }
  // @@protoc_insertion_point(field_set_allocated:glb_auto_perception_sensorfusion.PerceptionObstacles.lane_marker)
}

// optional .glb_auto_perception_sensorfusion.CIPVInfo cipv_info = 5;
bool PerceptionObstacles::has_cipv_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PerceptionObstacles::set_has_cipv_info() {
  _has_bits_[0] |= 0x00000004u;
}
void PerceptionObstacles::clear_has_cipv_info() {
  _has_bits_[0] &= ~0x00000004u;
}
void PerceptionObstacles::clear_cipv_info() {
  if (cipv_info_ != NULL) cipv_info_->::glb_auto_perception_sensorfusion::CIPVInfo::Clear();
  clear_has_cipv_info();
}
const ::glb_auto_perception_sensorfusion::CIPVInfo& PerceptionObstacles::cipv_info() const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.PerceptionObstacles.cipv_info)
  return cipv_info_ != NULL ? *cipv_info_
                         : *::glb_auto_perception_sensorfusion::CIPVInfo::internal_default_instance();
}
::glb_auto_perception_sensorfusion::CIPVInfo* PerceptionObstacles::mutable_cipv_info() {
  set_has_cipv_info();
  if (cipv_info_ == NULL) {
    cipv_info_ = new ::glb_auto_perception_sensorfusion::CIPVInfo;
  }
  // @@protoc_insertion_point(field_mutable:glb_auto_perception_sensorfusion.PerceptionObstacles.cipv_info)
  return cipv_info_;
}
::glb_auto_perception_sensorfusion::CIPVInfo* PerceptionObstacles::release_cipv_info() {
  // @@protoc_insertion_point(field_release:glb_auto_perception_sensorfusion.PerceptionObstacles.cipv_info)
  clear_has_cipv_info();
  ::glb_auto_perception_sensorfusion::CIPVInfo* temp = cipv_info_;
  cipv_info_ = NULL;
  return temp;
}
void PerceptionObstacles::set_allocated_cipv_info(::glb_auto_perception_sensorfusion::CIPVInfo* cipv_info) {
  delete cipv_info_;
  cipv_info_ = cipv_info;
  if (cipv_info) {
    set_has_cipv_info();
  } else {
    clear_has_cipv_info();
  }
  // @@protoc_insertion_point(field_set_allocated:glb_auto_perception_sensorfusion.PerceptionObstacles.cipv_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace glb_auto_perception_sensorfusion

// @@protoc_insertion_point(global_scope)
