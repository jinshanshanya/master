// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: async_fusion_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "async_fusion_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace glb_auto_perception_sensorfusion {
namespace async_fusion_config {
class ModelConfigsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ModelConfigs> {
} _ModelConfigs_default_instance_;

namespace protobuf_async_5ffusion_5fconfig_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, match_method_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, max_match_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, max_lidar_invisible_period_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, max_radar_invisible_period_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, max_radar_confident_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, min_radar_confident_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, max_camera_invisible_period_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, use_radar_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, use_lidar_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, use_camera_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, motion_method_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, lidar_process_noise_scale_factor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, radar_process_noise_scale_factor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelConfigs, camera_process_noise_scale_factor_),
  0,
  1,
  2,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  3,
  13,
  14,
  15,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 21, sizeof(ModelConfigs)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_ModelConfigs_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "async_fusion_config.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _ModelConfigs_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  ModelConfigs::_default_name_.Shutdown();
  ModelConfigs::_default_version_.Shutdown();
  ModelConfigs::_default_match_method_.Shutdown();
  ModelConfigs::_default_motion_method_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ModelConfigs::_default_name_.DefaultConstruct();
  *ModelConfigs::_default_name_.get_mutable() = ::std::string("AsyncFusion", 11);
  ModelConfigs::_default_version_.DefaultConstruct();
  *ModelConfigs::_default_version_.get_mutable() = ::std::string("1.0.0", 5);
  ModelConfigs::_default_match_method_.DefaultConstruct();
  *ModelConfigs::_default_match_method_.get_mutable() = ::std::string("hm_matcher", 10);
  ModelConfigs::_default_motion_method_.DefaultConstruct();
  *ModelConfigs::_default_motion_method_.get_mutable() = ::std::string("kf", 2);
  _ModelConfigs_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\031async_fusion_config.proto\0224glb_auto_pe"
      "rception_sensorfusion.async_fusion_confi"
      "g\"\304\004\n\014ModelConfigs\022\031\n\004name\030\001 \001(\t:\013AsyncF"
      "usion\022\026\n\007version\030\002 \001(\t:\0051.0.0\022 \n\014match_m"
      "ethod\030\003 \001(\t:\nhm_matcher\022\035\n\022max_match_dis"
      "tance\030\004 \001(\002:\0014\022(\n\032max_lidar_invisible_pe"
      "riod\030\005 \001(\002:\0040.25\022(\n\032max_radar_invisible_"
      "period\030\006 \001(\002:\0040.25\022%\n\031max_radar_confiden"
      "t_angle\030\007 \001(\002:\00230\022(\n\034min_radar_confident"
      "_distance\030\010 \001(\002:\00240\022)\n\033max_camera_invisi"
      "ble_period\030\t \001(\002:\0040.25\022\027\n\tuse_radar\030\n \001("
      "\010:\004true\022\027\n\tuse_lidar\030\013 \001(\010:\004true\022\030\n\nuse_"
      "camera\030\014 \001(\010:\004true\022\031\n\rmotion_method\030\r \001("
      "\t:\002kf\022,\n lidar_process_noise_scale_facto"
      "r\030\016 \001(\002:\00210\022,\n radar_process_noise_scale"
      "_factor\030\017 \001(\002:\00210\022-\n!camera_process_nois"
      "e_scale_factor\030\020 \001(\002:\00210"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 664);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "async_fusion_config.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_async_5ffusion_5fconfig_2eproto


// ===================================================================

::google::protobuf::internal::ExplicitlyConstructed< ::std::string> ModelConfigs::_default_name_;
::google::protobuf::internal::ExplicitlyConstructed< ::std::string> ModelConfigs::_default_version_;
::google::protobuf::internal::ExplicitlyConstructed< ::std::string> ModelConfigs::_default_match_method_;
::google::protobuf::internal::ExplicitlyConstructed< ::std::string> ModelConfigs::_default_motion_method_;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModelConfigs::kNameFieldNumber;
const int ModelConfigs::kVersionFieldNumber;
const int ModelConfigs::kMatchMethodFieldNumber;
const int ModelConfigs::kMaxMatchDistanceFieldNumber;
const int ModelConfigs::kMaxLidarInvisiblePeriodFieldNumber;
const int ModelConfigs::kMaxRadarInvisiblePeriodFieldNumber;
const int ModelConfigs::kMaxRadarConfidentAngleFieldNumber;
const int ModelConfigs::kMinRadarConfidentDistanceFieldNumber;
const int ModelConfigs::kMaxCameraInvisiblePeriodFieldNumber;
const int ModelConfigs::kUseRadarFieldNumber;
const int ModelConfigs::kUseLidarFieldNumber;
const int ModelConfigs::kUseCameraFieldNumber;
const int ModelConfigs::kMotionMethodFieldNumber;
const int ModelConfigs::kLidarProcessNoiseScaleFactorFieldNumber;
const int ModelConfigs::kRadarProcessNoiseScaleFactorFieldNumber;
const int ModelConfigs::kCameraProcessNoiseScaleFactorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModelConfigs::ModelConfigs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_async_5ffusion_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:glb_auto_perception_sensorfusion.async_fusion_config.ModelConfigs)
}
ModelConfigs::ModelConfigs(const ModelConfigs& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&ModelConfigs::_default_name_.get());
  if (from.has_name()) {
    name_.AssignWithDefault(&ModelConfigs::_default_name_.get(), from.name_);
  }
  version_.UnsafeSetDefault(&ModelConfigs::_default_version_.get());
  if (from.has_version()) {
    version_.AssignWithDefault(&ModelConfigs::_default_version_.get(), from.version_);
  }
  match_method_.UnsafeSetDefault(&ModelConfigs::_default_match_method_.get());
  if (from.has_match_method()) {
    match_method_.AssignWithDefault(&ModelConfigs::_default_match_method_.get(), from.match_method_);
  }
  motion_method_.UnsafeSetDefault(&ModelConfigs::_default_motion_method_.get());
  if (from.has_motion_method()) {
    motion_method_.AssignWithDefault(&ModelConfigs::_default_motion_method_.get(), from.motion_method_);
  }
  ::memcpy(&max_match_distance_, &from.max_match_distance_,
    reinterpret_cast<char*>(&camera_process_noise_scale_factor_) -
    reinterpret_cast<char*>(&max_match_distance_) + sizeof(camera_process_noise_scale_factor_));
  // @@protoc_insertion_point(copy_constructor:glb_auto_perception_sensorfusion.async_fusion_config.ModelConfigs)
}

void ModelConfigs::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&ModelConfigs::_default_name_.get());
  version_.UnsafeSetDefault(&ModelConfigs::_default_version_.get());
  match_method_.UnsafeSetDefault(&ModelConfigs::_default_match_method_.get());
  motion_method_.UnsafeSetDefault(&ModelConfigs::_default_motion_method_.get());
  max_match_distance_ = 4;
  max_lidar_invisible_period_ = 0.25f;
  max_radar_invisible_period_ = 0.25f;
  max_radar_confident_angle_ = 30;
  min_radar_confident_distance_ = 40;
  max_camera_invisible_period_ = 0.25f;
  use_radar_ = true;
  use_lidar_ = true;
  use_camera_ = true;
  lidar_process_noise_scale_factor_ = 10;
  radar_process_noise_scale_factor_ = 10;
  camera_process_noise_scale_factor_ = 10;
}

ModelConfigs::~ModelConfigs() {
  // @@protoc_insertion_point(destructor:glb_auto_perception_sensorfusion.async_fusion_config.ModelConfigs)
  SharedDtor();
}

void ModelConfigs::SharedDtor() {
  name_.DestroyNoArena(&ModelConfigs::_default_name_.get());
  version_.DestroyNoArena(&ModelConfigs::_default_version_.get());
  match_method_.DestroyNoArena(&ModelConfigs::_default_match_method_.get());
  motion_method_.DestroyNoArena(&ModelConfigs::_default_motion_method_.get());
}

void ModelConfigs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModelConfigs::descriptor() {
  protobuf_async_5ffusion_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_async_5ffusion_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ModelConfigs& ModelConfigs::default_instance() {
  protobuf_async_5ffusion_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

ModelConfigs* ModelConfigs::New(::google::protobuf::Arena* arena) const {
  ModelConfigs* n = new ModelConfigs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ModelConfigs::Clear() {
// @@protoc_insertion_point(message_clear_start:glb_auto_perception_sensorfusion.async_fusion_config.ModelConfigs)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&ModelConfigs::_default_name_.get()));
      (*name_.UnsafeRawStringPointer())->assign(*&ModelConfigs::_default_name_.get());
    }
    if (has_version()) {
      GOOGLE_DCHECK(!version_.IsDefault(&ModelConfigs::_default_version_.get()));
      (*version_.UnsafeRawStringPointer())->assign(*&ModelConfigs::_default_version_.get());
    }
    if (has_match_method()) {
      GOOGLE_DCHECK(!match_method_.IsDefault(&ModelConfigs::_default_match_method_.get()));
      (*match_method_.UnsafeRawStringPointer())->assign(*&ModelConfigs::_default_match_method_.get());
    }
    if (has_motion_method()) {
      GOOGLE_DCHECK(!motion_method_.IsDefault(&ModelConfigs::_default_motion_method_.get()));
      (*motion_method_.UnsafeRawStringPointer())->assign(*&ModelConfigs::_default_motion_method_.get());
    }
    max_match_distance_ = 4;
    max_lidar_invisible_period_ = 0.25f;
    max_radar_invisible_period_ = 0.25f;
    max_radar_confident_angle_ = 30;
  }
  if (_has_bits_[8 / 32] & 65280u) {
    min_radar_confident_distance_ = 40;
    max_camera_invisible_period_ = 0.25f;
    use_radar_ = true;
    use_lidar_ = true;
    use_camera_ = true;
    lidar_process_noise_scale_factor_ = 10;
    radar_process_noise_scale_factor_ = 10;
    camera_process_noise_scale_factor_ = 10;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ModelConfigs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:glb_auto_perception_sensorfusion.async_fusion_config.ModelConfigs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1 [default = "AsyncFusion"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "glb_auto_perception_sensorfusion.async_fusion_config.ModelConfigs.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string version = 2 [default = "1.0.0"];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "glb_auto_perception_sensorfusion.async_fusion_config.ModelConfigs.version");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string match_method = 3 [default = "hm_matcher"];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_match_method()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->match_method().data(), this->match_method().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "glb_auto_perception_sensorfusion.async_fusion_config.ModelConfigs.match_method");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float max_match_distance = 4 [default = 4];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_max_match_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_match_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float max_lidar_invisible_period = 5 [default = 0.25];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {
          set_has_max_lidar_invisible_period();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_lidar_invisible_period_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float max_radar_invisible_period = 6 [default = 0.25];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {
          set_has_max_radar_invisible_period();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_radar_invisible_period_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float max_radar_confident_angle = 7 [default = 30];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {
          set_has_max_radar_confident_angle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_radar_confident_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float min_radar_confident_distance = 8 [default = 40];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u)) {
          set_has_min_radar_confident_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_radar_confident_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float max_camera_invisible_period = 9 [default = 0.25];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u)) {
          set_has_max_camera_invisible_period();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_camera_invisible_period_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_radar = 10 [default = true];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_use_radar();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_radar_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_lidar = 11 [default = true];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_use_lidar();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_lidar_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_camera = 12 [default = true];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_use_camera();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_camera_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string motion_method = 13 [default = "kf"];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_motion_method()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->motion_method().data(), this->motion_method().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "glb_auto_perception_sensorfusion.async_fusion_config.ModelConfigs.motion_method");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float lidar_process_noise_scale_factor = 14 [default = 10];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u)) {
          set_has_lidar_process_noise_scale_factor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lidar_process_noise_scale_factor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float radar_process_noise_scale_factor = 15 [default = 10];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(125u)) {
          set_has_radar_process_noise_scale_factor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &radar_process_noise_scale_factor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float camera_process_noise_scale_factor = 16 [default = 10];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(133u)) {
          set_has_camera_process_noise_scale_factor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &camera_process_noise_scale_factor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:glb_auto_perception_sensorfusion.async_fusion_config.ModelConfigs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:glb_auto_perception_sensorfusion.async_fusion_config.ModelConfigs)
  return false;
#undef DO_
}

void ModelConfigs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:glb_auto_perception_sensorfusion.async_fusion_config.ModelConfigs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1 [default = "AsyncFusion"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "glb_auto_perception_sensorfusion.async_fusion_config.ModelConfigs.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string version = 2 [default = "1.0.0"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "glb_auto_perception_sensorfusion.async_fusion_config.ModelConfigs.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->version(), output);
  }

  // optional string match_method = 3 [default = "hm_matcher"];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->match_method().data(), this->match_method().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "glb_auto_perception_sensorfusion.async_fusion_config.ModelConfigs.match_method");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->match_method(), output);
  }

  // optional float max_match_distance = 4 [default = 4];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->max_match_distance(), output);
  }

  // optional float max_lidar_invisible_period = 5 [default = 0.25];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->max_lidar_invisible_period(), output);
  }

  // optional float max_radar_invisible_period = 6 [default = 0.25];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->max_radar_invisible_period(), output);
  }

  // optional float max_radar_confident_angle = 7 [default = 30];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->max_radar_confident_angle(), output);
  }

  // optional float min_radar_confident_distance = 8 [default = 40];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->min_radar_confident_distance(), output);
  }

  // optional float max_camera_invisible_period = 9 [default = 0.25];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->max_camera_invisible_period(), output);
  }

  // optional bool use_radar = 10 [default = true];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->use_radar(), output);
  }

  // optional bool use_lidar = 11 [default = true];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->use_lidar(), output);
  }

  // optional bool use_camera = 12 [default = true];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->use_camera(), output);
  }

  // optional string motion_method = 13 [default = "kf"];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->motion_method().data(), this->motion_method().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "glb_auto_perception_sensorfusion.async_fusion_config.ModelConfigs.motion_method");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->motion_method(), output);
  }

  // optional float lidar_process_noise_scale_factor = 14 [default = 10];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->lidar_process_noise_scale_factor(), output);
  }

  // optional float radar_process_noise_scale_factor = 15 [default = 10];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->radar_process_noise_scale_factor(), output);
  }

  // optional float camera_process_noise_scale_factor = 16 [default = 10];
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->camera_process_noise_scale_factor(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:glb_auto_perception_sensorfusion.async_fusion_config.ModelConfigs)
}

::google::protobuf::uint8* ModelConfigs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:glb_auto_perception_sensorfusion.async_fusion_config.ModelConfigs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1 [default = "AsyncFusion"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "glb_auto_perception_sensorfusion.async_fusion_config.ModelConfigs.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string version = 2 [default = "1.0.0"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "glb_auto_perception_sensorfusion.async_fusion_config.ModelConfigs.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->version(), target);
  }

  // optional string match_method = 3 [default = "hm_matcher"];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->match_method().data(), this->match_method().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "glb_auto_perception_sensorfusion.async_fusion_config.ModelConfigs.match_method");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->match_method(), target);
  }

  // optional float max_match_distance = 4 [default = 4];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->max_match_distance(), target);
  }

  // optional float max_lidar_invisible_period = 5 [default = 0.25];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->max_lidar_invisible_period(), target);
  }

  // optional float max_radar_invisible_period = 6 [default = 0.25];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->max_radar_invisible_period(), target);
  }

  // optional float max_radar_confident_angle = 7 [default = 30];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->max_radar_confident_angle(), target);
  }

  // optional float min_radar_confident_distance = 8 [default = 40];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->min_radar_confident_distance(), target);
  }

  // optional float max_camera_invisible_period = 9 [default = 0.25];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->max_camera_invisible_period(), target);
  }

  // optional bool use_radar = 10 [default = true];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->use_radar(), target);
  }

  // optional bool use_lidar = 11 [default = true];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->use_lidar(), target);
  }

  // optional bool use_camera = 12 [default = true];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->use_camera(), target);
  }

  // optional string motion_method = 13 [default = "kf"];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->motion_method().data(), this->motion_method().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "glb_auto_perception_sensorfusion.async_fusion_config.ModelConfigs.motion_method");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->motion_method(), target);
  }

  // optional float lidar_process_noise_scale_factor = 14 [default = 10];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->lidar_process_noise_scale_factor(), target);
  }

  // optional float radar_process_noise_scale_factor = 15 [default = 10];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->radar_process_noise_scale_factor(), target);
  }

  // optional float camera_process_noise_scale_factor = 16 [default = 10];
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->camera_process_noise_scale_factor(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:glb_auto_perception_sensorfusion.async_fusion_config.ModelConfigs)
  return target;
}

size_t ModelConfigs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:glb_auto_perception_sensorfusion.async_fusion_config.ModelConfigs)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string name = 1 [default = "AsyncFusion"];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string version = 2 [default = "1.0.0"];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional string match_method = 3 [default = "hm_matcher"];
    if (has_match_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->match_method());
    }

    // optional string motion_method = 13 [default = "kf"];
    if (has_motion_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->motion_method());
    }

    // optional float max_match_distance = 4 [default = 4];
    if (has_max_match_distance()) {
      total_size += 1 + 4;
    }

    // optional float max_lidar_invisible_period = 5 [default = 0.25];
    if (has_max_lidar_invisible_period()) {
      total_size += 1 + 4;
    }

    // optional float max_radar_invisible_period = 6 [default = 0.25];
    if (has_max_radar_invisible_period()) {
      total_size += 1 + 4;
    }

    // optional float max_radar_confident_angle = 7 [default = 30];
    if (has_max_radar_confident_angle()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional float min_radar_confident_distance = 8 [default = 40];
    if (has_min_radar_confident_distance()) {
      total_size += 1 + 4;
    }

    // optional float max_camera_invisible_period = 9 [default = 0.25];
    if (has_max_camera_invisible_period()) {
      total_size += 1 + 4;
    }

    // optional bool use_radar = 10 [default = true];
    if (has_use_radar()) {
      total_size += 1 + 1;
    }

    // optional bool use_lidar = 11 [default = true];
    if (has_use_lidar()) {
      total_size += 1 + 1;
    }

    // optional bool use_camera = 12 [default = true];
    if (has_use_camera()) {
      total_size += 1 + 1;
    }

    // optional float lidar_process_noise_scale_factor = 14 [default = 10];
    if (has_lidar_process_noise_scale_factor()) {
      total_size += 1 + 4;
    }

    // optional float radar_process_noise_scale_factor = 15 [default = 10];
    if (has_radar_process_noise_scale_factor()) {
      total_size += 1 + 4;
    }

    // optional float camera_process_noise_scale_factor = 16 [default = 10];
    if (has_camera_process_noise_scale_factor()) {
      total_size += 2 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModelConfigs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:glb_auto_perception_sensorfusion.async_fusion_config.ModelConfigs)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelConfigs* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ModelConfigs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:glb_auto_perception_sensorfusion.async_fusion_config.ModelConfigs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:glb_auto_perception_sensorfusion.async_fusion_config.ModelConfigs)
    MergeFrom(*source);
  }
}

void ModelConfigs::MergeFrom(const ModelConfigs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:glb_auto_perception_sensorfusion.async_fusion_config.ModelConfigs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&ModelConfigs::_default_name_.get(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_version();
      version_.AssignWithDefault(&ModelConfigs::_default_version_.get(), from.version_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_match_method();
      match_method_.AssignWithDefault(&ModelConfigs::_default_match_method_.get(), from.match_method_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_motion_method();
      motion_method_.AssignWithDefault(&ModelConfigs::_default_motion_method_.get(), from.motion_method_);
    }
    if (cached_has_bits & 0x00000010u) {
      max_match_distance_ = from.max_match_distance_;
    }
    if (cached_has_bits & 0x00000020u) {
      max_lidar_invisible_period_ = from.max_lidar_invisible_period_;
    }
    if (cached_has_bits & 0x00000040u) {
      max_radar_invisible_period_ = from.max_radar_invisible_period_;
    }
    if (cached_has_bits & 0x00000080u) {
      max_radar_confident_angle_ = from.max_radar_confident_angle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      min_radar_confident_distance_ = from.min_radar_confident_distance_;
    }
    if (cached_has_bits & 0x00000200u) {
      max_camera_invisible_period_ = from.max_camera_invisible_period_;
    }
    if (cached_has_bits & 0x00000400u) {
      use_radar_ = from.use_radar_;
    }
    if (cached_has_bits & 0x00000800u) {
      use_lidar_ = from.use_lidar_;
    }
    if (cached_has_bits & 0x00001000u) {
      use_camera_ = from.use_camera_;
    }
    if (cached_has_bits & 0x00002000u) {
      lidar_process_noise_scale_factor_ = from.lidar_process_noise_scale_factor_;
    }
    if (cached_has_bits & 0x00004000u) {
      radar_process_noise_scale_factor_ = from.radar_process_noise_scale_factor_;
    }
    if (cached_has_bits & 0x00008000u) {
      camera_process_noise_scale_factor_ = from.camera_process_noise_scale_factor_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ModelConfigs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:glb_auto_perception_sensorfusion.async_fusion_config.ModelConfigs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelConfigs::CopyFrom(const ModelConfigs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:glb_auto_perception_sensorfusion.async_fusion_config.ModelConfigs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelConfigs::IsInitialized() const {
  return true;
}

void ModelConfigs::Swap(ModelConfigs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModelConfigs::InternalSwap(ModelConfigs* other) {
  name_.Swap(&other->name_);
  version_.Swap(&other->version_);
  match_method_.Swap(&other->match_method_);
  motion_method_.Swap(&other->motion_method_);
  std::swap(max_match_distance_, other->max_match_distance_);
  std::swap(max_lidar_invisible_period_, other->max_lidar_invisible_period_);
  std::swap(max_radar_invisible_period_, other->max_radar_invisible_period_);
  std::swap(max_radar_confident_angle_, other->max_radar_confident_angle_);
  std::swap(min_radar_confident_distance_, other->min_radar_confident_distance_);
  std::swap(max_camera_invisible_period_, other->max_camera_invisible_period_);
  std::swap(use_radar_, other->use_radar_);
  std::swap(use_lidar_, other->use_lidar_);
  std::swap(use_camera_, other->use_camera_);
  std::swap(lidar_process_noise_scale_factor_, other->lidar_process_noise_scale_factor_);
  std::swap(radar_process_noise_scale_factor_, other->radar_process_noise_scale_factor_);
  std::swap(camera_process_noise_scale_factor_, other->camera_process_noise_scale_factor_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ModelConfigs::GetMetadata() const {
  protobuf_async_5ffusion_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_async_5ffusion_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ModelConfigs

// optional string name = 1 [default = "AsyncFusion"];
bool ModelConfigs::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ModelConfigs::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void ModelConfigs::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void ModelConfigs::clear_name() {
  name_.ClearToDefaultNoArena(&ModelConfigs::_default_name_.get());
  clear_has_name();
}
const ::std::string& ModelConfigs::name() const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.async_fusion_config.ModelConfigs.name)
  return name_.GetNoArena();
}
void ModelConfigs::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&ModelConfigs::_default_name_.get(), value);
  // @@protoc_insertion_point(field_set:glb_auto_perception_sensorfusion.async_fusion_config.ModelConfigs.name)
}
#if LANG_CXX11
void ModelConfigs::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &ModelConfigs::_default_name_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:glb_auto_perception_sensorfusion.async_fusion_config.ModelConfigs.name)
}
#endif
void ModelConfigs::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&ModelConfigs::_default_name_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:glb_auto_perception_sensorfusion.async_fusion_config.ModelConfigs.name)
}
void ModelConfigs::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&ModelConfigs::_default_name_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:glb_auto_perception_sensorfusion.async_fusion_config.ModelConfigs.name)
}
::std::string* ModelConfigs::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:glb_auto_perception_sensorfusion.async_fusion_config.ModelConfigs.name)
  return name_.MutableNoArena(&ModelConfigs::_default_name_.get());
}
::std::string* ModelConfigs::release_name() {
  // @@protoc_insertion_point(field_release:glb_auto_perception_sensorfusion.async_fusion_config.ModelConfigs.name)
  clear_has_name();
  return name_.ReleaseNoArena(&ModelConfigs::_default_name_.get());
}
void ModelConfigs::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&ModelConfigs::_default_name_.get(), name);
  // @@protoc_insertion_point(field_set_allocated:glb_auto_perception_sensorfusion.async_fusion_config.ModelConfigs.name)
}

// optional string version = 2 [default = "1.0.0"];
bool ModelConfigs::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ModelConfigs::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
void ModelConfigs::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void ModelConfigs::clear_version() {
  version_.ClearToDefaultNoArena(&ModelConfigs::_default_version_.get());
  clear_has_version();
}
const ::std::string& ModelConfigs::version() const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.async_fusion_config.ModelConfigs.version)
  return version_.GetNoArena();
}
void ModelConfigs::set_version(const ::std::string& value) {
  set_has_version();
  version_.SetNoArena(&ModelConfigs::_default_version_.get(), value);
  // @@protoc_insertion_point(field_set:glb_auto_perception_sensorfusion.async_fusion_config.ModelConfigs.version)
}
#if LANG_CXX11
void ModelConfigs::set_version(::std::string&& value) {
  set_has_version();
  version_.SetNoArena(
    &ModelConfigs::_default_version_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:glb_auto_perception_sensorfusion.async_fusion_config.ModelConfigs.version)
}
#endif
void ModelConfigs::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_version();
  version_.SetNoArena(&ModelConfigs::_default_version_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:glb_auto_perception_sensorfusion.async_fusion_config.ModelConfigs.version)
}
void ModelConfigs::set_version(const char* value, size_t size) {
  set_has_version();
  version_.SetNoArena(&ModelConfigs::_default_version_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:glb_auto_perception_sensorfusion.async_fusion_config.ModelConfigs.version)
}
::std::string* ModelConfigs::mutable_version() {
  set_has_version();
  // @@protoc_insertion_point(field_mutable:glb_auto_perception_sensorfusion.async_fusion_config.ModelConfigs.version)
  return version_.MutableNoArena(&ModelConfigs::_default_version_.get());
}
::std::string* ModelConfigs::release_version() {
  // @@protoc_insertion_point(field_release:glb_auto_perception_sensorfusion.async_fusion_config.ModelConfigs.version)
  clear_has_version();
  return version_.ReleaseNoArena(&ModelConfigs::_default_version_.get());
}
void ModelConfigs::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    set_has_version();
  } else {
    clear_has_version();
  }
  version_.SetAllocatedNoArena(&ModelConfigs::_default_version_.get(), version);
  // @@protoc_insertion_point(field_set_allocated:glb_auto_perception_sensorfusion.async_fusion_config.ModelConfigs.version)
}

// optional string match_method = 3 [default = "hm_matcher"];
bool ModelConfigs::has_match_method() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ModelConfigs::set_has_match_method() {
  _has_bits_[0] |= 0x00000004u;
}
void ModelConfigs::clear_has_match_method() {
  _has_bits_[0] &= ~0x00000004u;
}
void ModelConfigs::clear_match_method() {
  match_method_.ClearToDefaultNoArena(&ModelConfigs::_default_match_method_.get());
  clear_has_match_method();
}
const ::std::string& ModelConfigs::match_method() const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.async_fusion_config.ModelConfigs.match_method)
  return match_method_.GetNoArena();
}
void ModelConfigs::set_match_method(const ::std::string& value) {
  set_has_match_method();
  match_method_.SetNoArena(&ModelConfigs::_default_match_method_.get(), value);
  // @@protoc_insertion_point(field_set:glb_auto_perception_sensorfusion.async_fusion_config.ModelConfigs.match_method)
}
#if LANG_CXX11
void ModelConfigs::set_match_method(::std::string&& value) {
  set_has_match_method();
  match_method_.SetNoArena(
    &ModelConfigs::_default_match_method_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:glb_auto_perception_sensorfusion.async_fusion_config.ModelConfigs.match_method)
}
#endif
void ModelConfigs::set_match_method(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_match_method();
  match_method_.SetNoArena(&ModelConfigs::_default_match_method_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:glb_auto_perception_sensorfusion.async_fusion_config.ModelConfigs.match_method)
}
void ModelConfigs::set_match_method(const char* value, size_t size) {
  set_has_match_method();
  match_method_.SetNoArena(&ModelConfigs::_default_match_method_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:glb_auto_perception_sensorfusion.async_fusion_config.ModelConfigs.match_method)
}
::std::string* ModelConfigs::mutable_match_method() {
  set_has_match_method();
  // @@protoc_insertion_point(field_mutable:glb_auto_perception_sensorfusion.async_fusion_config.ModelConfigs.match_method)
  return match_method_.MutableNoArena(&ModelConfigs::_default_match_method_.get());
}
::std::string* ModelConfigs::release_match_method() {
  // @@protoc_insertion_point(field_release:glb_auto_perception_sensorfusion.async_fusion_config.ModelConfigs.match_method)
  clear_has_match_method();
  return match_method_.ReleaseNoArena(&ModelConfigs::_default_match_method_.get());
}
void ModelConfigs::set_allocated_match_method(::std::string* match_method) {
  if (match_method != NULL) {
    set_has_match_method();
  } else {
    clear_has_match_method();
  }
  match_method_.SetAllocatedNoArena(&ModelConfigs::_default_match_method_.get(), match_method);
  // @@protoc_insertion_point(field_set_allocated:glb_auto_perception_sensorfusion.async_fusion_config.ModelConfigs.match_method)
}

// optional float max_match_distance = 4 [default = 4];
bool ModelConfigs::has_max_match_distance() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ModelConfigs::set_has_max_match_distance() {
  _has_bits_[0] |= 0x00000010u;
}
void ModelConfigs::clear_has_max_match_distance() {
  _has_bits_[0] &= ~0x00000010u;
}
void ModelConfigs::clear_max_match_distance() {
  max_match_distance_ = 4;
  clear_has_max_match_distance();
}
float ModelConfigs::max_match_distance() const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.async_fusion_config.ModelConfigs.max_match_distance)
  return max_match_distance_;
}
void ModelConfigs::set_max_match_distance(float value) {
  set_has_max_match_distance();
  max_match_distance_ = value;
  // @@protoc_insertion_point(field_set:glb_auto_perception_sensorfusion.async_fusion_config.ModelConfigs.max_match_distance)
}

// optional float max_lidar_invisible_period = 5 [default = 0.25];
bool ModelConfigs::has_max_lidar_invisible_period() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ModelConfigs::set_has_max_lidar_invisible_period() {
  _has_bits_[0] |= 0x00000020u;
}
void ModelConfigs::clear_has_max_lidar_invisible_period() {
  _has_bits_[0] &= ~0x00000020u;
}
void ModelConfigs::clear_max_lidar_invisible_period() {
  max_lidar_invisible_period_ = 0.25f;
  clear_has_max_lidar_invisible_period();
}
float ModelConfigs::max_lidar_invisible_period() const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.async_fusion_config.ModelConfigs.max_lidar_invisible_period)
  return max_lidar_invisible_period_;
}
void ModelConfigs::set_max_lidar_invisible_period(float value) {
  set_has_max_lidar_invisible_period();
  max_lidar_invisible_period_ = value;
  // @@protoc_insertion_point(field_set:glb_auto_perception_sensorfusion.async_fusion_config.ModelConfigs.max_lidar_invisible_period)
}

// optional float max_radar_invisible_period = 6 [default = 0.25];
bool ModelConfigs::has_max_radar_invisible_period() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ModelConfigs::set_has_max_radar_invisible_period() {
  _has_bits_[0] |= 0x00000040u;
}
void ModelConfigs::clear_has_max_radar_invisible_period() {
  _has_bits_[0] &= ~0x00000040u;
}
void ModelConfigs::clear_max_radar_invisible_period() {
  max_radar_invisible_period_ = 0.25f;
  clear_has_max_radar_invisible_period();
}
float ModelConfigs::max_radar_invisible_period() const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.async_fusion_config.ModelConfigs.max_radar_invisible_period)
  return max_radar_invisible_period_;
}
void ModelConfigs::set_max_radar_invisible_period(float value) {
  set_has_max_radar_invisible_period();
  max_radar_invisible_period_ = value;
  // @@protoc_insertion_point(field_set:glb_auto_perception_sensorfusion.async_fusion_config.ModelConfigs.max_radar_invisible_period)
}

// optional float max_radar_confident_angle = 7 [default = 30];
bool ModelConfigs::has_max_radar_confident_angle() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ModelConfigs::set_has_max_radar_confident_angle() {
  _has_bits_[0] |= 0x00000080u;
}
void ModelConfigs::clear_has_max_radar_confident_angle() {
  _has_bits_[0] &= ~0x00000080u;
}
void ModelConfigs::clear_max_radar_confident_angle() {
  max_radar_confident_angle_ = 30;
  clear_has_max_radar_confident_angle();
}
float ModelConfigs::max_radar_confident_angle() const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.async_fusion_config.ModelConfigs.max_radar_confident_angle)
  return max_radar_confident_angle_;
}
void ModelConfigs::set_max_radar_confident_angle(float value) {
  set_has_max_radar_confident_angle();
  max_radar_confident_angle_ = value;
  // @@protoc_insertion_point(field_set:glb_auto_perception_sensorfusion.async_fusion_config.ModelConfigs.max_radar_confident_angle)
}

// optional float min_radar_confident_distance = 8 [default = 40];
bool ModelConfigs::has_min_radar_confident_distance() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ModelConfigs::set_has_min_radar_confident_distance() {
  _has_bits_[0] |= 0x00000100u;
}
void ModelConfigs::clear_has_min_radar_confident_distance() {
  _has_bits_[0] &= ~0x00000100u;
}
void ModelConfigs::clear_min_radar_confident_distance() {
  min_radar_confident_distance_ = 40;
  clear_has_min_radar_confident_distance();
}
float ModelConfigs::min_radar_confident_distance() const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.async_fusion_config.ModelConfigs.min_radar_confident_distance)
  return min_radar_confident_distance_;
}
void ModelConfigs::set_min_radar_confident_distance(float value) {
  set_has_min_radar_confident_distance();
  min_radar_confident_distance_ = value;
  // @@protoc_insertion_point(field_set:glb_auto_perception_sensorfusion.async_fusion_config.ModelConfigs.min_radar_confident_distance)
}

// optional float max_camera_invisible_period = 9 [default = 0.25];
bool ModelConfigs::has_max_camera_invisible_period() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ModelConfigs::set_has_max_camera_invisible_period() {
  _has_bits_[0] |= 0x00000200u;
}
void ModelConfigs::clear_has_max_camera_invisible_period() {
  _has_bits_[0] &= ~0x00000200u;
}
void ModelConfigs::clear_max_camera_invisible_period() {
  max_camera_invisible_period_ = 0.25f;
  clear_has_max_camera_invisible_period();
}
float ModelConfigs::max_camera_invisible_period() const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.async_fusion_config.ModelConfigs.max_camera_invisible_period)
  return max_camera_invisible_period_;
}
void ModelConfigs::set_max_camera_invisible_period(float value) {
  set_has_max_camera_invisible_period();
  max_camera_invisible_period_ = value;
  // @@protoc_insertion_point(field_set:glb_auto_perception_sensorfusion.async_fusion_config.ModelConfigs.max_camera_invisible_period)
}

// optional bool use_radar = 10 [default = true];
bool ModelConfigs::has_use_radar() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ModelConfigs::set_has_use_radar() {
  _has_bits_[0] |= 0x00000400u;
}
void ModelConfigs::clear_has_use_radar() {
  _has_bits_[0] &= ~0x00000400u;
}
void ModelConfigs::clear_use_radar() {
  use_radar_ = true;
  clear_has_use_radar();
}
bool ModelConfigs::use_radar() const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.async_fusion_config.ModelConfigs.use_radar)
  return use_radar_;
}
void ModelConfigs::set_use_radar(bool value) {
  set_has_use_radar();
  use_radar_ = value;
  // @@protoc_insertion_point(field_set:glb_auto_perception_sensorfusion.async_fusion_config.ModelConfigs.use_radar)
}

// optional bool use_lidar = 11 [default = true];
bool ModelConfigs::has_use_lidar() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void ModelConfigs::set_has_use_lidar() {
  _has_bits_[0] |= 0x00000800u;
}
void ModelConfigs::clear_has_use_lidar() {
  _has_bits_[0] &= ~0x00000800u;
}
void ModelConfigs::clear_use_lidar() {
  use_lidar_ = true;
  clear_has_use_lidar();
}
bool ModelConfigs::use_lidar() const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.async_fusion_config.ModelConfigs.use_lidar)
  return use_lidar_;
}
void ModelConfigs::set_use_lidar(bool value) {
  set_has_use_lidar();
  use_lidar_ = value;
  // @@protoc_insertion_point(field_set:glb_auto_perception_sensorfusion.async_fusion_config.ModelConfigs.use_lidar)
}

// optional bool use_camera = 12 [default = true];
bool ModelConfigs::has_use_camera() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void ModelConfigs::set_has_use_camera() {
  _has_bits_[0] |= 0x00001000u;
}
void ModelConfigs::clear_has_use_camera() {
  _has_bits_[0] &= ~0x00001000u;
}
void ModelConfigs::clear_use_camera() {
  use_camera_ = true;
  clear_has_use_camera();
}
bool ModelConfigs::use_camera() const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.async_fusion_config.ModelConfigs.use_camera)
  return use_camera_;
}
void ModelConfigs::set_use_camera(bool value) {
  set_has_use_camera();
  use_camera_ = value;
  // @@protoc_insertion_point(field_set:glb_auto_perception_sensorfusion.async_fusion_config.ModelConfigs.use_camera)
}

// optional string motion_method = 13 [default = "kf"];
bool ModelConfigs::has_motion_method() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ModelConfigs::set_has_motion_method() {
  _has_bits_[0] |= 0x00000008u;
}
void ModelConfigs::clear_has_motion_method() {
  _has_bits_[0] &= ~0x00000008u;
}
void ModelConfigs::clear_motion_method() {
  motion_method_.ClearToDefaultNoArena(&ModelConfigs::_default_motion_method_.get());
  clear_has_motion_method();
}
const ::std::string& ModelConfigs::motion_method() const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.async_fusion_config.ModelConfigs.motion_method)
  return motion_method_.GetNoArena();
}
void ModelConfigs::set_motion_method(const ::std::string& value) {
  set_has_motion_method();
  motion_method_.SetNoArena(&ModelConfigs::_default_motion_method_.get(), value);
  // @@protoc_insertion_point(field_set:glb_auto_perception_sensorfusion.async_fusion_config.ModelConfigs.motion_method)
}
#if LANG_CXX11
void ModelConfigs::set_motion_method(::std::string&& value) {
  set_has_motion_method();
  motion_method_.SetNoArena(
    &ModelConfigs::_default_motion_method_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:glb_auto_perception_sensorfusion.async_fusion_config.ModelConfigs.motion_method)
}
#endif
void ModelConfigs::set_motion_method(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_motion_method();
  motion_method_.SetNoArena(&ModelConfigs::_default_motion_method_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:glb_auto_perception_sensorfusion.async_fusion_config.ModelConfigs.motion_method)
}
void ModelConfigs::set_motion_method(const char* value, size_t size) {
  set_has_motion_method();
  motion_method_.SetNoArena(&ModelConfigs::_default_motion_method_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:glb_auto_perception_sensorfusion.async_fusion_config.ModelConfigs.motion_method)
}
::std::string* ModelConfigs::mutable_motion_method() {
  set_has_motion_method();
  // @@protoc_insertion_point(field_mutable:glb_auto_perception_sensorfusion.async_fusion_config.ModelConfigs.motion_method)
  return motion_method_.MutableNoArena(&ModelConfigs::_default_motion_method_.get());
}
::std::string* ModelConfigs::release_motion_method() {
  // @@protoc_insertion_point(field_release:glb_auto_perception_sensorfusion.async_fusion_config.ModelConfigs.motion_method)
  clear_has_motion_method();
  return motion_method_.ReleaseNoArena(&ModelConfigs::_default_motion_method_.get());
}
void ModelConfigs::set_allocated_motion_method(::std::string* motion_method) {
  if (motion_method != NULL) {
    set_has_motion_method();
  } else {
    clear_has_motion_method();
  }
  motion_method_.SetAllocatedNoArena(&ModelConfigs::_default_motion_method_.get(), motion_method);
  // @@protoc_insertion_point(field_set_allocated:glb_auto_perception_sensorfusion.async_fusion_config.ModelConfigs.motion_method)
}

// optional float lidar_process_noise_scale_factor = 14 [default = 10];
bool ModelConfigs::has_lidar_process_noise_scale_factor() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void ModelConfigs::set_has_lidar_process_noise_scale_factor() {
  _has_bits_[0] |= 0x00002000u;
}
void ModelConfigs::clear_has_lidar_process_noise_scale_factor() {
  _has_bits_[0] &= ~0x00002000u;
}
void ModelConfigs::clear_lidar_process_noise_scale_factor() {
  lidar_process_noise_scale_factor_ = 10;
  clear_has_lidar_process_noise_scale_factor();
}
float ModelConfigs::lidar_process_noise_scale_factor() const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.async_fusion_config.ModelConfigs.lidar_process_noise_scale_factor)
  return lidar_process_noise_scale_factor_;
}
void ModelConfigs::set_lidar_process_noise_scale_factor(float value) {
  set_has_lidar_process_noise_scale_factor();
  lidar_process_noise_scale_factor_ = value;
  // @@protoc_insertion_point(field_set:glb_auto_perception_sensorfusion.async_fusion_config.ModelConfigs.lidar_process_noise_scale_factor)
}

// optional float radar_process_noise_scale_factor = 15 [default = 10];
bool ModelConfigs::has_radar_process_noise_scale_factor() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void ModelConfigs::set_has_radar_process_noise_scale_factor() {
  _has_bits_[0] |= 0x00004000u;
}
void ModelConfigs::clear_has_radar_process_noise_scale_factor() {
  _has_bits_[0] &= ~0x00004000u;
}
void ModelConfigs::clear_radar_process_noise_scale_factor() {
  radar_process_noise_scale_factor_ = 10;
  clear_has_radar_process_noise_scale_factor();
}
float ModelConfigs::radar_process_noise_scale_factor() const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.async_fusion_config.ModelConfigs.radar_process_noise_scale_factor)
  return radar_process_noise_scale_factor_;
}
void ModelConfigs::set_radar_process_noise_scale_factor(float value) {
  set_has_radar_process_noise_scale_factor();
  radar_process_noise_scale_factor_ = value;
  // @@protoc_insertion_point(field_set:glb_auto_perception_sensorfusion.async_fusion_config.ModelConfigs.radar_process_noise_scale_factor)
}

// optional float camera_process_noise_scale_factor = 16 [default = 10];
bool ModelConfigs::has_camera_process_noise_scale_factor() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void ModelConfigs::set_has_camera_process_noise_scale_factor() {
  _has_bits_[0] |= 0x00008000u;
}
void ModelConfigs::clear_has_camera_process_noise_scale_factor() {
  _has_bits_[0] &= ~0x00008000u;
}
void ModelConfigs::clear_camera_process_noise_scale_factor() {
  camera_process_noise_scale_factor_ = 10;
  clear_has_camera_process_noise_scale_factor();
}
float ModelConfigs::camera_process_noise_scale_factor() const {
  // @@protoc_insertion_point(field_get:glb_auto_perception_sensorfusion.async_fusion_config.ModelConfigs.camera_process_noise_scale_factor)
  return camera_process_noise_scale_factor_;
}
void ModelConfigs::set_camera_process_noise_scale_factor(float value) {
  set_has_camera_process_noise_scale_factor();
  camera_process_noise_scale_factor_ = value;
  // @@protoc_insertion_point(field_set:glb_auto_perception_sensorfusion.async_fusion_config.ModelConfigs.camera_process_noise_scale_factor)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace async_fusion_config
}  // namespace glb_auto_perception_sensorfusion

// @@protoc_insertion_point(global_scope)
